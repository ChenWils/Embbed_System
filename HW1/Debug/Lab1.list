
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009944  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08009ad4  08009ad4  0000aad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d64  08009d64  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  08009d64  08009d64  0000ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d6c  08009d6c  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d6c  08009d6c  0000ad6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d70  08009d70  0000ad70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009d74  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002258  20000070  08009de4  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022c8  08009de4  0000b2c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f8f  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c44  00000000  00000000  0003202f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e8  00000000  00000000  00036c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c0d  00000000  00000000  00039060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000062a4  00000000  00000000  0003ac6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028760  00000000  00000000  00040f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a943  00000000  00000000  00069671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173fb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1a8  00000000  00000000  00173ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0017e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009abc 	.word	0x08009abc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009abc 	.word	0x08009abc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d013      	beq.n	8000500 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00b      	beq.n	8000500 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e8:	e000      	b.n	80004ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80004ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f9      	beq.n	80004ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f001 f9df 	bl	80018d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f8d0 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 fad2 	bl	8000ac4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000520:	f000 f92e 	bl	8000780 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000524:	f000 f964 	bl	80007f0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000528:	f000 f9a2 	bl	8000870 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800052c:	f000 f9c6 	bl	80008bc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000530:	f000 fa3a 	bl	80009a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000534:	f000 fa68 	bl	8000a08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000538:	f000 fa96 	bl	8000a68 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 800053c:	f000 f9fc 	bl	8000938 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000540:	f005 f8e6 	bl	8005710 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000544:	483a      	ldr	r0, [pc, #232]	@ (8000630 <main+0x120>)
 8000546:	f005 f9da 	bl	80058fe <osMutexNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a39      	ldr	r2, [pc, #228]	@ (8000634 <main+0x124>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of myMutex02 */
  myMutex02Handle = osMutexNew(&myMutex02_attributes);
 8000550:	4839      	ldr	r0, [pc, #228]	@ (8000638 <main+0x128>)
 8000552:	f005 f9d4 	bl	80058fe <osMutexNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a38      	ldr	r2, [pc, #224]	@ (800063c <main+0x12c>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of myMutex03 */
  myMutex03Handle = osMutexNew(&myMutex03_attributes);
 800055c:	4838      	ldr	r0, [pc, #224]	@ (8000640 <main+0x130>)
 800055e:	f005 f9ce 	bl	80058fe <osMutexNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a37      	ldr	r2, [pc, #220]	@ (8000644 <main+0x134>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of myMutex04 */
  myMutex04Handle = osMutexNew(&myMutex04_attributes);
 8000568:	4837      	ldr	r0, [pc, #220]	@ (8000648 <main+0x138>)
 800056a:	f005 f9c8 	bl	80058fe <osMutexNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a36      	ldr	r2, [pc, #216]	@ (800064c <main+0x13c>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of myMutex05 */
  myMutex05Handle = osMutexNew(&myMutex05_attributes);
 8000574:	4836      	ldr	r0, [pc, #216]	@ (8000650 <main+0x140>)
 8000576:	f005 f9c2 	bl	80058fe <osMutexNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a35      	ldr	r2, [pc, #212]	@ (8000654 <main+0x144>)
 800057e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000580:	4a35      	ldr	r2, [pc, #212]	@ (8000658 <main+0x148>)
 8000582:	2100      	movs	r1, #0
 8000584:	2001      	movs	r0, #1
 8000586:	f005 fac8 	bl	8005b1a <osSemaphoreNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a33      	ldr	r2, [pc, #204]	@ (800065c <main+0x14c>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 0, &myBinarySem02_attributes);
 8000590:	4a33      	ldr	r2, [pc, #204]	@ (8000660 <main+0x150>)
 8000592:	2100      	movs	r1, #0
 8000594:	2001      	movs	r0, #1
 8000596:	f005 fac0 	bl	8005b1a <osSemaphoreNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a31      	ldr	r2, [pc, #196]	@ (8000664 <main+0x154>)
 800059e:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem03 */
  myBinarySem03Handle = osSemaphoreNew(1, 1, &myBinarySem03_attributes);
 80005a0:	4a31      	ldr	r2, [pc, #196]	@ (8000668 <main+0x158>)
 80005a2:	2101      	movs	r1, #1
 80005a4:	2001      	movs	r0, #1
 80005a6:	f005 fab8 	bl	8005b1a <osSemaphoreNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a2f      	ldr	r2, [pc, #188]	@ (800066c <main+0x15c>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem04 */
  myBinarySem04Handle = osSemaphoreNew(1, 1, &myBinarySem04_attributes);
 80005b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000670 <main+0x160>)
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f005 fab0 	bl	8005b1a <osSemaphoreNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000674 <main+0x164>)
 80005be:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem05 */
  myBinarySem05Handle = osSemaphoreNew(1, 1, &myBinarySem05_attributes);
 80005c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000678 <main+0x168>)
 80005c2:	2101      	movs	r1, #1
 80005c4:	2001      	movs	r0, #1
 80005c6:	f005 faa8 	bl	8005b1a <osSemaphoreNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a2b      	ldr	r2, [pc, #172]	@ (800067c <main+0x16c>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Start_IT(&htim6);
 80005d0:	482b      	ldr	r0, [pc, #172]	@ (8000680 <main+0x170>)
 80005d2:	f003 fdaf 	bl	8004134 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start(&htim6);
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80005d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000684 <main+0x174>)
 80005d8:	2102      	movs	r1, #2
 80005da:	2010      	movs	r0, #16
 80005dc:	f005 fbbc 	bl	8005d58 <osMessageQueueNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a29      	ldr	r2, [pc, #164]	@ (8000688 <main+0x178>)
 80005e4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005e6:	4a29      	ldr	r2, [pc, #164]	@ (800068c <main+0x17c>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4829      	ldr	r0, [pc, #164]	@ (8000690 <main+0x180>)
 80005ec:	f005 f8da 	bl	80057a4 <osThreadNew>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a28      	ldr	r2, [pc, #160]	@ (8000694 <main+0x184>)
 80005f4:	6013      	str	r3, [r2, #0]

  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartTask, NULL, &defaultTask_attributes);
 80005f6:	4a28      	ldr	r2, [pc, #160]	@ (8000698 <main+0x188>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	4828      	ldr	r0, [pc, #160]	@ (800069c <main+0x18c>)
 80005fc:	f005 f8d2 	bl	80057a4 <osThreadNew>
 8000600:	4603      	mov	r3, r0
 8000602:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <main+0x190>)
 8000604:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000606:	4a27      	ldr	r2, [pc, #156]	@ (80006a4 <main+0x194>)
 8000608:	2100      	movs	r1, #0
 800060a:	4827      	ldr	r0, [pc, #156]	@ (80006a8 <main+0x198>)
 800060c:	f005 f8ca 	bl	80057a4 <osThreadNew>
 8000610:	4603      	mov	r3, r0
 8000612:	4a26      	ldr	r2, [pc, #152]	@ (80006ac <main+0x19c>)
 8000614:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000616:	4a26      	ldr	r2, [pc, #152]	@ (80006b0 <main+0x1a0>)
 8000618:	2100      	movs	r1, #0
 800061a:	4826      	ldr	r0, [pc, #152]	@ (80006b4 <main+0x1a4>)
 800061c:	f005 f8c2 	bl	80057a4 <osThreadNew>
 8000620:	4603      	mov	r3, r0
 8000622:	4a25      	ldr	r2, [pc, #148]	@ (80006b8 <main+0x1a8>)
 8000624:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000626:	f005 f897 	bl	8005758 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0x11a>
 800062e:	bf00      	nop
 8000630:	08009c7c 	.word	0x08009c7c
 8000634:	20000814 	.word	0x20000814
 8000638:	08009c8c 	.word	0x08009c8c
 800063c:	20000818 	.word	0x20000818
 8000640:	08009c9c 	.word	0x08009c9c
 8000644:	2000081c 	.word	0x2000081c
 8000648:	08009cac 	.word	0x08009cac
 800064c:	20000820 	.word	0x20000820
 8000650:	08009cbc 	.word	0x08009cbc
 8000654:	20000824 	.word	0x20000824
 8000658:	08009ccc 	.word	0x08009ccc
 800065c:	20000828 	.word	0x20000828
 8000660:	08009cdc 	.word	0x08009cdc
 8000664:	2000082c 	.word	0x2000082c
 8000668:	08009cec 	.word	0x08009cec
 800066c:	20000830 	.word	0x20000830
 8000670:	08009cfc 	.word	0x08009cfc
 8000674:	20000834 	.word	0x20000834
 8000678:	08009d0c 	.word	0x08009d0c
 800067c:	20000838 	.word	0x20000838
 8000680:	200001c0 	.word	0x200001c0
 8000684:	08009c64 	.word	0x08009c64
 8000688:	20000810 	.word	0x20000810
 800068c:	08009bd4 	.word	0x08009bd4
 8000690:	08000f2d 	.word	0x08000f2d
 8000694:	20000800 	.word	0x20000800
 8000698:	08009bf8 	.word	0x08009bf8
 800069c:	08000fb5 	.word	0x08000fb5
 80006a0:	20000804 	.word	0x20000804
 80006a4:	08009c1c 	.word	0x08009c1c
 80006a8:	08001041 	.word	0x08001041
 80006ac:	20000808 	.word	0x20000808
 80006b0:	08009c40 	.word	0x08009c40
 80006b4:	080010c9 	.word	0x080010c9
 80006b8:	2000080c 	.word	0x2000080c

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b096      	sub	sp, #88	@ 0x58
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2244      	movs	r2, #68	@ 0x44
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f008 ff34 	bl	8009538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006e2:	f002 f83f 	bl	8002764 <HAL_PWREx_ControlVoltageScaling>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ec:	f000 fcf6 	bl	80010dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f0:	f002 f81a 	bl	8002728 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006f4:	4b21      	ldr	r3, [pc, #132]	@ (800077c <SystemClock_Config+0xc0>)
 80006f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemClock_Config+0xc0>)
 80006fc:	f023 0318 	bic.w	r3, r3, #24
 8000700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000704:	2314      	movs	r3, #20
 8000706:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000714:	2360      	movs	r3, #96	@ 0x60
 8000716:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800071c:	2301      	movs	r3, #1
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000724:	2328      	movs	r3, #40	@ 0x28
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000728:	2307      	movs	r3, #7
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4618      	mov	r0, r3
 800073a:	f002 f935 	bl	80029a8 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000744:	f000 fcca 	bl	80010dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2303      	movs	r3, #3
 800074e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	2104      	movs	r1, #4
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fcfd 	bl	8003160 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800076c:	f000 fcb6 	bl	80010dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000770:	f003 fa04 	bl	8003b7c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000774:	bf00      	nop
 8000776:	3758      	adds	r7, #88	@ 0x58
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000

08000780 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 8000786:	4a19      	ldr	r2, [pc, #100]	@ (80007ec <MX_DFSDM1_Init+0x6c>)
 8000788:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 800078c:	2201      	movs	r2, #1
 800078e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 8000798:	2202      	movs	r2, #2
 800079a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 80007aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007ae:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_DFSDM1_Init+0x68>)
 80007d6:	f001 fa29 	bl	8001c2c <HAL_DFSDM_ChannelInit>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80007e0:	f000 fc7c 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	40016020 	.word	0x40016020

080007f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_I2C2_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000868 <MX_I2C2_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_I2C2_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	@ (800086c <MX_I2C2_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_I2C2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_I2C2_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800082a:	480e      	ldr	r0, [pc, #56]	@ (8000864 <MX_I2C2_Init+0x74>)
 800082c:	f001 fd16 	bl	800225c <HAL_I2C_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 fc51 	bl	80010dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4809      	ldr	r0, [pc, #36]	@ (8000864 <MX_I2C2_Init+0x74>)
 800083e:	f001 fda8 	bl	8002392 <HAL_I2CEx_ConfigAnalogFilter>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 fc48 	bl	80010dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_I2C2_Init+0x74>)
 8000850:	f001 fdea 	bl	8002428 <HAL_I2CEx_ConfigDigitalFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fc3f 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000c4 	.word	0x200000c4
 8000868:	40005800 	.word	0x40005800
 800086c:	10d19ce4 	.word	0x10d19ce4

08000870 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_QUADSPI_Init+0x44>)
 8000876:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <MX_QUADSPI_Init+0x48>)
 8000878:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_QUADSPI_Init+0x44>)
 800087c:	2202      	movs	r2, #2
 800087e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_QUADSPI_Init+0x44>)
 8000882:	2204      	movs	r2, #4
 8000884:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_QUADSPI_Init+0x44>)
 8000888:	2210      	movs	r2, #16
 800088a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_QUADSPI_Init+0x44>)
 800088e:	2217      	movs	r2, #23
 8000890:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_QUADSPI_Init+0x44>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_QUADSPI_Init+0x44>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_QUADSPI_Init+0x44>)
 80008a0:	f001 ffc6 	bl	8002830 <HAL_QSPI_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80008aa:	f000 fc17 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000118 	.word	0x20000118
 80008b8:	a0001000 	.word	0xa0001000

080008bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <MX_SPI3_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008d6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_SPI3_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_SPI3_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_SPI3_Init+0x74>)
 800090a:	2207      	movs	r2, #7
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_SPI3_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_SPI3_Init+0x74>)
 8000916:	2208      	movs	r2, #8
 8000918:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_SPI3_Init+0x74>)
 800091c:	f003 fb10 	bl	8003f40 <HAL_SPI_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 fbd9 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000015c 	.word	0x2000015c
 8000934:	40003c00 	.word	0x40003c00

08000938 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_TIM6_Init+0x68>)
 800094a:	4a16      	ldr	r2, [pc, #88]	@ (80009a4 <MX_TIM6_Init+0x6c>)
 800094c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39999;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_TIM6_Init+0x68>)
 8000950:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000954:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_TIM6_Init+0x68>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <MX_TIM6_Init+0x68>)
 800095e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000962:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_TIM6_Init+0x68>)
 8000966:	2280      	movs	r2, #128	@ 0x80
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800096a:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <MX_TIM6_Init+0x68>)
 800096c:	f003 fb8b 	bl	8004086 <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000976:	f000 fbb1 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <MX_TIM6_Init+0x68>)
 8000988:	f003 fe1a 	bl	80045c0 <HAL_TIMEx_MasterConfigSynchronization>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000992:	f000 fba3 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001c0 	.word	0x200001c0
 80009a4:	40001000 	.word	0x40001000

080009a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	@ (8000a04 <MX_USART1_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b2:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009ec:	f003 fe8e 	bl	800470c <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 fb71 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000020c 	.word	0x2000020c
 8000a04:	40013800 	.word	0x40013800

08000a08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a0e:	4a15      	ldr	r2, [pc, #84]	@ (8000a64 <MX_USART3_UART_Init+0x5c>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a4c:	f003 fe5e 	bl	800470c <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a56:	f000 fb41 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000294 	.word	0x20000294
 8000a64:	40004800 	.word	0x40004800

08000a68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	2206      	movs	r2, #6
 8000a78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2202      	movs	r2, #2
 8000a84:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	f001 fd08 	bl	80024c0 <HAL_PCD_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ab6:	f000 fb11 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000031c 	.word	0x2000031c

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ada:	4bbd      	ldr	r3, [pc, #756]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4abc      	ldr	r2, [pc, #752]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4bba      	ldr	r3, [pc, #744]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	4bb7      	ldr	r3, [pc, #732]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4ab6      	ldr	r2, [pc, #728]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4bb4      	ldr	r3, [pc, #720]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4bb1      	ldr	r3, [pc, #708]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4ab0      	ldr	r2, [pc, #704]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4bae      	ldr	r3, [pc, #696]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4bab      	ldr	r3, [pc, #684]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	4aaa      	ldr	r2, [pc, #680]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2e:	4ba8      	ldr	r3, [pc, #672]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	4ba5      	ldr	r3, [pc, #660]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	4aa4      	ldr	r2, [pc, #656]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b46:	4ba2      	ldr	r3, [pc, #648]	@ (8000dd0 <MX_GPIO_Init+0x30c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000b58:	489e      	ldr	r0, [pc, #632]	@ (8000dd4 <MX_GPIO_Init+0x310>)
 8000b5a:	f001 fb35 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b68:	f001 fb2e 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000b72:	4899      	ldr	r0, [pc, #612]	@ (8000dd8 <MX_GPIO_Init+0x314>)
 8000b74:	f001 fb28 	bl	80021c8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000b7e:	4897      	ldr	r0, [pc, #604]	@ (8000ddc <MX_GPIO_Init+0x318>)
 8000b80:	f001 fb22 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b8a:	4894      	ldr	r0, [pc, #592]	@ (8000ddc <MX_GPIO_Init+0x318>)
 8000b8c:	f001 fb1c 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000b96:	4892      	ldr	r0, [pc, #584]	@ (8000de0 <MX_GPIO_Init+0x31c>)
 8000b98:	f001 fb16 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	488d      	ldr	r0, [pc, #564]	@ (8000dd8 <MX_GPIO_Init+0x314>)
 8000ba2:	f001 fb11 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2101      	movs	r1, #1
 8000baa:	488a      	ldr	r0, [pc, #552]	@ (8000dd4 <MX_GPIO_Init+0x310>)
 8000bac:	f001 fb0c 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000bb0:	f240 1315 	movw	r3, #277	@ 0x115
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4882      	ldr	r0, [pc, #520]	@ (8000dd4 <MX_GPIO_Init+0x310>)
 8000bca:	f001 f93b 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000bce:	236a      	movs	r3, #106	@ 0x6a
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	487c      	ldr	r0, [pc, #496]	@ (8000dd4 <MX_GPIO_Init+0x310>)
 8000be4:	f001 f92e 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000be8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4878      	ldr	r0, [pc, #480]	@ (8000de0 <MX_GPIO_Init+0x31c>)
 8000c00:	f001 f920 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c04:	233f      	movs	r3, #63	@ 0x3f
 8000c06:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c08:	230b      	movs	r3, #11
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4872      	ldr	r0, [pc, #456]	@ (8000de0 <MX_GPIO_Init+0x31c>)
 8000c18:	f001 f914 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3a:	f001 f903 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c3e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5a:	f001 f8f3 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7c:	f001 f8e2 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000c80:	2310      	movs	r3, #16
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c84:	230b      	movs	r3, #11
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c96:	f001 f8d5 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c9a:	23e0      	movs	r3, #224	@ 0xe0
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb8:	f001 f8c4 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4841      	ldr	r0, [pc, #260]	@ (8000dd8 <MX_GPIO_Init+0x314>)
 8000cd2:	f001 f8b7 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cda:	230b      	movs	r3, #11
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	483b      	ldr	r0, [pc, #236]	@ (8000dd8 <MX_GPIO_Init+0x314>)
 8000cea:	f001 f8ab 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cee:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000cf2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4834      	ldr	r0, [pc, #208]	@ (8000dd8 <MX_GPIO_Init+0x314>)
 8000d08:	f001 f89c 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d0c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000d10:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	482e      	ldr	r0, [pc, #184]	@ (8000ddc <MX_GPIO_Init+0x318>)
 8000d24:	f001 f88e 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d28:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4826      	ldr	r0, [pc, #152]	@ (8000ddc <MX_GPIO_Init+0x318>)
 8000d42:	f001 f87f 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d46:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4820      	ldr	r0, [pc, #128]	@ (8000de0 <MX_GPIO_Init+0x31c>)
 8000d60:	f001 f870 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d64:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4819      	ldr	r0, [pc, #100]	@ (8000de0 <MX_GPIO_Init+0x31c>)
 8000d7c:	f001 f862 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d80:	2302      	movs	r3, #2
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d90:	2305      	movs	r3, #5
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <MX_GPIO_Init+0x318>)
 8000d9c:	f001 f852 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000da0:	2378      	movs	r3, #120	@ 0x78
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db0:	2307      	movs	r3, #7
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <MX_GPIO_Init+0x318>)
 8000dbc:	f001 f842 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000dc0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc6:	2312      	movs	r3, #18
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <MX_GPIO_Init+0x320>
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48001000 	.word	0x48001000
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	48000c00 	.word	0x48000c00
 8000de0:	48000800 	.word	0x48000800
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dea:	2304      	movs	r3, #4
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	480b      	ldr	r0, [pc, #44]	@ (8000e24 <MX_GPIO_Init+0x360>)
 8000df6:	f001 f825 	bl	8001e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	2017      	movs	r0, #23
 8000e00:	f000 fedd 	bl	8001bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e04:	2017      	movs	r0, #23
 8000e06:	f000 fef6 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	2028      	movs	r0, #40	@ 0x28
 8000e10:	f000 fed5 	bl	8001bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e14:	2028      	movs	r0, #40	@ 0x28
 8000e16:	f000 feee 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	48000400 	.word	0x48000400

08000e28 <_write>:
//HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
//return ch;
//}

int _write(int file, char *ptr, int len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e009      	b.n	8000e4e <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	60ba      	str	r2, [r7, #8]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fb3c 	bl	80004c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	dbf1      	blt.n	8000e3a <_write+0x12>
  }
  return len;
 8000e56:	687b      	ldr	r3, [r7, #4]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_GPIO_EXTI_Callback>:
//  ITM_SendChar(*ptr++);
// }
// return len;
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_EXTI13_Pin){
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e70:	d131      	bne.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x76>

		if (HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) == 0){
 8000e72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e76:	481a      	ldr	r0, [pc, #104]	@ (8000ee0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e78:	f001 f98e 	bl	8002198 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10b      	bne.n	8000e9a <HAL_GPIO_EXTI_Callback+0x3a>
			 buttonPressTime = xTaskGetTickCount();
 8000e82:	f006 fc99 	bl	80077b8 <xTaskGetTickCount>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a16      	ldr	r2, [pc, #88]	@ (8000ee4 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e8a:	6013      	str	r3, [r2, #0]
			 buttonState = 1;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
			 printf("hello \n");
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <HAL_GPIO_EXTI_Callback+0x8c>)
 8000e94:	f008 fa70 	bl	8009378 <puts>
		}



	}
}
 8000e98:	e01d      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x76>
		   if (buttonState == 1) {
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d118      	bne.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x76>
		        uint32_t pressDuration = xTaskGetTickCount() - buttonPressTime;
 8000ea4:	f006 fc88 	bl	80077b8 <xTaskGetTickCount>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_GPIO_EXTI_Callback+0x84>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	60fb      	str	r3, [r7, #12]
		       buttonState = 0;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
		       if(  pressDuration >= pdMS_TO_TICKS(1000) ){
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ebe:	d305      	bcc.n	8000ecc <HAL_GPIO_EXTI_Callback+0x6c>
		    	   osSemaphoreRelease(myBinarySem03Handle);
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_GPIO_EXTI_Callback+0x90>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 ff03 	bl	8005cd0 <osSemaphoreRelease>
}
 8000eca:	e004      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x76>
		    	   osSemaphoreRelease(myBinarySem01Handle);
 8000ecc:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 fefd 	bl	8005cd0 <osSemaphoreRelease>
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	48000800 	.word	0x48000800
 8000ee4:	20000840 	.word	0x20000840
 8000ee8:	2000083c 	.word	0x2000083c
 8000eec:	08009b9c 	.word	0x08009b9c
 8000ef0:	20000830 	.word	0x20000830
 8000ef4:	20000828 	.word	0x20000828

08000ef8 <HAL_TIM_PeriodElapsedCallback>:
//	}
//
//
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

	if (htim == &htim6) {  // Assuming TIM2 is used for the timer
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d107      	bne.n	8000f18 <HAL_TIM_PeriodElapsedCallback+0x20>

		//osSemaphoreRelease(myBinarySem02Handle);
		uint16_t data  = AUTO_PRESS;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	81fb      	strh	r3, [r7, #14]
		osSemaphoreRelease(myBinarySem02Handle);
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f004 fedc 	bl	8005cd0 <osSemaphoreRelease>
//		osMessageQueuePut(myQueue01Handle  , &data , 1, 100);
    }
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200001c0 	.word	0x200001c0
 8000f24:	20000000 	.word	0x20000000
 8000f28:	2000082c 	.word	0x2000082c

08000f2c <StartTask02>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreAcquire(myBinarySem02Handle, osWaitForever);
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <StartTask02+0x74>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fe75 	bl	8005c2c <osSemaphoreAcquire>
	osMutexAcquire(myMutex05Handle, osWaitForever);
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <StartTask02+0x78>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f004 fd5d 	bl	8005a0a <osMutexAcquire>
	 printf("task2 \n");
 8000f50:	4815      	ldr	r0, [pc, #84]	@ (8000fa8 <StartTask02+0x7c>)
 8000f52:	f008 fa11 	bl	8009378 <puts>
	for (int i=0 ; i<20 ; i++){
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	e012      	b.n	8000f82 <StartTask02+0x56>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000f5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f60:	4812      	ldr	r0, [pc, #72]	@ (8000fac <StartTask02+0x80>)
 8000f62:	f001 f949 	bl	80021f8 <HAL_GPIO_TogglePin>
		osDelay(50);
 8000f66:	2032      	movs	r0, #50	@ 0x32
 8000f68:	f004 fcae 	bl	80058c8 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000f6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f70:	480e      	ldr	r0, [pc, #56]	@ (8000fac <StartTask02+0x80>)
 8000f72:	f001 f941 	bl	80021f8 <HAL_GPIO_TogglePin>
		osDelay(50);
 8000f76:	2032      	movs	r0, #50	@ 0x32
 8000f78:	f004 fca6 	bl	80058c8 <osDelay>
	for (int i=0 ; i<20 ; i++){
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b13      	cmp	r3, #19
 8000f86:	dde9      	ble.n	8000f5c <StartTask02+0x30>
	}
	//osMutexRelease(myMutex01Handle);
	 osMutexRelease(myMutex05Handle);
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <StartTask02+0x78>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fd87 	bl	8005aa0 <osMutexRelease>
	 osSemaphoreRelease(myBinarySem05Handle);
 8000f92:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <StartTask02+0x84>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fe9a 	bl	8005cd0 <osSemaphoreRelease>
  {
 8000f9c:	e7ca      	b.n	8000f34 <StartTask02+0x8>
 8000f9e:	bf00      	nop
 8000fa0:	2000082c 	.word	0x2000082c
 8000fa4:	20000824 	.word	0x20000824
 8000fa8:	08009ba4 	.word	0x08009ba4
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	20000838 	.word	0x20000838

08000fb4 <StartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask */
void StartTask(void *argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <StartTask+0x78>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 fe31 	bl	8005c2c <osSemaphoreAcquire>
	  osMutexAcquire(myMutex05Handle, osWaitForever);
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <StartTask+0x7c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f004 fd19 	bl	8005a0a <osMutexAcquire>
	  printf("task1 \n");
 8000fd8:	4816      	ldr	r0, [pc, #88]	@ (8001034 <StartTask+0x80>)
 8000fda:	f008 f9cd 	bl	8009378 <puts>
	  for (int i=0 ; i<5 ; i++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e014      	b.n	800100e <StartTask+0x5a>
		  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000fe4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe8:	4813      	ldr	r0, [pc, #76]	@ (8001038 <StartTask+0x84>)
 8000fea:	f001 f905 	bl	80021f8 <HAL_GPIO_TogglePin>
		  osDelay(500);
 8000fee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ff2:	f004 fc69 	bl	80058c8 <osDelay>
		  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000ff6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ffa:	480f      	ldr	r0, [pc, #60]	@ (8001038 <StartTask+0x84>)
 8000ffc:	f001 f8fc 	bl	80021f8 <HAL_GPIO_TogglePin>
		  osDelay(500);
 8001000:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001004:	f004 fc60 	bl	80058c8 <osDelay>
	  for (int i=0 ; i<5 ; i++){
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b04      	cmp	r3, #4
 8001012:	dde7      	ble.n	8000fe4 <StartTask+0x30>
	  }
	  //osMutexRelease(myMutex01Handle);
	  osMutexRelease(myMutex05Handle);
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <StartTask+0x7c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f004 fd41 	bl	8005aa0 <osMutexRelease>
	  osSemaphoreRelease(myBinarySem05Handle);
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <StartTask+0x88>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fe54 	bl	8005cd0 <osSemaphoreRelease>
  {
 8001028:	e7c8      	b.n	8000fbc <StartTask+0x8>
 800102a:	bf00      	nop
 800102c:	20000828 	.word	0x20000828
 8001030:	20000824 	.word	0x20000824
 8001034:	08009bac 	.word	0x08009bac
 8001038:	48000400 	.word	0x48000400
 800103c:	20000838 	.word	0x20000838

08001040 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myBinarySem03Handle, osWaitForever);
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <StartTask03+0x74>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	4618      	mov	r0, r3
 8001052:	f004 fdeb 	bl	8005c2c <osSemaphoreAcquire>
	  osMutexAcquire(myMutex05Handle, osWaitForever);
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <StartTask03+0x78>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f04f 31ff 	mov.w	r1, #4294967295
 800105e:	4618      	mov	r0, r3
 8001060:	f004 fcd3 	bl	8005a0a <osMutexAcquire>
	  printf("task3 \n");
 8001064:	4815      	ldr	r0, [pc, #84]	@ (80010bc <StartTask03+0x7c>)
 8001066:	f008 f987 	bl	8009378 <puts>
	  for (int i=0 ; i<50 ; i++){
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e012      	b.n	8001096 <StartTask03+0x56>
		  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001070:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001074:	4812      	ldr	r0, [pc, #72]	@ (80010c0 <StartTask03+0x80>)
 8001076:	f001 f8bf 	bl	80021f8 <HAL_GPIO_TogglePin>
		  osDelay(50);
 800107a:	2032      	movs	r0, #50	@ 0x32
 800107c:	f004 fc24 	bl	80058c8 <osDelay>
		  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001080:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001084:	480e      	ldr	r0, [pc, #56]	@ (80010c0 <StartTask03+0x80>)
 8001086:	f001 f8b7 	bl	80021f8 <HAL_GPIO_TogglePin>
		  osDelay(50);
 800108a:	2032      	movs	r0, #50	@ 0x32
 800108c:	f004 fc1c 	bl	80058c8 <osDelay>
	  for (int i=0 ; i<50 ; i++){
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b31      	cmp	r3, #49	@ 0x31
 800109a:	dde9      	ble.n	8001070 <StartTask03+0x30>
	  }
	  //osMutexRelease(myMutex01Handle);
	  osMutexRelease(myMutex05Handle);
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <StartTask03+0x78>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fcfd 	bl	8005aa0 <osMutexRelease>
	  osSemaphoreRelease(myBinarySem05Handle);
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <StartTask03+0x84>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fe10 	bl	8005cd0 <osSemaphoreRelease>
  {
 80010b0:	e7ca      	b.n	8001048 <StartTask03+0x8>
 80010b2:	bf00      	nop
 80010b4:	20000830 	.word	0x20000830
 80010b8:	20000824 	.word	0x20000824
 80010bc:	08009bb4 	.word	0x08009bb4
 80010c0:	48000400 	.word	0x48000400
 80010c4:	20000838 	.word	0x20000838

080010c8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
//
//
//
//	}
  /* USER CODE END StartTask04 */
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <Error_Handler+0x8>

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_MspInit+0x4c>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f2:	4a10      	ldr	r2, [pc, #64]	@ (8001134 <HAL_MspInit+0x4c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <HAL_MspInit+0x4c>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_MspInit+0x4c>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <HAL_MspInit+0x4c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001110:	6593      	str	r3, [r2, #88]	@ 0x58
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_MspInit+0x4c>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	210f      	movs	r1, #15
 8001122:	f06f 0001 	mvn.w	r0, #1
 8001126:	f000 fd4a 	bl	8001bbe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ac      	sub	sp, #176	@ 0xb0
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2288      	movs	r2, #136	@ 0x88
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f008 f9ed 	bl	8009538 <memset>
  if(DFSDM1_Init == 0)
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d142      	bne.n	80011ec <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001166:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800116a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fa16 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001182:	f7ff ffab 	bl	80010dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001186:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118a:	4a1b      	ldr	r2, [pc, #108]	@ (80011f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800118c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001190:	6613      	str	r3, [r2, #96]	@ 0x60
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001196:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800119e:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	4a15      	ldr	r2, [pc, #84]	@ (80011f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80011b6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80011ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011d0:	2306      	movs	r3, #6
 80011d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	@ (80011fc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80011de:	f000 fe31 	bl	8001e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a02      	ldr	r2, [pc, #8]	@ (80011f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011ea:	6013      	str	r3, [r2, #0]
  }

}
 80011ec:	bf00      	nop
 80011ee:	37b0      	adds	r7, #176	@ 0xb0
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000844 	.word	0x20000844
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48001000 	.word	0x48001000

08001200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0ac      	sub	sp, #176	@ 0xb0
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2288      	movs	r2, #136	@ 0x88
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f008 f989 	bl	8009538 <memset>
  if(hi2c->Instance==I2C2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <HAL_I2C_MspInit+0xb0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d13b      	bne.n	80012a8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001234:	2300      	movs	r3, #0
 8001236:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f9b3 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001248:	f7ff ff48 	bl	80010dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_I2C_MspInit+0xb4>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <HAL_I2C_MspInit+0xb4>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <HAL_I2C_MspInit+0xb4>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001264:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126c:	2312      	movs	r3, #18
 800126e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001272:	2301      	movs	r3, #1
 8001274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800127e:	2304      	movs	r3, #4
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001288:	4619      	mov	r1, r3
 800128a:	480b      	ldr	r0, [pc, #44]	@ (80012b8 <HAL_I2C_MspInit+0xb8>)
 800128c:	f000 fdda 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <HAL_I2C_MspInit+0xb4>)
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	4a07      	ldr	r2, [pc, #28]	@ (80012b4 <HAL_I2C_MspInit+0xb4>)
 8001296:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800129a:	6593      	str	r3, [r2, #88]	@ 0x58
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_I2C_MspInit+0xb4>)
 800129e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80012a8:	bf00      	nop
 80012aa:	37b0      	adds	r7, #176	@ 0xb0
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40005800 	.word	0x40005800
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000400 	.word	0x48000400

080012bc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a17      	ldr	r2, [pc, #92]	@ (8001338 <HAL_QSPI_MspInit+0x7c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d128      	bne.n	8001330 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012de:	4b17      	ldr	r3, [pc, #92]	@ (800133c <HAL_QSPI_MspInit+0x80>)
 80012e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012e2:	4a16      	ldr	r2, [pc, #88]	@ (800133c <HAL_QSPI_MspInit+0x80>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80012ea:	4b14      	ldr	r3, [pc, #80]	@ (800133c <HAL_QSPI_MspInit+0x80>)
 80012ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <HAL_QSPI_MspInit+0x80>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4a10      	ldr	r2, [pc, #64]	@ (800133c <HAL_QSPI_MspInit+0x80>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <HAL_QSPI_MspInit+0x80>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800130e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001312:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001320:	230a      	movs	r3, #10
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <HAL_QSPI_MspInit+0x84>)
 800132c:	f000 fd8a 	bl	8001e44 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	@ 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	a0001000 	.word	0xa0001000
 800133c:	40021000 	.word	0x40021000
 8001340:	48001000 	.word	0x48001000

08001344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <HAL_SPI_MspInit+0x7c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d128      	bne.n	80013b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001366:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <HAL_SPI_MspInit+0x80>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136a:	4a16      	ldr	r2, [pc, #88]	@ (80013c4 <HAL_SPI_MspInit+0x80>)
 800136c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001370:	6593      	str	r3, [r2, #88]	@ 0x58
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <HAL_SPI_MspInit+0x80>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_SPI_MspInit+0x80>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a10      	ldr	r2, [pc, #64]	@ (80013c4 <HAL_SPI_MspInit+0x80>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_SPI_MspInit+0x80>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001396:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013a8:	2306      	movs	r3, #6
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <HAL_SPI_MspInit+0x84>)
 80013b4:	f000 fd46 	bl	8001e44 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	@ 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40003c00 	.word	0x40003c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000800 	.word	0x48000800

080013cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d113      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2105      	movs	r1, #5
 80013fa:	2036      	movs	r0, #54	@ 0x36
 80013fc:	f000 fbdf 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001400:	2036      	movs	r0, #54	@ 0x36
 8001402:	f000 fbf8 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40001000 	.word	0x40001000
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0ae      	sub	sp, #184	@ 0xb8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	2288      	movs	r2, #136	@ 0x88
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f008 f87d 	bl	8009538 <memset>
  if(huart->Instance==USART1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a42      	ldr	r2, [pc, #264]	@ (800154c <HAL_UART_MspInit+0x134>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d13b      	bne.n	80014c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800144c:	2300      	movs	r3, #0
 800144e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4618      	mov	r0, r3
 8001456:	f002 f8a7 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001460:	f7ff fe3c 	bl	80010dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001464:	4b3a      	ldr	r3, [pc, #232]	@ (8001550 <HAL_UART_MspInit+0x138>)
 8001466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001468:	4a39      	ldr	r2, [pc, #228]	@ (8001550 <HAL_UART_MspInit+0x138>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001470:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <HAL_UART_MspInit+0x138>)
 8001472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	4b34      	ldr	r3, [pc, #208]	@ (8001550 <HAL_UART_MspInit+0x138>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a33      	ldr	r2, [pc, #204]	@ (8001550 <HAL_UART_MspInit+0x138>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001488:	4b31      	ldr	r3, [pc, #196]	@ (8001550 <HAL_UART_MspInit+0x138>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001494:	23c0      	movs	r3, #192	@ 0xc0
 8001496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ac:	2307      	movs	r3, #7
 80014ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014b6:	4619      	mov	r1, r3
 80014b8:	4826      	ldr	r0, [pc, #152]	@ (8001554 <HAL_UART_MspInit+0x13c>)
 80014ba:	f000 fcc3 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014be:	e040      	b.n	8001542 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a24      	ldr	r2, [pc, #144]	@ (8001558 <HAL_UART_MspInit+0x140>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d13b      	bne.n	8001542 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014ca:	2304      	movs	r3, #4
 80014cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 f866 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80014e2:	f7ff fdfb 	bl	80010dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <HAL_UART_MspInit+0x138>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	4a19      	ldr	r2, [pc, #100]	@ (8001550 <HAL_UART_MspInit+0x138>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <HAL_UART_MspInit+0x138>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <HAL_UART_MspInit+0x138>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <HAL_UART_MspInit+0x138>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <HAL_UART_MspInit+0x138>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001516:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800151a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001530:	2307      	movs	r3, #7
 8001532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800153a:	4619      	mov	r1, r3
 800153c:	4807      	ldr	r0, [pc, #28]	@ (800155c <HAL_UART_MspInit+0x144>)
 800153e:	f000 fc81 	bl	8001e44 <HAL_GPIO_Init>
}
 8001542:	bf00      	nop
 8001544:	37b8      	adds	r7, #184	@ 0xb8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40013800 	.word	0x40013800
 8001550:	40021000 	.word	0x40021000
 8001554:	48000400 	.word	0x48000400
 8001558:	40004800 	.word	0x40004800
 800155c:	48000c00 	.word	0x48000c00

08001560 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ac      	sub	sp, #176	@ 0xb0
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2288      	movs	r2, #136	@ 0x88
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f007 ffd9 	bl	8009538 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800158e:	d17c      	bne.n	800168a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001594:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001596:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800159a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80015a6:	2318      	movs	r3, #24
 80015a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015aa:	2307      	movs	r3, #7
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80015b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015ba:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fff1 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80015cc:	f7ff fd86 	bl	80010dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b30      	ldr	r3, [pc, #192]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80015e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001606:	f000 fc1d 	bl	8001e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800160a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800160e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001624:	230a      	movs	r3, #10
 8001626:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001634:	f000 fc06 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163c:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 800163e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001642:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d114      	bne.n	8001686 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	4a0c      	ldr	r2, [pc, #48]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001666:	6593      	str	r3, [r2, #88]	@ 0x58
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001674:	f001 f8cc 	bl	8002810 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167c:	4a05      	ldr	r2, [pc, #20]	@ (8001694 <HAL_PCD_MspInit+0x134>)
 800167e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001682:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001684:	e001      	b.n	800168a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001686:	f001 f8c3 	bl	8002810 <HAL_PWREx_EnableVddUSB>
}
 800168a:	bf00      	nop
 800168c:	37b0      	adds	r7, #176	@ 0xb0
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <NMI_Handler+0x4>

080016a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <MemManage_Handler+0x4>

080016b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <UsageFault_Handler+0x4>

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d2:	f000 f955 	bl	8001980 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016d6:	f006 fbb9 	bl	8007e4c <xTaskGetSchedulerState>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d001      	beq.n	80016e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016e0:	f007 fab2 	bl	8008c48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016ec:	2020      	movs	r0, #32
 80016ee:	f000 fd9d 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016f2:	2040      	movs	r0, #64	@ 0x40
 80016f4:	f000 fd9a 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016f8:	2080      	movs	r0, #128	@ 0x80
 80016fa:	f000 fd97 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016fe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001702:	f000 fd93 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}

0800170a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800170e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001712:	f000 fd8b 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001716:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800171a:	f000 fd87 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800171e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001722:	f000 fd83 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001726:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800172a:	f000 fd7f 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800172e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001732:	f000 fd7b 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <TIM6_DAC_IRQHandler+0x10>)
 8001742:	f002 fd67 	bl	8004214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200001c0 	.word	0x200001c0

08001750 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e00a      	b.n	8001778 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001762:	f3af 8000 	nop.w
 8001766:	4601      	mov	r1, r0
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	b2ca      	uxtb	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf0      	blt.n	8001762 <_read+0x12>
  }

  return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:
  }
  return len;
}

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f007 fed6 	bl	80095d4 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20018000 	.word	0x20018000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000848 	.word	0x20000848
 800185c:	200022c8 	.word	0x200022c8

08001860 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001888:	f7ff ffea 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800188e:	490d      	ldr	r1, [pc, #52]	@ (80018c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001890:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <LoopForever+0xe>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a4:	4c0a      	ldr	r4, [pc, #40]	@ (80018d0 <LoopForever+0x16>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f007 fe95 	bl	80095e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018b6:	f7fe fe2b 	bl	8000510 <main>

080018ba <LoopForever>:

LoopForever:
    b LoopForever
 80018ba:	e7fe      	b.n	80018ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018c8:	08009d74 	.word	0x08009d74
  ldr r2, =_sbss
 80018cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018d0:	200022c8 	.word	0x200022c8

080018d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC1_2_IRQHandler>

080018d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 f961 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018e6:	200f      	movs	r0, #15
 80018e8:	f000 f80e 	bl	8001908 <HAL_InitTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	71fb      	strb	r3, [r7, #7]
 80018f6:	e001      	b.n	80018fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018f8:	f7ff fbf6 	bl	80010e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_InitTick+0x6c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d023      	beq.n	8001964 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <HAL_InitTick+0x70>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <HAL_InitTick+0x6c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f96d 	bl	8001c12 <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10f      	bne.n	800195e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d809      	bhi.n	8001958 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f000 f937 	bl	8001bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001950:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <HAL_InitTick+0x74>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e007      	b.n	8001968 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e004      	b.n	8001968 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	e001      	b.n	8001968 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000000c 	.word	0x2000000c
 8001978:	20000004 	.word	0x20000004
 800197c:	20000008 	.word	0x20000008

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	2000000c 	.word	0x2000000c
 80019a4:	2000084c 	.word	0x2000084c

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	@ (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	2000084c 	.word	0x2000084c

080019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff ffee 	bl	80019a8 <HAL_GetTick>
 80019cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d005      	beq.n	80019e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_Delay+0x44>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e6:	bf00      	nop
 80019e8:	f7ff ffde 	bl	80019a8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d8f7      	bhi.n	80019e8 <HAL_Delay+0x28>
  {
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000000c 	.word	0x2000000c

08001a08 <__NVIC_SetPriorityGrouping>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4907      	ldr	r1, [pc, #28]	@ (8001aa4 <__NVIC_EnableIRQ+0x38>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	@ (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	@ (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	@ 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	@ 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff29 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff3e 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff31 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa2 	bl	8001b64 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0ac      	b.n	8001d98 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f8b2 	bl	8001dac <DFSDM_GetChannelFromInstance>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4a55      	ldr	r2, [pc, #340]	@ (8001da0 <HAL_DFSDM_ChannelInit+0x174>)
 8001c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e09f      	b.n	8001d98 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fa6d 	bl	8001138 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001c5e:	4b51      	ldr	r3, [pc, #324]	@ (8001da4 <HAL_DFSDM_ChannelInit+0x178>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	4a4f      	ldr	r2, [pc, #316]	@ (8001da4 <HAL_DFSDM_ChannelInit+0x178>)
 8001c66:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001c68:	4b4e      	ldr	r3, [pc, #312]	@ (8001da4 <HAL_DFSDM_ChannelInit+0x178>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d125      	bne.n	8001cbc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001c70:	4b4d      	ldr	r3, [pc, #308]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a4c      	ldr	r2, [pc, #304]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c7a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001c7c:	4b4a      	ldr	r3, [pc, #296]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4948      	ldr	r1, [pc, #288]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a46      	ldr	r2, [pc, #280]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c90:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001c94:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001c9e:	4b42      	ldr	r3, [pc, #264]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	493f      	ldr	r1, [pc, #252]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8001da8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001cb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001cba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001cca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6819      	ldr	r1, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001cda:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ce0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 020f 	bic.w	r2, r2, #15
 8001cf8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001d20:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6899      	ldr	r1, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d30:	3b01      	subs	r3, #1
 8001d32:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f002 0207 	and.w	r2, r2, #7
 8001d4c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d78:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f810 	bl	8001dac <DFSDM_GetChannelFromInstance>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4904      	ldr	r1, [pc, #16]	@ (8001da0 <HAL_DFSDM_ChannelInit+0x174>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000854 	.word	0x20000854
 8001da4:	20000850 	.word	0x20000850
 8001da8:	40016000 	.word	0x40016000

08001dac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e28 <DFSDM_GetChannelFromInstance+0x7c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d102      	bne.n	8001dc2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e02b      	b.n	8001e1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <DFSDM_GetChannelFromInstance+0x80>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d102      	bne.n	8001dd0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e024      	b.n	8001e1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a17      	ldr	r2, [pc, #92]	@ (8001e30 <DFSDM_GetChannelFromInstance+0x84>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d102      	bne.n	8001dde <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e01d      	b.n	8001e1a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <DFSDM_GetChannelFromInstance+0x88>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d102      	bne.n	8001dec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001de6:	2304      	movs	r3, #4
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	e016      	b.n	8001e1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <DFSDM_GetChannelFromInstance+0x8c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d102      	bne.n	8001dfa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001df4:	2305      	movs	r3, #5
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e00f      	b.n	8001e1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <DFSDM_GetChannelFromInstance+0x90>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d102      	bne.n	8001e08 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001e02:	2306      	movs	r3, #6
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e008      	b.n	8001e1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <DFSDM_GetChannelFromInstance+0x94>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d102      	bne.n	8001e16 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001e10:	2307      	movs	r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e001      	b.n	8001e1a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001e16:	2303      	movs	r3, #3
 8001e18:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40016000 	.word	0x40016000
 8001e2c:	40016020 	.word	0x40016020
 8001e30:	40016040 	.word	0x40016040
 8001e34:	40016080 	.word	0x40016080
 8001e38:	400160a0 	.word	0x400160a0
 8001e3c:	400160c0 	.word	0x400160c0
 8001e40:	400160e0 	.word	0x400160e0

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	e17f      	b.n	8002154 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8171 	beq.w	800214e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d005      	beq.n	8001e84 <HAL_GPIO_Init+0x40>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d130      	bne.n	8001ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eba:	2201      	movs	r2, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f003 0201 	and.w	r2, r3, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d118      	bne.n	8001f24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f003 0201 	and.w	r2, r3, #1
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d017      	beq.n	8001f60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d123      	bne.n	8001fb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	6939      	ldr	r1, [r7, #16]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80ac 	beq.w	800214e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8002174 <HAL_GPIO_Init+0x330>)
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8002174 <HAL_GPIO_Init+0x330>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6613      	str	r3, [r2, #96]	@ 0x60
 8002002:	4b5c      	ldr	r3, [pc, #368]	@ (8002174 <HAL_GPIO_Init+0x330>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800200e:	4a5a      	ldr	r2, [pc, #360]	@ (8002178 <HAL_GPIO_Init+0x334>)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002038:	d025      	beq.n	8002086 <HAL_GPIO_Init+0x242>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4f      	ldr	r2, [pc, #316]	@ (800217c <HAL_GPIO_Init+0x338>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <HAL_GPIO_Init+0x23e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4e      	ldr	r2, [pc, #312]	@ (8002180 <HAL_GPIO_Init+0x33c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x23a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4d      	ldr	r2, [pc, #308]	@ (8002184 <HAL_GPIO_Init+0x340>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x236>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4c      	ldr	r2, [pc, #304]	@ (8002188 <HAL_GPIO_Init+0x344>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x232>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4b      	ldr	r2, [pc, #300]	@ (800218c <HAL_GPIO_Init+0x348>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x22e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4a      	ldr	r2, [pc, #296]	@ (8002190 <HAL_GPIO_Init+0x34c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x22a>
 800206a:	2306      	movs	r3, #6
 800206c:	e00c      	b.n	8002088 <HAL_GPIO_Init+0x244>
 800206e:	2307      	movs	r3, #7
 8002070:	e00a      	b.n	8002088 <HAL_GPIO_Init+0x244>
 8002072:	2305      	movs	r3, #5
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x244>
 8002076:	2304      	movs	r3, #4
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x244>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x244>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x244>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x244>
 8002086:	2300      	movs	r3, #0
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	f002 0203 	and.w	r2, r2, #3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002098:	4937      	ldr	r1, [pc, #220]	@ (8002178 <HAL_GPIO_Init+0x334>)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ca:	4a32      	ldr	r2, [pc, #200]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020d0:	4b30      	ldr	r3, [pc, #192]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020f4:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020fa:	4b26      	ldr	r3, [pc, #152]	@ (8002194 <HAL_GPIO_Init+0x350>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800211e:	4a1d      	ldr	r2, [pc, #116]	@ (8002194 <HAL_GPIO_Init+0x350>)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_GPIO_Init+0x350>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002148:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <HAL_GPIO_Init+0x350>)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f ae78 	bne.w	8001e54 <HAL_GPIO_Init+0x10>
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	40010000 	.word	0x40010000
 800217c:	48000400 	.word	0x48000400
 8002180:	48000800 	.word	0x48000800
 8002184:	48000c00 	.word	0x48000c00
 8002188:	48001000 	.word	0x48001000
 800218c:	48001400 	.word	0x48001400
 8002190:	48001800 	.word	0x48001800
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e001      	b.n	80021ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	041a      	lsls	r2, r3, #16
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43d9      	mvns	r1, r3
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	400b      	ands	r3, r1
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002242:	4a05      	ldr	r2, [pc, #20]	@ (8002258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fe08 	bl	8000e60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e08d      	b.n	800238a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe ffbc 	bl	8001200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	@ 0x24
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e006      	b.n	80022e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80022e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d108      	bne.n	80022fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	e007      	b.n	800230e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800230c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800231c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002320:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002330:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69d9      	ldr	r1, [r3, #28]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1a      	ldr	r2, [r3, #32]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d138      	bne.n	800241a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e032      	b.n	800241c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2224      	movs	r2, #36	@ 0x24
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800241a:	2302      	movs	r3, #2
  }
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b20      	cmp	r3, #32
 800243c:	d139      	bne.n	80024b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002448:	2302      	movs	r3, #2
 800244a:	e033      	b.n	80024b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2224      	movs	r2, #36	@ 0x24
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800247a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e101      	b.n	80026d6 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff f83a 	bl	8001560 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2203      	movs	r2, #3
 80024f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 fe52 	bl	80051a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7c1a      	ldrb	r2, [r3, #16]
 800250c:	f88d 2000 	strb.w	r2, [sp]
 8002510:	3304      	adds	r3, #4
 8002512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002514:	f002 fe1b 	bl	800514e <USB_CoreInit>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0d5      	b.n	80026d6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fe4a 	bl	80051ca <USB_SetCurrentMode>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0c6      	b.n	80026d6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e04a      	b.n	80025e4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3315      	adds	r3, #21
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3314      	adds	r3, #20
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	b298      	uxth	r0, r3
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	332e      	adds	r3, #46	@ 0x2e
 800258a:	4602      	mov	r2, r0
 800258c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	3318      	adds	r3, #24
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	331c      	adds	r3, #28
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3320      	adds	r3, #32
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3324      	adds	r3, #36	@ 0x24
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	3301      	adds	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	791b      	ldrb	r3, [r3, #4]
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3af      	bcc.n	800254e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e044      	b.n	800267e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	3301      	adds	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	791b      	ldrb	r3, [r3, #4]
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	429a      	cmp	r2, r3
 8002686:	d3b5      	bcc.n	80025f4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7c1a      	ldrb	r2, [r3, #16]
 8002690:	f88d 2000 	strb.w	r2, [sp]
 8002694:	3304      	adds	r3, #4
 8002696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002698:	f002 fde4 	bl	8005264 <USB_DevInit>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e013      	b.n	80026d6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7b1b      	ldrb	r3, [r3, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d102      	bne.n	80026ca <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f80a 	bl	80026de <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 ff89 	bl	80055e6 <USB_DevDisconnect>

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002710:	f043 0303 	orr.w	r3, r3, #3
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40007000 	.word	0x40007000

08002748 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800274c:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <HAL_PWREx_GetVoltageRange+0x18>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000

08002764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002772:	d130      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002774:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800277c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002780:	d038      	beq.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002782:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800278a:	4a1e      	ldr	r2, [pc, #120]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002790:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002792:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2232      	movs	r2, #50	@ 0x32
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	4a1b      	ldr	r2, [pc, #108]	@ (800280c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0c9b      	lsrs	r3, r3, #18
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a8:	e002      	b.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027bc:	d102      	bne.n	80027c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f2      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027d0:	d110      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e00f      	b.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e2:	d007      	beq.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027e4:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027ec:	4a05      	ldr	r2, [pc, #20]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40007000 	.word	0x40007000
 8002808:	20000004 	.word	0x20000004
 800280c:	431bde83 	.word	0x431bde83

08002810 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <HAL_PWREx_EnableVddUSB+0x1c>)
 800281a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800281e:	6053      	str	r3, [r2, #4]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40007000 	.word	0x40007000

08002830 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af02      	add	r7, sp, #8
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff f8b6 	bl	80019a8 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e063      	b.n	8002910 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7fe fd2d 	bl	80012bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002862:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f858 	bl	800291c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	3b01      	subs	r3, #1
 800287c:	021a      	lsls	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	2120      	movs	r1, #32
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f850 	bl	8002938 <QSPI_WaitFlagStateUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800289c:	7afb      	ldrb	r3, [r7, #11]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d131      	bne.n	8002906 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80028ac:	f023 0310 	bic.w	r3, r3, #16
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6852      	ldr	r2, [r2, #4]
 80028b4:	0611      	lsls	r1, r2, #24
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4b13      	ldr	r3, [pc, #76]	@ (8002918 <HAL_QSPI_Init+0xe8>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6912      	ldr	r2, [r2, #16]
 80028d2:	0411      	lsls	r1, r2, #16
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6952      	ldr	r2, [r2, #20]
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6992      	ldr	r2, [r2, #24]
 80028de:	4311      	orrs	r1, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800290e:	7afb      	ldrb	r3, [r7, #11]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	ffe0f8fe 	.word	0xffe0f8fe

0800291c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002948:	e01a      	b.n	8002980 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d016      	beq.n	8002980 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7ff f829 	bl	80019a8 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2204      	movs	r2, #4
 800296c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e00e      	b.n	800299e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	bf14      	ite	ne
 800298e:	2301      	movne	r3, #1
 8002990:	2300      	moveq	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d1d6      	bne.n	800294a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e3ca      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ba:	4b97      	ldr	r3, [pc, #604]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c4:	4b94      	ldr	r3, [pc, #592]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80e4 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_RCC_OscConfig+0x4a>
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	f040 808b 	bne.w	8002b00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	f040 8087 	bne.w	8002b00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029f2:	4b89      	ldr	r3, [pc, #548]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e3a2      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	4b82      	ldr	r3, [pc, #520]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <HAL_RCC_OscConfig+0x7c>
 8002a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a22:	e005      	b.n	8002a30 <HAL_RCC_OscConfig+0x88>
 8002a24:	4b7c      	ldr	r3, [pc, #496]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d223      	bcs.n	8002a7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fd55 	bl	80034e8 <RCC_SetFlashLatencyFromMSIRange>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e383      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a48:	4b73      	ldr	r3, [pc, #460]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a72      	ldr	r2, [pc, #456]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b70      	ldr	r3, [pc, #448]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	496d      	ldr	r1, [pc, #436]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a66:	4b6c      	ldr	r3, [pc, #432]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	4968      	ldr	r1, [pc, #416]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
 8002a7a:	e025      	b.n	8002ac8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a7c:	4b66      	ldr	r3, [pc, #408]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a65      	ldr	r2, [pc, #404]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a82:	f043 0308 	orr.w	r3, r3, #8
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b63      	ldr	r3, [pc, #396]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4960      	ldr	r1, [pc, #384]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	495b      	ldr	r1, [pc, #364]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fd15 	bl	80034e8 <RCC_SetFlashLatencyFromMSIRange>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e343      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac8:	f000 fc4a 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b52      	ldr	r3, [pc, #328]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	4950      	ldr	r1, [pc, #320]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8002c20 <HAL_RCC_OscConfig+0x278>)
 8002ae6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8002c24 <HAL_RCC_OscConfig+0x27c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe ff0b 	bl	8001908 <HAL_InitTick>
 8002af2:	4603      	mov	r3, r0
 8002af4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d052      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	e327      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d032      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b08:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a42      	ldr	r2, [pc, #264]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b14:	f7fe ff48 	bl	80019a8 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b1c:	f7fe ff44 	bl	80019a8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e310      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3a:	4b37      	ldr	r3, [pc, #220]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a36      	ldr	r2, [pc, #216]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4931      	ldr	r1, [pc, #196]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b58:	4b2f      	ldr	r3, [pc, #188]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	492c      	ldr	r1, [pc, #176]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
 8002b6c:	e01a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a29      	ldr	r2, [pc, #164]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe ff15 	bl	80019a8 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b82:	f7fe ff11 	bl	80019a8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e2dd      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b94:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x1da>
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ba2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d074      	beq.n	8002c9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d005      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x21a>
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d10e      	bne.n	8002bda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d10b      	bne.n	8002bda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d064      	beq.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d160      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e2ba      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x24a>
 8002be4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0b      	ldr	r2, [pc, #44]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e026      	b.n	8002c40 <HAL_RCC_OscConfig+0x298>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bfa:	d115      	bne.n	8002c28 <HAL_RCC_OscConfig+0x280>
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a05      	ldr	r2, [pc, #20]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002c02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a02      	ldr	r2, [pc, #8]	@ (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e014      	b.n	8002c40 <HAL_RCC_OscConfig+0x298>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	08009d1c 	.word	0x08009d1c
 8002c20:	20000004 	.word	0x20000004
 8002c24:	20000008 	.word	0x20000008
 8002c28:	4ba0      	ldr	r3, [pc, #640]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a9f      	ldr	r2, [pc, #636]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b9d      	ldr	r3, [pc, #628]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a9c      	ldr	r2, [pc, #624]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe feae 	bl	80019a8 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe feaa 	bl	80019a8 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e276      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c62:	4b92      	ldr	r3, [pc, #584]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x2a8>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe fe9a 	bl	80019a8 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fe96 	bl	80019a8 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	@ 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e262      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8a:	4b88      	ldr	r3, [pc, #544]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x2d0>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d060      	beq.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x310>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d119      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d116      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb8:	4b7c      	ldr	r3, [pc, #496]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x328>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e23f      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b76      	ldr	r3, [pc, #472]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	4973      	ldr	r1, [pc, #460]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce4:	e040      	b.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d023      	beq.n	8002d36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cee:	4b6f      	ldr	r3, [pc, #444]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6e      	ldr	r2, [pc, #440]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fe55 	bl	80019a8 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d02:	f7fe fe51 	bl	80019a8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e21d      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d14:	4b65      	ldr	r3, [pc, #404]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b62      	ldr	r3, [pc, #392]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	495f      	ldr	r1, [pc, #380]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
 8002d34:	e018      	b.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d36:	4b5d      	ldr	r3, [pc, #372]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fe fe31 	bl	80019a8 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fe2d 	bl	80019a8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1f9      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d5c:	4b53      	ldr	r3, [pc, #332]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03c      	beq.n	8002dee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01c      	beq.n	8002db6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d82:	4a4a      	ldr	r2, [pc, #296]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fe0c 	bl	80019a8 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe fe08 	bl	80019a8 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1d4      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da6:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ef      	beq.n	8002d94 <HAL_RCC_OscConfig+0x3ec>
 8002db4:	e01b      	b.n	8002dee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db6:	4b3d      	ldr	r3, [pc, #244]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fdef 	bl	80019a8 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dce:	f7fe fdeb 	bl	80019a8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e1b7      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de0:	4b32      	ldr	r3, [pc, #200]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ef      	bne.n	8002dce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a6 	beq.w	8002f48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e00:	4b2a      	ldr	r3, [pc, #168]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10d      	bne.n	8002e28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0c:	4b27      	ldr	r3, [pc, #156]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	4a26      	ldr	r2, [pc, #152]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e18:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e24:	2301      	movs	r3, #1
 8002e26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e28:	4b21      	ldr	r3, [pc, #132]	@ (8002eb0 <HAL_RCC_OscConfig+0x508>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d118      	bne.n	8002e66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e34:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb0 <HAL_RCC_OscConfig+0x508>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb0 <HAL_RCC_OscConfig+0x508>)
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e40:	f7fe fdb2 	bl	80019a8 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7fe fdae 	bl	80019a8 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e17a      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_RCC_OscConfig+0x508>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d108      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4d8>
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	4a0d      	ldr	r2, [pc, #52]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e7e:	e029      	b.n	8002ed4 <HAL_RCC_OscConfig+0x52c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	d115      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x50c>
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8e:	4a07      	ldr	r2, [pc, #28]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e98:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9e:	4a03      	ldr	r2, [pc, #12]	@ (8002eac <HAL_RCC_OscConfig+0x504>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea8:	e014      	b.n	8002ed4 <HAL_RCC_OscConfig+0x52c>
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eba:	4a9b      	ldr	r2, [pc, #620]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ec4:	4b98      	ldr	r3, [pc, #608]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eca:	4a97      	ldr	r2, [pc, #604]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d016      	beq.n	8002f0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fd64 	bl	80019a8 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fd60 	bl	80019a8 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e12a      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efa:	4b8b      	ldr	r3, [pc, #556]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ed      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x53c>
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fe fd4d 	bl	80019a8 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe fd49 	bl	80019a8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e113      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f28:	4b7f      	ldr	r3, [pc, #508]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ed      	bne.n	8002f12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3c:	4b7a      	ldr	r3, [pc, #488]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	4a79      	ldr	r2, [pc, #484]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80fe 	beq.w	800314e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	f040 80d0 	bne.w	80030fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f5c:	4b72      	ldr	r3, [pc, #456]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d130      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d127      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d11f      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f9c:	2a07      	cmp	r2, #7
 8002f9e:	bf14      	ite	ne
 8002fa0:	2201      	movne	r2, #1
 8002fa2:	2200      	moveq	r2, #0
 8002fa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d113      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d06e      	beq.n	80030b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d069      	beq.n	80030ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fe4:	4b50      	ldr	r3, [pc, #320]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0ad      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8002ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003000:	f7fe fcd2 	bl	80019a8 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe fcce 	bl	80019a8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e09a      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301a:	4b43      	ldr	r3, [pc, #268]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003026:	4b40      	ldr	r3, [pc, #256]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	4b40      	ldr	r3, [pc, #256]	@ (800312c <HAL_RCC_OscConfig+0x784>)
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003036:	3a01      	subs	r2, #1
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003040:	0212      	lsls	r2, r2, #8
 8003042:	4311      	orrs	r1, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003048:	0852      	lsrs	r2, r2, #1
 800304a:	3a01      	subs	r2, #1
 800304c:	0552      	lsls	r2, r2, #21
 800304e:	4311      	orrs	r1, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003054:	0852      	lsrs	r2, r2, #1
 8003056:	3a01      	subs	r2, #1
 8003058:	0652      	lsls	r2, r2, #25
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003060:	0912      	lsrs	r2, r2, #4
 8003062:	0452      	lsls	r2, r2, #17
 8003064:	430a      	orrs	r2, r1
 8003066:	4930      	ldr	r1, [pc, #192]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8003068:	4313      	orrs	r3, r2
 800306a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800306c:	4b2e      	ldr	r3, [pc, #184]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2d      	ldr	r2, [pc, #180]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8003072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003076:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003078:	4b2b      	ldr	r3, [pc, #172]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a2a      	ldr	r2, [pc, #168]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 800307e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003082:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003084:	f7fe fc90 	bl	80019a8 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fc8c 	bl	80019a8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e058      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309e:	4b22      	ldr	r3, [pc, #136]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030aa:	e050      	b.n	800314e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e04f      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d148      	bne.n	800314e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a19      	ldr	r2, [pc, #100]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 80030c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c8:	4b17      	ldr	r3, [pc, #92]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a16      	ldr	r2, [pc, #88]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 80030ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030d4:	f7fe fc68 	bl	80019a8 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe fc64 	bl	80019a8 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e030      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x734>
 80030fa:	e028      	b.n	800314e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d023      	beq.n	800314a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a08      	ldr	r2, [pc, #32]	@ (8003128 <HAL_RCC_OscConfig+0x780>)
 8003108:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800310c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe fc4b 	bl	80019a8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003114:	e00c      	b.n	8003130 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe fc47 	bl	80019a8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d905      	bls.n	8003130 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e013      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
 8003128:	40021000 	.word	0x40021000
 800312c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCC_OscConfig+0x7b0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ec      	bne.n	8003116 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_RCC_OscConfig+0x7b0>)
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4905      	ldr	r1, [pc, #20]	@ (8003158 <HAL_RCC_OscConfig+0x7b0>)
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_OscConfig+0x7b4>)
 8003144:	4013      	ands	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
 8003148:	e001      	b.n	800314e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	feeefffc 	.word	0xfeeefffc

08003160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0e7      	b.n	8003344 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b75      	ldr	r3, [pc, #468]	@ (800334c <HAL_RCC_ClockConfig+0x1ec>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d910      	bls.n	80031a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b72      	ldr	r3, [pc, #456]	@ (800334c <HAL_RCC_ClockConfig+0x1ec>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 0207 	bic.w	r2, r3, #7
 800318a:	4970      	ldr	r1, [pc, #448]	@ (800334c <HAL_RCC_ClockConfig+0x1ec>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b6e      	ldr	r3, [pc, #440]	@ (800334c <HAL_RCC_ClockConfig+0x1ec>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0cf      	b.n	8003344 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d010      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	4b66      	ldr	r3, [pc, #408]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031bc:	429a      	cmp	r2, r3
 80031be:	d908      	bls.n	80031d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c0:	4b63      	ldr	r3, [pc, #396]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4960      	ldr	r1, [pc, #384]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d04c      	beq.n	8003278 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d121      	bne.n	8003236 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0a6      	b.n	8003344 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fe:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d115      	bne.n	8003236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e09a      	b.n	8003344 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003216:	4b4e      	ldr	r3, [pc, #312]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e08e      	b.n	8003344 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003226:	4b4a      	ldr	r3, [pc, #296]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e086      	b.n	8003344 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4b46      	ldr	r3, [pc, #280]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4943      	ldr	r1, [pc, #268]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003248:	f7fe fbae 	bl	80019a8 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fe fbaa 	bl	80019a8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e06e      	b.n	8003344 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	4b3a      	ldr	r3, [pc, #232]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 020c 	and.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d1eb      	bne.n	8003250 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d010      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	4b31      	ldr	r3, [pc, #196]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003290:	429a      	cmp	r2, r3
 8003292:	d208      	bcs.n	80032a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003294:	4b2e      	ldr	r3, [pc, #184]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	492b      	ldr	r1, [pc, #172]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a6:	4b29      	ldr	r3, [pc, #164]	@ (800334c <HAL_RCC_ClockConfig+0x1ec>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d210      	bcs.n	80032d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <HAL_RCC_ClockConfig+0x1ec>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 0207 	bic.w	r2, r3, #7
 80032bc:	4923      	ldr	r1, [pc, #140]	@ (800334c <HAL_RCC_ClockConfig+0x1ec>)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c4:	4b21      	ldr	r3, [pc, #132]	@ (800334c <HAL_RCC_ClockConfig+0x1ec>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e036      	b.n	8003344 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	4918      	ldr	r1, [pc, #96]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003300:	4b13      	ldr	r3, [pc, #76]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4910      	ldr	r1, [pc, #64]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003314:	f000 f824 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	490b      	ldr	r1, [pc, #44]	@ (8003354 <HAL_RCC_ClockConfig+0x1f4>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <HAL_RCC_ClockConfig+0x1f8>)
 8003332:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003334:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1fc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe fae5 	bl	8001908 <HAL_InitTick>
 800333e:	4603      	mov	r3, r0
 8003340:	72fb      	strb	r3, [r7, #11]

  return status;
 8003342:	7afb      	ldrb	r3, [r7, #11]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40022000 	.word	0x40022000
 8003350:	40021000 	.word	0x40021000
 8003354:	08009d1c 	.word	0x08009d1c
 8003358:	20000004 	.word	0x20000004
 800335c:	20000008 	.word	0x20000008

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	@ 0x24
 8003364:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336e:	4b3e      	ldr	r3, [pc, #248]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x108>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003378:	4b3b      	ldr	r3, [pc, #236]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x108>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d121      	bne.n	80033d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d11e      	bne.n	80033d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003394:	4b34      	ldr	r3, [pc, #208]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x108>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033a0:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e005      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033bc:	4a2b      	ldr	r2, [pc, #172]	@ (800346c <HAL_RCC_GetSysClockFreq+0x10c>)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d102      	bne.n	80033de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d8:	4b25      	ldr	r3, [pc, #148]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x110>)
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	e004      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e4:	4b23      	ldr	r3, [pc, #140]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x114>)
 80033e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d134      	bne.n	8003458 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0xa6>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d003      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0xac>
 8003404:	e005      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003406:	4b1a      	ldr	r3, [pc, #104]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x110>)
 8003408:	617b      	str	r3, [r7, #20]
      break;
 800340a:	e005      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800340c:	4b19      	ldr	r3, [pc, #100]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x114>)
 800340e:	617b      	str	r3, [r7, #20]
      break;
 8003410:	e002      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	617b      	str	r3, [r7, #20]
      break;
 8003416:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003418:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x108>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	3301      	adds	r3, #1
 8003424:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003426:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x108>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	fb03 f202 	mul.w	r2, r3, r2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800343e:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x108>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	0e5b      	lsrs	r3, r3, #25
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	3301      	adds	r3, #1
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003458:	69bb      	ldr	r3, [r7, #24]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3724      	adds	r7, #36	@ 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	08009d34 	.word	0x08009d34
 8003470:	00f42400 	.word	0x00f42400
 8003474:	007a1200 	.word	0x007a1200

08003478 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800347c:	4b03      	ldr	r3, [pc, #12]	@ (800348c <HAL_RCC_GetHCLKFreq+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000004 	.word	0x20000004

08003490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003494:	f7ff fff0 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4904      	ldr	r1, [pc, #16]	@ (80034b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08009d2c 	.word	0x08009d2c

080034bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034c0:	f7ff ffda 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0adb      	lsrs	r3, r3, #11
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4904      	ldr	r1, [pc, #16]	@ (80034e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08009d2c 	.word	0x08009d2c

080034e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034f4:	4b2a      	ldr	r3, [pc, #168]	@ (80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003500:	f7ff f922 	bl	8002748 <HAL_PWREx_GetVoltageRange>
 8003504:	6178      	str	r0, [r7, #20]
 8003506:	e014      	b.n	8003532 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	4a24      	ldr	r2, [pc, #144]	@ (80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003512:	6593      	str	r3, [r2, #88]	@ 0x58
 8003514:	4b22      	ldr	r3, [pc, #136]	@ (80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003520:	f7ff f912 	bl	8002748 <HAL_PWREx_GetVoltageRange>
 8003524:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352a:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003530:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003538:	d10b      	bne.n	8003552 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b80      	cmp	r3, #128	@ 0x80
 800353e:	d919      	bls.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2ba0      	cmp	r3, #160	@ 0xa0
 8003544:	d902      	bls.n	800354c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003546:	2302      	movs	r3, #2
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	e013      	b.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800354c:	2301      	movs	r3, #1
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	e010      	b.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b80      	cmp	r3, #128	@ 0x80
 8003556:	d902      	bls.n	800355e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003558:	2303      	movs	r3, #3
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	e00a      	b.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b80      	cmp	r3, #128	@ 0x80
 8003562:	d102      	bne.n	800356a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003564:	2302      	movs	r3, #2
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	e004      	b.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b70      	cmp	r3, #112	@ 0x70
 800356e:	d101      	bne.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003570:	2301      	movs	r3, #1
 8003572:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003574:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 0207 	bic.w	r2, r3, #7
 800357c:	4909      	ldr	r1, [pc, #36]	@ (80035a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003584:	4b07      	ldr	r3, [pc, #28]	@ (80035a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	429a      	cmp	r2, r3
 8003590:	d001      	beq.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40022000 	.word	0x40022000

080035a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035b0:	2300      	movs	r3, #0
 80035b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035b4:	2300      	movs	r3, #0
 80035b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d041      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035cc:	d02a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035d2:	d824      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035d8:	d008      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035de:	d81e      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e8:	d010      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035ea:	e018      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035ec:	4b86      	ldr	r3, [pc, #536]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a85      	ldr	r2, [pc, #532]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035f8:	e015      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 facb 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800360a:	e00c      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3320      	adds	r3, #32
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fbb6 	bl	8003d84 <RCCEx_PLLSAI2_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	74fb      	strb	r3, [r7, #19]
      break;
 8003622:	e000      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800362c:	4b76      	ldr	r3, [pc, #472]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003632:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800363a:	4973      	ldr	r1, [pc, #460]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003642:	e001      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d041      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003658:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800365c:	d02a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800365e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003662:	d824      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003664:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003668:	d008      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800366a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800366e:	d81e      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003678:	d010      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800367a:	e018      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800367c:	4b62      	ldr	r3, [pc, #392]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a61      	ldr	r2, [pc, #388]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003686:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003688:	e015      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fa83 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800369a:	e00c      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3320      	adds	r3, #32
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fb6e 	bl	8003d84 <RCCEx_PLLSAI2_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036ac:	e003      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	74fb      	strb	r3, [r7, #19]
      break;
 80036b2:	e000      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036bc:	4b52      	ldr	r3, [pc, #328]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ca:	494f      	ldr	r1, [pc, #316]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036d2:	e001      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80a0 	beq.w	8003826 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036ea:	4b47      	ldr	r3, [pc, #284]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	4b41      	ldr	r3, [pc, #260]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003704:	4a40      	ldr	r2, [pc, #256]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370a:	6593      	str	r3, [r2, #88]	@ 0x58
 800370c:	4b3e      	ldr	r3, [pc, #248]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003718:	2301      	movs	r3, #1
 800371a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800371c:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a3a      	ldr	r2, [pc, #232]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003728:	f7fe f93e 	bl	80019a8 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800372e:	e009      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003730:	f7fe f93a 	bl	80019a8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d902      	bls.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	74fb      	strb	r3, [r7, #19]
        break;
 8003742:	e005      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003744:	4b31      	ldr	r3, [pc, #196]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ef      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d15c      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003756:	4b2c      	ldr	r3, [pc, #176]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003760:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01f      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	429a      	cmp	r2, r3
 8003772:	d019      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003774:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003780:	4b21      	ldr	r3, [pc, #132]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003786:	4a20      	ldr	r2, [pc, #128]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037a0:	4a19      	ldr	r2, [pc, #100]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d016      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fe f8f9 	bl	80019a8 <HAL_GetTick>
 80037b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b8:	e00b      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fe f8f5 	bl	80019a8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d902      	bls.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	74fb      	strb	r3, [r7, #19]
            break;
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ec      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10c      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e6:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f6:	4904      	ldr	r1, [pc, #16]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037fe:	e009      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	74bb      	strb	r3, [r7, #18]
 8003804:	e006      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003814:	7c7b      	ldrb	r3, [r7, #17]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381a:	4b9e      	ldr	r3, [pc, #632]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	4a9d      	ldr	r2, [pc, #628]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003824:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003832:	4b98      	ldr	r3, [pc, #608]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003838:	f023 0203 	bic.w	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	4994      	ldr	r1, [pc, #592]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003854:	4b8f      	ldr	r3, [pc, #572]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	f023 020c 	bic.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003862:	498c      	ldr	r1, [pc, #560]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003876:	4b87      	ldr	r3, [pc, #540]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	4983      	ldr	r1, [pc, #524]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003898:	4b7e      	ldr	r3, [pc, #504]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	497b      	ldr	r1, [pc, #492]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038ba:	4b76      	ldr	r3, [pc, #472]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c8:	4972      	ldr	r1, [pc, #456]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ea:	496a      	ldr	r1, [pc, #424]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038fe:	4b65      	ldr	r3, [pc, #404]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390c:	4961      	ldr	r1, [pc, #388]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003920:	4b5c      	ldr	r3, [pc, #368]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392e:	4959      	ldr	r1, [pc, #356]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003942:	4b54      	ldr	r3, [pc, #336]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003950:	4950      	ldr	r1, [pc, #320]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003964:	4b4b      	ldr	r3, [pc, #300]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003972:	4948      	ldr	r1, [pc, #288]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003986:	4b43      	ldr	r3, [pc, #268]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003994:	493f      	ldr	r1, [pc, #252]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d028      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b6:	4937      	ldr	r1, [pc, #220]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039c6:	d106      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c8:	4b32      	ldr	r3, [pc, #200]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4a31      	ldr	r2, [pc, #196]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039d2:	60d3      	str	r3, [r2, #12]
 80039d4:	e011      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039de:	d10c      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f8d8 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d028      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a06:	4b23      	ldr	r3, [pc, #140]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	491f      	ldr	r1, [pc, #124]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a26:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a30:	60d3      	str	r3, [r2, #12]
 8003a32:	e011      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f8a9 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d02b      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a72:	4908      	ldr	r1, [pc, #32]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a82:	d109      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a84:	4b03      	ldr	r3, [pc, #12]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a02      	ldr	r2, [pc, #8]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a8e:	60d3      	str	r3, [r2, #12]
 8003a90:	e014      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f877 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab2:	7cfb      	ldrb	r3, [r7, #19]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d02f      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ad6:	4928      	ldr	r1, [pc, #160]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ae6:	d10d      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	2102      	movs	r1, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f854 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d014      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003afe:	7cfb      	ldrb	r3, [r7, #19]
 8003b00:	74bb      	strb	r3, [r7, #18]
 8003b02:	e011      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3320      	adds	r3, #32
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f935 	bl	8003d84 <RCCEx_PLLSAI2_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b34:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b42:	490d      	ldr	r1, [pc, #52]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b56:	4b08      	ldr	r3, [pc, #32]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b66:	4904      	ldr	r1, [pc, #16]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a04      	ldr	r2, [pc, #16]	@ (8003b98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b86:	f043 0304 	orr.w	r3, r3, #4
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000

08003b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003baa:	4b75      	ldr	r3, [pc, #468]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d018      	beq.n	8003be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bb6:	4b72      	ldr	r3, [pc, #456]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0203 	and.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d10d      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bce:	4b6c      	ldr	r3, [pc, #432]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d047      	beq.n	8003c72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	e044      	b.n	8003c72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d018      	beq.n	8003c22 <RCCEx_PLLSAI1_Config+0x86>
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d825      	bhi.n	8003c40 <RCCEx_PLLSAI1_Config+0xa4>
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d002      	beq.n	8003bfe <RCCEx_PLLSAI1_Config+0x62>
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d009      	beq.n	8003c10 <RCCEx_PLLSAI1_Config+0x74>
 8003bfc:	e020      	b.n	8003c40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bfe:	4b60      	ldr	r3, [pc, #384]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11d      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0e:	e01a      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c10:	4b5b      	ldr	r3, [pc, #364]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d116      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c20:	e013      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c22:	4b57      	ldr	r3, [pc, #348]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c2e:	4b54      	ldr	r3, [pc, #336]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c3e:	e006      	b.n	8003c4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      break;
 8003c44:	e004      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c56:	4b4a      	ldr	r3, [pc, #296]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	4944      	ldr	r1, [pc, #272]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d17d      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c78:	4b41      	ldr	r3, [pc, #260]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a40      	ldr	r2, [pc, #256]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c84:	f7fd fe90 	bl	80019a8 <HAL_GetTick>
 8003c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c8a:	e009      	b.n	8003ca0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c8c:	f7fd fe8c 	bl	80019a8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d902      	bls.n	8003ca0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c9e:	e005      	b.n	8003cac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ca0:	4b37      	ldr	r3, [pc, #220]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1ef      	bne.n	8003c8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d160      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d111      	bne.n	8003cdc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb8:	4b31      	ldr	r3, [pc, #196]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6892      	ldr	r2, [r2, #8]
 8003cc8:	0211      	lsls	r1, r2, #8
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68d2      	ldr	r2, [r2, #12]
 8003cce:	0912      	lsrs	r2, r2, #4
 8003cd0:	0452      	lsls	r2, r2, #17
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	492a      	ldr	r1, [pc, #168]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	610b      	str	r3, [r1, #16]
 8003cda:	e027      	b.n	8003d2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d112      	bne.n	8003d08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce2:	4b27      	ldr	r3, [pc, #156]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003cea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6892      	ldr	r2, [r2, #8]
 8003cf2:	0211      	lsls	r1, r2, #8
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6912      	ldr	r2, [r2, #16]
 8003cf8:	0852      	lsrs	r2, r2, #1
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	0552      	lsls	r2, r2, #21
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	491f      	ldr	r1, [pc, #124]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	610b      	str	r3, [r1, #16]
 8003d06:	e011      	b.n	8003d2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d08:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6892      	ldr	r2, [r2, #8]
 8003d18:	0211      	lsls	r1, r2, #8
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6952      	ldr	r2, [r2, #20]
 8003d1e:	0852      	lsrs	r2, r2, #1
 8003d20:	3a01      	subs	r2, #1
 8003d22:	0652      	lsls	r2, r2, #25
 8003d24:	430a      	orrs	r2, r1
 8003d26:	4916      	ldr	r1, [pc, #88]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d2c:	4b14      	ldr	r3, [pc, #80]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fd fe36 	bl	80019a8 <HAL_GetTick>
 8003d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d3e:	e009      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d40:	f7fd fe32 	bl	80019a8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d902      	bls.n	8003d54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	73fb      	strb	r3, [r7, #15]
          break;
 8003d52:	e005      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d54:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ef      	beq.n	8003d40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	4904      	ldr	r1, [pc, #16]	@ (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000

08003d84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d92:	4b6a      	ldr	r3, [pc, #424]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d018      	beq.n	8003dd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d9e:	4b67      	ldr	r3, [pc, #412]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0203 	and.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d10d      	bne.n	8003dca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
       ||
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003db6:	4b61      	ldr	r3, [pc, #388]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d047      	beq.n	8003e5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	e044      	b.n	8003e5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d018      	beq.n	8003e0a <RCCEx_PLLSAI2_Config+0x86>
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d825      	bhi.n	8003e28 <RCCEx_PLLSAI2_Config+0xa4>
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d002      	beq.n	8003de6 <RCCEx_PLLSAI2_Config+0x62>
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d009      	beq.n	8003df8 <RCCEx_PLLSAI2_Config+0x74>
 8003de4:	e020      	b.n	8003e28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003de6:	4b55      	ldr	r3, [pc, #340]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d11d      	bne.n	8003e2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df6:	e01a      	b.n	8003e2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df8:	4b50      	ldr	r3, [pc, #320]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d116      	bne.n	8003e32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e08:	e013      	b.n	8003e32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e16:	4b49      	ldr	r3, [pc, #292]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e26:	e006      	b.n	8003e36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2c:	e004      	b.n	8003e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	430b      	orrs	r3, r1
 8003e54:	4939      	ldr	r1, [pc, #228]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d167      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e60:	4b36      	ldr	r3, [pc, #216]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a35      	ldr	r2, [pc, #212]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6c:	f7fd fd9c 	bl	80019a8 <HAL_GetTick>
 8003e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e72:	e009      	b.n	8003e88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e74:	f7fd fd98 	bl	80019a8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	73fb      	strb	r3, [r7, #15]
        break;
 8003e86:	e005      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e88:	4b2c      	ldr	r3, [pc, #176]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ef      	bne.n	8003e74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d14a      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d111      	bne.n	8003ec4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ea0:	4b26      	ldr	r3, [pc, #152]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6892      	ldr	r2, [r2, #8]
 8003eb0:	0211      	lsls	r1, r2, #8
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68d2      	ldr	r2, [r2, #12]
 8003eb6:	0912      	lsrs	r2, r2, #4
 8003eb8:	0452      	lsls	r2, r2, #17
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	491f      	ldr	r1, [pc, #124]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	614b      	str	r3, [r1, #20]
 8003ec2:	e011      	b.n	8003ee8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ecc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6892      	ldr	r2, [r2, #8]
 8003ed4:	0211      	lsls	r1, r2, #8
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6912      	ldr	r2, [r2, #16]
 8003eda:	0852      	lsrs	r2, r2, #1
 8003edc:	3a01      	subs	r2, #1
 8003ede:	0652      	lsls	r2, r2, #25
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	4916      	ldr	r1, [pc, #88]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ee8:	4b14      	ldr	r3, [pc, #80]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a13      	ldr	r2, [pc, #76]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fd fd58 	bl	80019a8 <HAL_GetTick>
 8003ef8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003efa:	e009      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003efc:	f7fd fd54 	bl	80019a8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d902      	bls.n	8003f10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f0e:	e005      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f10:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ef      	beq.n	8003efc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4904      	ldr	r1, [pc, #16]	@ (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000

08003f40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e095      	b.n	800407e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d108      	bne.n	8003f6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f62:	d009      	beq.n	8003f78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	61da      	str	r2, [r3, #28]
 8003f6a:	e005      	b.n	8003f78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fd f9d6 	bl	8001344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fb8:	d902      	bls.n	8003fc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e002      	b.n	8003fc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003fce:	d007      	beq.n	8003fe0 <HAL_SPI_Init+0xa0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004022:	ea42 0103 	orr.w	r1, r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	0c1b      	lsrs	r3, r3, #16
 800403c:	f003 0204 	and.w	r2, r3, #4
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800405c:	ea42 0103 	orr.w	r1, r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e049      	b.n	800412c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7fd f98d 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 f9d5 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d001      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e04f      	b.n	80041ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a23      	ldr	r2, [pc, #140]	@ (80041f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01d      	beq.n	80041aa <HAL_TIM_Base_Start_IT+0x76>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004176:	d018      	beq.n	80041aa <HAL_TIM_Base_Start_IT+0x76>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1f      	ldr	r2, [pc, #124]	@ (80041fc <HAL_TIM_Base_Start_IT+0xc8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <HAL_TIM_Base_Start_IT+0x76>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1e      	ldr	r2, [pc, #120]	@ (8004200 <HAL_TIM_Base_Start_IT+0xcc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_TIM_Base_Start_IT+0x76>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1c      	ldr	r2, [pc, #112]	@ (8004204 <HAL_TIM_Base_Start_IT+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d009      	beq.n	80041aa <HAL_TIM_Base_Start_IT+0x76>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1b      	ldr	r2, [pc, #108]	@ (8004208 <HAL_TIM_Base_Start_IT+0xd4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_TIM_Base_Start_IT+0x76>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a19      	ldr	r2, [pc, #100]	@ (800420c <HAL_TIM_Base_Start_IT+0xd8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d115      	bne.n	80041d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	4b17      	ldr	r3, [pc, #92]	@ (8004210 <HAL_TIM_Base_Start_IT+0xdc>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b06      	cmp	r3, #6
 80041ba:	d015      	beq.n	80041e8 <HAL_TIM_Base_Start_IT+0xb4>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c2:	d011      	beq.n	80041e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d4:	e008      	b.n	80041e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0201 	orr.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e000      	b.n	80041ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40013400 	.word	0x40013400
 800420c:	40014000 	.word	0x40014000
 8004210:	00010007 	.word	0x00010007

08004214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d020      	beq.n	8004278 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0202 	mvn.w	r2, #2
 8004248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8e9 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f8db 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8ec 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d020      	beq.n	80042c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0204 	mvn.w	r2, #4
 8004294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8c3 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8b5 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8c6 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d020      	beq.n	8004310 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0208 	mvn.w	r2, #8
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2204      	movs	r2, #4
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f89d 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f88f 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f8a0 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b00      	cmp	r3, #0
 8004318:	d020      	beq.n	800435c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01b      	beq.n	800435c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0210 	mvn.w	r2, #16
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2208      	movs	r2, #8
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f877 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f869 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f87a 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00c      	beq.n	8004380 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0201 	mvn.w	r2, #1
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fdbc 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f99b 	bl	80046e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00c      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f993 	bl	80046f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00c      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f834 	bl	800445e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00c      	beq.n	800441a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f06f 0220 	mvn.w	r2, #32
 8004412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f95b 	bl	80046d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a46      	ldr	r2, [pc, #280]	@ (80045a0 <TIM_Base_SetConfig+0x12c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004492:	d00f      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a43      	ldr	r2, [pc, #268]	@ (80045a4 <TIM_Base_SetConfig+0x130>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00b      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a42      	ldr	r2, [pc, #264]	@ (80045a8 <TIM_Base_SetConfig+0x134>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a41      	ldr	r2, [pc, #260]	@ (80045ac <TIM_Base_SetConfig+0x138>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a40      	ldr	r2, [pc, #256]	@ (80045b0 <TIM_Base_SetConfig+0x13c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d108      	bne.n	80044c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a35      	ldr	r2, [pc, #212]	@ (80045a0 <TIM_Base_SetConfig+0x12c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01f      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d4:	d01b      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a32      	ldr	r2, [pc, #200]	@ (80045a4 <TIM_Base_SetConfig+0x130>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d017      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a31      	ldr	r2, [pc, #196]	@ (80045a8 <TIM_Base_SetConfig+0x134>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a30      	ldr	r2, [pc, #192]	@ (80045ac <TIM_Base_SetConfig+0x138>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00f      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2f      	ldr	r2, [pc, #188]	@ (80045b0 <TIM_Base_SetConfig+0x13c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00b      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a2e      	ldr	r2, [pc, #184]	@ (80045b4 <TIM_Base_SetConfig+0x140>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a2d      	ldr	r2, [pc, #180]	@ (80045b8 <TIM_Base_SetConfig+0x144>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d003      	beq.n	800450e <TIM_Base_SetConfig+0x9a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2c      	ldr	r2, [pc, #176]	@ (80045bc <TIM_Base_SetConfig+0x148>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d108      	bne.n	8004520 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a16      	ldr	r2, [pc, #88]	@ (80045a0 <TIM_Base_SetConfig+0x12c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00f      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <TIM_Base_SetConfig+0x13c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a17      	ldr	r2, [pc, #92]	@ (80045b4 <TIM_Base_SetConfig+0x140>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a16      	ldr	r2, [pc, #88]	@ (80045b8 <TIM_Base_SetConfig+0x144>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a15      	ldr	r2, [pc, #84]	@ (80045bc <TIM_Base_SetConfig+0x148>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d103      	bne.n	8004574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d105      	bne.n	8004592 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	611a      	str	r2, [r3, #16]
  }
}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40013400 	.word	0x40013400
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40014400 	.word	0x40014400
 80045bc:	40014800 	.word	0x40014800

080045c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e068      	b.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2e      	ldr	r2, [pc, #184]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2d      	ldr	r2, [pc, #180]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d108      	bne.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004612:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004624:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1e      	ldr	r2, [pc, #120]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01d      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464a:	d018      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1b      	ldr	r2, [pc, #108]	@ (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1a      	ldr	r2, [pc, #104]	@ (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00e      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a18      	ldr	r2, [pc, #96]	@ (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d009      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a13      	ldr	r2, [pc, #76]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a14      	ldr	r2, [pc, #80]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d10c      	bne.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4313      	orrs	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40000c00 	.word	0x40000c00
 80046cc:	40014000 	.word	0x40014000

080046d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e040      	b.n	80047a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fe72 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2224      	movs	r2, #36	@ 0x24
 8004738:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fae0 	bl	8004d18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f825 	bl	80047a8 <UART_SetConfig>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e01b      	b.n	80047a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fb5f 	bl	8004e5c <UART_CheckIdleState>
 800479e:	4603      	mov	r3, r0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b08a      	sub	sp, #40	@ 0x28
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4ba4      	ldr	r3, [pc, #656]	@ (8004a68 <UART_SetConfig+0x2c0>)
 80047d8:	4013      	ands	r3, r2
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a99      	ldr	r2, [pc, #612]	@ (8004a6c <UART_SetConfig+0x2c4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004810:	4313      	orrs	r3, r2
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a90      	ldr	r2, [pc, #576]	@ (8004a70 <UART_SetConfig+0x2c8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d126      	bne.n	8004880 <UART_SetConfig+0xd8>
 8004832:	4b90      	ldr	r3, [pc, #576]	@ (8004a74 <UART_SetConfig+0x2cc>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b03      	cmp	r3, #3
 800483e:	d81b      	bhi.n	8004878 <UART_SetConfig+0xd0>
 8004840:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <UART_SetConfig+0xa0>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004859 	.word	0x08004859
 800484c:	08004869 	.word	0x08004869
 8004850:	08004861 	.word	0x08004861
 8004854:	08004871 	.word	0x08004871
 8004858:	2301      	movs	r3, #1
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e116      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004860:	2302      	movs	r3, #2
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e112      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004868:	2304      	movs	r3, #4
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e10e      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004870:	2308      	movs	r3, #8
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004876:	e10a      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004878:	2310      	movs	r3, #16
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487e:	e106      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a7c      	ldr	r2, [pc, #496]	@ (8004a78 <UART_SetConfig+0x2d0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d138      	bne.n	80048fc <UART_SetConfig+0x154>
 800488a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a74 <UART_SetConfig+0x2cc>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d82d      	bhi.n	80048f4 <UART_SetConfig+0x14c>
 8004898:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <UART_SetConfig+0xf8>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048f5 	.word	0x080048f5
 80048a8:	080048f5 	.word	0x080048f5
 80048ac:	080048f5 	.word	0x080048f5
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	080048f5 	.word	0x080048f5
 80048b8:	080048f5 	.word	0x080048f5
 80048bc:	080048f5 	.word	0x080048f5
 80048c0:	080048dd 	.word	0x080048dd
 80048c4:	080048f5 	.word	0x080048f5
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048ed 	.word	0x080048ed
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048da:	e0d8      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048dc:	2302      	movs	r3, #2
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e0d4      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048e4:	2304      	movs	r3, #4
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e0d0      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048ec:	2308      	movs	r3, #8
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f2:	e0cc      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048f4:	2310      	movs	r3, #16
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fa:	e0c8      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a5e      	ldr	r2, [pc, #376]	@ (8004a7c <UART_SetConfig+0x2d4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d125      	bne.n	8004952 <UART_SetConfig+0x1aa>
 8004906:	4b5b      	ldr	r3, [pc, #364]	@ (8004a74 <UART_SetConfig+0x2cc>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004910:	2b30      	cmp	r3, #48	@ 0x30
 8004912:	d016      	beq.n	8004942 <UART_SetConfig+0x19a>
 8004914:	2b30      	cmp	r3, #48	@ 0x30
 8004916:	d818      	bhi.n	800494a <UART_SetConfig+0x1a2>
 8004918:	2b20      	cmp	r3, #32
 800491a:	d00a      	beq.n	8004932 <UART_SetConfig+0x18a>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d814      	bhi.n	800494a <UART_SetConfig+0x1a2>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <UART_SetConfig+0x182>
 8004924:	2b10      	cmp	r3, #16
 8004926:	d008      	beq.n	800493a <UART_SetConfig+0x192>
 8004928:	e00f      	b.n	800494a <UART_SetConfig+0x1a2>
 800492a:	2300      	movs	r3, #0
 800492c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004930:	e0ad      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004932:	2302      	movs	r3, #2
 8004934:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004938:	e0a9      	b.n	8004a8e <UART_SetConfig+0x2e6>
 800493a:	2304      	movs	r3, #4
 800493c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004940:	e0a5      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004942:	2308      	movs	r3, #8
 8004944:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004948:	e0a1      	b.n	8004a8e <UART_SetConfig+0x2e6>
 800494a:	2310      	movs	r3, #16
 800494c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004950:	e09d      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a4a      	ldr	r2, [pc, #296]	@ (8004a80 <UART_SetConfig+0x2d8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d125      	bne.n	80049a8 <UART_SetConfig+0x200>
 800495c:	4b45      	ldr	r3, [pc, #276]	@ (8004a74 <UART_SetConfig+0x2cc>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004966:	2bc0      	cmp	r3, #192	@ 0xc0
 8004968:	d016      	beq.n	8004998 <UART_SetConfig+0x1f0>
 800496a:	2bc0      	cmp	r3, #192	@ 0xc0
 800496c:	d818      	bhi.n	80049a0 <UART_SetConfig+0x1f8>
 800496e:	2b80      	cmp	r3, #128	@ 0x80
 8004970:	d00a      	beq.n	8004988 <UART_SetConfig+0x1e0>
 8004972:	2b80      	cmp	r3, #128	@ 0x80
 8004974:	d814      	bhi.n	80049a0 <UART_SetConfig+0x1f8>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <UART_SetConfig+0x1d8>
 800497a:	2b40      	cmp	r3, #64	@ 0x40
 800497c:	d008      	beq.n	8004990 <UART_SetConfig+0x1e8>
 800497e:	e00f      	b.n	80049a0 <UART_SetConfig+0x1f8>
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004986:	e082      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004988:	2302      	movs	r3, #2
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498e:	e07e      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004990:	2304      	movs	r3, #4
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e07a      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004998:	2308      	movs	r3, #8
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e076      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049a0:	2310      	movs	r3, #16
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e072      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a35      	ldr	r2, [pc, #212]	@ (8004a84 <UART_SetConfig+0x2dc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d12a      	bne.n	8004a08 <UART_SetConfig+0x260>
 80049b2:	4b30      	ldr	r3, [pc, #192]	@ (8004a74 <UART_SetConfig+0x2cc>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c0:	d01a      	beq.n	80049f8 <UART_SetConfig+0x250>
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c6:	d81b      	bhi.n	8004a00 <UART_SetConfig+0x258>
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049cc:	d00c      	beq.n	80049e8 <UART_SetConfig+0x240>
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d2:	d815      	bhi.n	8004a00 <UART_SetConfig+0x258>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <UART_SetConfig+0x238>
 80049d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049dc:	d008      	beq.n	80049f0 <UART_SetConfig+0x248>
 80049de:	e00f      	b.n	8004a00 <UART_SetConfig+0x258>
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e6:	e052      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049e8:	2302      	movs	r3, #2
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e04e      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049f0:	2304      	movs	r3, #4
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e04a      	b.n	8004a8e <UART_SetConfig+0x2e6>
 80049f8:	2308      	movs	r3, #8
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e046      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a00:	2310      	movs	r3, #16
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e042      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a17      	ldr	r2, [pc, #92]	@ (8004a6c <UART_SetConfig+0x2c4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d13a      	bne.n	8004a88 <UART_SetConfig+0x2e0>
 8004a12:	4b18      	ldr	r3, [pc, #96]	@ (8004a74 <UART_SetConfig+0x2cc>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a20:	d01a      	beq.n	8004a58 <UART_SetConfig+0x2b0>
 8004a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a26:	d81b      	bhi.n	8004a60 <UART_SetConfig+0x2b8>
 8004a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2c:	d00c      	beq.n	8004a48 <UART_SetConfig+0x2a0>
 8004a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a32:	d815      	bhi.n	8004a60 <UART_SetConfig+0x2b8>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <UART_SetConfig+0x298>
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3c:	d008      	beq.n	8004a50 <UART_SetConfig+0x2a8>
 8004a3e:	e00f      	b.n	8004a60 <UART_SetConfig+0x2b8>
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a46:	e022      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4e:	e01e      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a50:	2304      	movs	r3, #4
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e01a      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e016      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a60:	2310      	movs	r3, #16
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e012      	b.n	8004a8e <UART_SetConfig+0x2e6>
 8004a68:	efff69f3 	.word	0xefff69f3
 8004a6c:	40008000 	.word	0x40008000
 8004a70:	40013800 	.word	0x40013800
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40004400 	.word	0x40004400
 8004a7c:	40004800 	.word	0x40004800
 8004a80:	40004c00 	.word	0x40004c00
 8004a84:	40005000 	.word	0x40005000
 8004a88:	2310      	movs	r3, #16
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a9f      	ldr	r2, [pc, #636]	@ (8004d10 <UART_SetConfig+0x568>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d17a      	bne.n	8004b8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d824      	bhi.n	8004aea <UART_SetConfig+0x342>
 8004aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <UART_SetConfig+0x300>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004aeb 	.word	0x08004aeb
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004aeb 	.word	0x08004aeb
 8004ab8:	08004adb 	.word	0x08004adb
 8004abc:	08004aeb 	.word	0x08004aeb
 8004ac0:	08004aeb 	.word	0x08004aeb
 8004ac4:	08004aeb 	.word	0x08004aeb
 8004ac8:	08004ae3 	.word	0x08004ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004acc:	f7fe fce0 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 8004ad0:	61f8      	str	r0, [r7, #28]
        break;
 8004ad2:	e010      	b.n	8004af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad4:	4b8f      	ldr	r3, [pc, #572]	@ (8004d14 <UART_SetConfig+0x56c>)
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e00d      	b.n	8004af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ada:	f7fe fc41 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8004ade:	61f8      	str	r0, [r7, #28]
        break;
 8004ae0:	e009      	b.n	8004af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e005      	b.n	8004af6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80fb 	beq.w	8004cf4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d305      	bcc.n	8004b1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d903      	bls.n	8004b22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b20:	e0e8      	b.n	8004cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	2200      	movs	r2, #0
 8004b26:	461c      	mov	r4, r3
 8004b28:	4615      	mov	r5, r2
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	022b      	lsls	r3, r5, #8
 8004b34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b38:	0222      	lsls	r2, r4, #8
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	6849      	ldr	r1, [r1, #4]
 8004b3e:	0849      	lsrs	r1, r1, #1
 8004b40:	2000      	movs	r0, #0
 8004b42:	4688      	mov	r8, r1
 8004b44:	4681      	mov	r9, r0
 8004b46:	eb12 0a08 	adds.w	sl, r2, r8
 8004b4a:	eb43 0b09 	adc.w	fp, r3, r9
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5c:	4650      	mov	r0, sl
 8004b5e:	4659      	mov	r1, fp
 8004b60:	f7fb fb36 	bl	80001d0 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b72:	d308      	bcc.n	8004b86 <UART_SetConfig+0x3de>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b7a:	d204      	bcs.n	8004b86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	e0b6      	b.n	8004cf4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b8c:	e0b2      	b.n	8004cf4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b96:	d15e      	bne.n	8004c56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d828      	bhi.n	8004bf2 <UART_SetConfig+0x44a>
 8004ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <UART_SetConfig+0x400>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bd5 	.word	0x08004bd5
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bf3 	.word	0x08004bf3
 8004bb8:	08004be3 	.word	0x08004be3
 8004bbc:	08004bf3 	.word	0x08004bf3
 8004bc0:	08004bf3 	.word	0x08004bf3
 8004bc4:	08004bf3 	.word	0x08004bf3
 8004bc8:	08004beb 	.word	0x08004beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fe fc60 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 8004bd0:	61f8      	str	r0, [r7, #28]
        break;
 8004bd2:	e014      	b.n	8004bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fe fc72 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 8004bd8:	61f8      	str	r0, [r7, #28]
        break;
 8004bda:	e010      	b.n	8004bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8004d14 <UART_SetConfig+0x56c>)
 8004bde:	61fb      	str	r3, [r7, #28]
        break;
 8004be0:	e00d      	b.n	8004bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be2:	f7fe fbbd 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8004be6:	61f8      	str	r0, [r7, #28]
        break;
 8004be8:	e009      	b.n	8004bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bee:	61fb      	str	r3, [r7, #28]
        break;
 8004bf0:	e005      	b.n	8004bfe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d077      	beq.n	8004cf4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005a      	lsls	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	441a      	add	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b0f      	cmp	r3, #15
 8004c1e:	d916      	bls.n	8004c4e <UART_SetConfig+0x4a6>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c26:	d212      	bcs.n	8004c4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f023 030f 	bic.w	r3, r3, #15
 8004c30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	8afb      	ldrh	r3, [r7, #22]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	8afa      	ldrh	r2, [r7, #22]
 8004c4a:	60da      	str	r2, [r3, #12]
 8004c4c:	e052      	b.n	8004cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c54:	e04e      	b.n	8004cf4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d827      	bhi.n	8004cae <UART_SetConfig+0x506>
 8004c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <UART_SetConfig+0x4bc>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c89 	.word	0x08004c89
 8004c68:	08004c91 	.word	0x08004c91
 8004c6c:	08004c99 	.word	0x08004c99
 8004c70:	08004caf 	.word	0x08004caf
 8004c74:	08004c9f 	.word	0x08004c9f
 8004c78:	08004caf 	.word	0x08004caf
 8004c7c:	08004caf 	.word	0x08004caf
 8004c80:	08004caf 	.word	0x08004caf
 8004c84:	08004ca7 	.word	0x08004ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c88:	f7fe fc02 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 8004c8c:	61f8      	str	r0, [r7, #28]
        break;
 8004c8e:	e014      	b.n	8004cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c90:	f7fe fc14 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 8004c94:	61f8      	str	r0, [r7, #28]
        break;
 8004c96:	e010      	b.n	8004cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c98:	4b1e      	ldr	r3, [pc, #120]	@ (8004d14 <UART_SetConfig+0x56c>)
 8004c9a:	61fb      	str	r3, [r7, #28]
        break;
 8004c9c:	e00d      	b.n	8004cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9e:	f7fe fb5f 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 8004ca2:	61f8      	str	r0, [r7, #28]
        break;
 8004ca4:	e009      	b.n	8004cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004caa:	61fb      	str	r3, [r7, #28]
        break;
 8004cac:	e005      	b.n	8004cba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cb8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d019      	beq.n	8004cf4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	085a      	lsrs	r2, r3, #1
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	441a      	add	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	d909      	bls.n	8004cee <UART_SetConfig+0x546>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce0:	d205      	bcs.n	8004cee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60da      	str	r2, [r3, #12]
 8004cec:	e002      	b.n	8004cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3728      	adds	r7, #40	@ 0x28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0e:	bf00      	nop
 8004d10:	40008000 	.word	0x40008000
 8004d14:	00f42400 	.word	0x00f42400

08004d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e16:	d10a      	bne.n	8004e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b098      	sub	sp, #96	@ 0x60
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e6c:	f7fc fd9c 	bl	80019a8 <HAL_GetTick>
 8004e70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d12e      	bne.n	8004ede <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f88c 	bl	8004fac <UART_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d021      	beq.n	8004ede <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e6      	bne.n	8004e9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e062      	b.n	8004fa4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d149      	bne.n	8004f80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f856 	bl	8004fac <UART_WaitOnFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d03c      	beq.n	8004f80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	623b      	str	r3, [r7, #32]
   return(result);
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e6      	bne.n	8004f06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f58:	61fa      	str	r2, [r7, #28]
 8004f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	69b9      	ldr	r1, [r7, #24]
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	617b      	str	r3, [r7, #20]
   return(result);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e011      	b.n	8004fa4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3758      	adds	r7, #88	@ 0x58
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbc:	e04f      	b.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d04b      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7fc fcef 	bl	80019a8 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e04e      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d037      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b80      	cmp	r3, #128	@ 0x80
 8004ff2:	d034      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b40      	cmp	r3, #64	@ 0x40
 8004ff8:	d031      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b08      	cmp	r3, #8
 8005006:	d110      	bne.n	800502a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2208      	movs	r2, #8
 800500e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f838 	bl	8005086 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2208      	movs	r2, #8
 800501a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e029      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005038:	d111      	bne.n	800505e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f81e 	bl	8005086 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e00f      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	bf0c      	ite	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	2300      	movne	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	429a      	cmp	r2, r3
 800507a:	d0a0      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005086:	b480      	push	{r7}
 8005088:	b095      	sub	sp, #84	@ 0x54
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e6      	bne.n	800508e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d118      	bne.n	800512e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	60bb      	str	r3, [r7, #8]
   return(result);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 0310 	bic.w	r3, r3, #16
 8005110:	647b      	str	r3, [r7, #68]	@ 0x44
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	613b      	str	r3, [r7, #16]
   return(result);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e6      	bne.n	80050fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005142:	bf00      	nop
 8005144:	3754      	adds	r7, #84	@ 0x54
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800514e:	b084      	sub	sp, #16
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	f107 001c 	add.w	r0, r7, #28
 800515c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fa69 	bl	8005644 <USB_CoreReset>
 8005172:	4603      	mov	r3, r0
 8005174:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005176:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005182:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	639a      	str	r2, [r3, #56]	@ 0x38
 800518a:	e005      	b.n	8005198 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a4:	b004      	add	sp, #16
 80051a6:	4770      	bx	lr

080051a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f023 0201 	bic.w	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d115      	bne.n	8005218 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051f8:	200a      	movs	r0, #10
 80051fa:	f7fc fbe1 	bl	80019c0 <HAL_Delay>
      ms += 10U;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	330a      	adds	r3, #10
 8005202:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fa0f 	bl	8005628 <USB_GetMode>
 800520a:	4603      	mov	r3, r0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d01e      	beq.n	800524e <USB_SetCurrentMode+0x84>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2bc7      	cmp	r3, #199	@ 0xc7
 8005214:	d9f0      	bls.n	80051f8 <USB_SetCurrentMode+0x2e>
 8005216:	e01a      	b.n	800524e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d115      	bne.n	800524a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800522a:	200a      	movs	r0, #10
 800522c:	f7fc fbc8 	bl	80019c0 <HAL_Delay>
      ms += 10U;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	330a      	adds	r3, #10
 8005234:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f9f6 	bl	8005628 <USB_GetMode>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <USB_SetCurrentMode+0x84>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2bc7      	cmp	r3, #199	@ 0xc7
 8005246:	d9f0      	bls.n	800522a <USB_SetCurrentMode+0x60>
 8005248:	e001      	b.n	800524e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e005      	b.n	800525a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2bc8      	cmp	r3, #200	@ 0xc8
 8005252:	d101      	bne.n	8005258 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005264:	b084      	sub	sp, #16
 8005266:	b580      	push	{r7, lr}
 8005268:	b086      	sub	sp, #24
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e009      	b.n	8005298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3340      	adds	r3, #64	@ 0x40
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	2200      	movs	r2, #0
 8005290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3301      	adds	r3, #1
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b0e      	cmp	r3, #14
 800529c:	d9f2      	bls.n	8005284 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800529e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11c      	bne.n	80052e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052b4:	f043 0302 	orr.w	r3, r3, #2
 80052b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e005      	b.n	80052ec <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052f2:	461a      	mov	r2, r3
 80052f4:	2300      	movs	r3, #0
 80052f6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052f8:	2103      	movs	r1, #3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f95a 	bl	80055b4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005300:	2110      	movs	r1, #16
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8f6 	bl	80054f4 <USB_FlushTxFifo>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f920 	bl	8005558 <USB_FlushRxFifo>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005334:	461a      	mov	r2, r3
 8005336:	2300      	movs	r3, #0
 8005338:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005340:	461a      	mov	r2, r3
 8005342:	2300      	movs	r3, #0
 8005344:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e043      	b.n	80053d4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800535e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005362:	d118      	bne.n	8005396 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005376:	461a      	mov	r2, r3
 8005378:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e013      	b.n	80053a8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538c:	461a      	mov	r2, r3
 800538e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	e008      	b.n	80053a8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a2:	461a      	mov	r2, r3
 80053a4:	2300      	movs	r3, #0
 80053a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c6:	461a      	mov	r2, r3
 80053c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3301      	adds	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053d8:	461a      	mov	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4293      	cmp	r3, r2
 80053de:	d3b5      	bcc.n	800534c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	e043      	b.n	800546e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053fc:	d118      	bne.n	8005430 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005410:	461a      	mov	r2, r3
 8005412:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e013      	b.n	8005442 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e008      	b.n	8005442 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543c:	461a      	mov	r2, r3
 800543e:	2300      	movs	r3, #0
 8005440:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544e:	461a      	mov	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005460:	461a      	mov	r2, r3
 8005462:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005466:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3301      	adds	r3, #1
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005472:	461a      	mov	r2, r3
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4293      	cmp	r3, r2
 8005478:	d3b5      	bcc.n	80053e6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800548c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800549a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f043 0210 	orr.w	r2, r3, #16
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	4b10      	ldr	r3, [pc, #64]	@ (80054f0 <USB_DevInit+0x28c>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f043 0208 	orr.w	r2, r3, #8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d107      	bne.n	80054e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054d8:	f043 0304 	orr.w	r3, r3, #4
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ec:	b004      	add	sp, #16
 80054ee:	4770      	bx	lr
 80054f0:	803c3800 	.word	0x803c3800

080054f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3301      	adds	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800550e:	d901      	bls.n	8005514 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e01b      	b.n	800554c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	daf2      	bge.n	8005502 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	019b      	lsls	r3, r3, #6
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005538:	d901      	bls.n	800553e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e006      	b.n	800554c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b20      	cmp	r3, #32
 8005548:	d0f0      	beq.n	800552c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005570:	d901      	bls.n	8005576 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e018      	b.n	80055a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	daf2      	bge.n	8005564 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2210      	movs	r2, #16
 8005586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3301      	adds	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005594:	d901      	bls.n	800559a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e006      	b.n	80055a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d0f0      	beq.n	8005588 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055d4:	4313      	orrs	r3, r2
 80055d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005600:	f023 0303 	bic.w	r3, r3, #3
 8005604:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0301 	and.w	r3, r3, #1
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3301      	adds	r3, #1
 8005654:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800565c:	d901      	bls.n	8005662 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e01b      	b.n	800569a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	daf2      	bge.n	8005650 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f043 0201 	orr.w	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3301      	adds	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005686:	d901      	bls.n	800568c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e006      	b.n	800569a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d0f0      	beq.n	800567a <USB_CoreReset+0x36>

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <__NVIC_SetPriority>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	6039      	str	r1, [r7, #0]
 80056b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	db0a      	blt.n	80056d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	490c      	ldr	r1, [pc, #48]	@ (80056f4 <__NVIC_SetPriority+0x4c>)
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	0112      	lsls	r2, r2, #4
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	440b      	add	r3, r1
 80056cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80056d0:	e00a      	b.n	80056e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	4908      	ldr	r1, [pc, #32]	@ (80056f8 <__NVIC_SetPriority+0x50>)
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	3b04      	subs	r3, #4
 80056e0:	0112      	lsls	r2, r2, #4
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	440b      	add	r3, r1
 80056e6:	761a      	strb	r2, [r3, #24]
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	e000e100 	.word	0xe000e100
 80056f8:	e000ed00 	.word	0xe000ed00

080056fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005700:	2100      	movs	r1, #0
 8005702:	f06f 0004 	mvn.w	r0, #4
 8005706:	f7ff ffcf 	bl	80056a8 <__NVIC_SetPriority>
#endif
}
 800570a:	bf00      	nop
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005716:	f3ef 8305 	mrs	r3, IPSR
 800571a:	603b      	str	r3, [r7, #0]
  return(result);
 800571c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005722:	f06f 0305 	mvn.w	r3, #5
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	e00c      	b.n	8005744 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800572a:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <osKernelInitialize+0x44>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005732:	4b08      	ldr	r3, [pc, #32]	@ (8005754 <osKernelInitialize+0x44>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005738:	2300      	movs	r3, #0
 800573a:	607b      	str	r3, [r7, #4]
 800573c:	e002      	b.n	8005744 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800573e:	f04f 33ff 	mov.w	r3, #4294967295
 8005742:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005744:	687b      	ldr	r3, [r7, #4]
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20000874 	.word	0x20000874

08005758 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800575e:	f3ef 8305 	mrs	r3, IPSR
 8005762:	603b      	str	r3, [r7, #0]
  return(result);
 8005764:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <osKernelStart+0x1a>
    stat = osErrorISR;
 800576a:	f06f 0305 	mvn.w	r3, #5
 800576e:	607b      	str	r3, [r7, #4]
 8005770:	e010      	b.n	8005794 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005772:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <osKernelStart+0x48>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d109      	bne.n	800578e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800577a:	f7ff ffbf 	bl	80056fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800577e:	4b08      	ldr	r3, [pc, #32]	@ (80057a0 <osKernelStart+0x48>)
 8005780:	2202      	movs	r2, #2
 8005782:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005784:	f001 ff04 	bl	8007590 <vTaskStartScheduler>
      stat = osOK;
 8005788:	2300      	movs	r3, #0
 800578a:	607b      	str	r3, [r7, #4]
 800578c:	e002      	b.n	8005794 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800578e:	f04f 33ff 	mov.w	r3, #4294967295
 8005792:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005794:	687b      	ldr	r3, [r7, #4]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000874 	.word	0x20000874

080057a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08e      	sub	sp, #56	@ 0x38
 80057a8:	af04      	add	r7, sp, #16
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057b4:	f3ef 8305 	mrs	r3, IPSR
 80057b8:	617b      	str	r3, [r7, #20]
  return(result);
 80057ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d17e      	bne.n	80058be <osThreadNew+0x11a>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d07b      	beq.n	80058be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057c6:	2380      	movs	r3, #128	@ 0x80
 80057c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057ca:	2318      	movs	r3, #24
 80057cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d045      	beq.n	800586a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <osThreadNew+0x48>
        name = attr->name;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <osThreadNew+0x6e>
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	2b38      	cmp	r3, #56	@ 0x38
 8005804:	d805      	bhi.n	8005812 <osThreadNew+0x6e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <osThreadNew+0x72>
        return (NULL);
 8005812:	2300      	movs	r3, #0
 8005814:	e054      	b.n	80058c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	089b      	lsrs	r3, r3, #2
 8005824:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00e      	beq.n	800584c <osThreadNew+0xa8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b5b      	cmp	r3, #91	@ 0x5b
 8005834:	d90a      	bls.n	800584c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800583a:	2b00      	cmp	r3, #0
 800583c:	d006      	beq.n	800584c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <osThreadNew+0xa8>
        mem = 1;
 8005846:	2301      	movs	r3, #1
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e010      	b.n	800586e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10c      	bne.n	800586e <osThreadNew+0xca>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d108      	bne.n	800586e <osThreadNew+0xca>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <osThreadNew+0xca>
          mem = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e001      	b.n	800586e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d110      	bne.n	8005896 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800587c:	9202      	str	r2, [sp, #8]
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	6a3a      	ldr	r2, [r7, #32]
 8005888:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f001 fca4 	bl	80071d8 <xTaskCreateStatic>
 8005890:	4603      	mov	r3, r0
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	e013      	b.n	80058be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d110      	bne.n	80058be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	f107 0310 	add.w	r3, r7, #16
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f001 fcf2 	bl	8007298 <xTaskCreate>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d001      	beq.n	80058be <osThreadNew+0x11a>
            hTask = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058be:	693b      	ldr	r3, [r7, #16]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3728      	adds	r7, #40	@ 0x28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d0:	f3ef 8305 	mrs	r3, IPSR
 80058d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80058d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <osDelay+0x1c>
    stat = osErrorISR;
 80058dc:	f06f 0305 	mvn.w	r3, #5
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	e007      	b.n	80058f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 fe18 	bl	8007524 <vTaskDelay>
    }
  }

  return (stat);
 80058f4:	68fb      	ldr	r3, [r7, #12]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80058fe:	b580      	push	{r7, lr}
 8005900:	b088      	sub	sp, #32
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800590a:	f3ef 8305 	mrs	r3, IPSR
 800590e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005910:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005912:	2b00      	cmp	r3, #0
 8005914:	d174      	bne.n	8005a00 <osMutexNew+0x102>
    if (attr != NULL) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <osMutexNew+0x26>
      type = attr->attr_bits;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	e001      	b.n	8005928 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <osMutexNew+0x3a>
      rmtx = 1U;
 8005932:	2301      	movs	r3, #1
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e001      	b.n	800593c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d15c      	bne.n	8005a00 <osMutexNew+0x102>
      mem = -1;
 8005946:	f04f 33ff 	mov.w	r3, #4294967295
 800594a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d015      	beq.n	800597e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d006      	beq.n	8005968 <osMutexNew+0x6a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005960:	d902      	bls.n	8005968 <osMutexNew+0x6a>
          mem = 1;
 8005962:	2301      	movs	r3, #1
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	e00c      	b.n	8005982 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d108      	bne.n	8005982 <osMutexNew+0x84>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <osMutexNew+0x84>
            mem = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	e001      	b.n	8005982 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d112      	bne.n	80059ae <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4619      	mov	r1, r3
 8005994:	2004      	movs	r0, #4
 8005996:	f000 fcb2 	bl	80062fe <xQueueCreateMutexStatic>
 800599a:	61f8      	str	r0, [r7, #28]
 800599c:	e016      	b.n	80059cc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	4619      	mov	r1, r3
 80059a4:	2001      	movs	r0, #1
 80059a6:	f000 fcaa 	bl	80062fe <xQueueCreateMutexStatic>
 80059aa:	61f8      	str	r0, [r7, #28]
 80059ac:	e00e      	b.n	80059cc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10b      	bne.n	80059cc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d004      	beq.n	80059c4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80059ba:	2004      	movs	r0, #4
 80059bc:	f000 fc87 	bl	80062ce <xQueueCreateMutex>
 80059c0:	61f8      	str	r0, [r7, #28]
 80059c2:	e003      	b.n	80059cc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80059c4:	2001      	movs	r0, #1
 80059c6:	f000 fc82 	bl	80062ce <xQueueCreateMutex>
 80059ca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <osMutexNew+0xee>
        if (attr != NULL) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <osMutexNew+0xe2>
          name = attr->name;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e001      	b.n	80059e4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	69f8      	ldr	r0, [r7, #28]
 80059e8:	f001 fb6e 	bl	80070c8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <osMutexNew+0x102>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005a00:	69fb      	ldr	r3, [r7, #28]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3720      	adds	r7, #32
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b086      	sub	sp, #24
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a28:	f3ef 8305 	mrs	r3, IPSR
 8005a2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a2e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005a34:	f06f 0305 	mvn.w	r3, #5
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	e02c      	b.n	8005a96 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005a42:	f06f 0303 	mvn.w	r3, #3
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e025      	b.n	8005a96 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d011      	beq.n	8005a74 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6938      	ldr	r0, [r7, #16]
 8005a54:	f000 fca3 	bl	800639e <xQueueTakeMutexRecursive>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d01b      	beq.n	8005a96 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005a64:	f06f 0301 	mvn.w	r3, #1
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e014      	b.n	8005a96 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a6c:	f06f 0302 	mvn.w	r3, #2
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e010      	b.n	8005a96 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6938      	ldr	r0, [r7, #16]
 8005a78:	f001 f848 	bl	8006b0c <xQueueSemaphoreTake>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d009      	beq.n	8005a96 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005a88:	f06f 0301 	mvn.w	r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e002      	b.n	8005a96 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a90:	f06f 0302 	mvn.w	r3, #2
 8005a94:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005a96:	697b      	ldr	r3, [r7, #20]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f023 0301 	bic.w	r3, r3, #1
 8005aae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005abc:	f3ef 8305 	mrs	r3, IPSR
 8005ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ac2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005ac8:	f06f 0305 	mvn.w	r3, #5
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e01f      	b.n	8005b10 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005ad6:	f06f 0303 	mvn.w	r3, #3
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e018      	b.n	8005b10 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d009      	beq.n	8005af8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005ae4:	6938      	ldr	r0, [r7, #16]
 8005ae6:	f000 fc25 	bl	8006334 <xQueueGiveMutexRecursive>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d00f      	beq.n	8005b10 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005af0:	f06f 0302 	mvn.w	r3, #2
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e00b      	b.n	8005b10 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005af8:	2300      	movs	r3, #0
 8005afa:	2200      	movs	r2, #0
 8005afc:	2100      	movs	r1, #0
 8005afe:	6938      	ldr	r0, [r7, #16]
 8005b00:	f000 fcf2 	bl	80064e8 <xQueueGenericSend>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d002      	beq.n	8005b10 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b0a:	f06f 0302 	mvn.w	r3, #2
 8005b0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b10:	697b      	ldr	r3, [r7, #20]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b08a      	sub	sp, #40	@ 0x28
 8005b1e:	af02      	add	r7, sp, #8
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b2a:	f3ef 8305 	mrs	r3, IPSR
 8005b2e:	613b      	str	r3, [r7, #16]
  return(result);
 8005b30:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d175      	bne.n	8005c22 <osSemaphoreNew+0x108>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d072      	beq.n	8005c22 <osSemaphoreNew+0x108>
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d86e      	bhi.n	8005c22 <osSemaphoreNew+0x108>
    mem = -1;
 8005b44:	f04f 33ff 	mov.w	r3, #4294967295
 8005b48:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d006      	beq.n	8005b66 <osSemaphoreNew+0x4c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b4f      	cmp	r3, #79	@ 0x4f
 8005b5e:	d902      	bls.n	8005b66 <osSemaphoreNew+0x4c>
        mem = 1;
 8005b60:	2301      	movs	r3, #1
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e00c      	b.n	8005b80 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d108      	bne.n	8005b80 <osSemaphoreNew+0x66>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d104      	bne.n	8005b80 <osSemaphoreNew+0x66>
          mem = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	e001      	b.n	8005b80 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d04c      	beq.n	8005c22 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d128      	bne.n	8005be0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d10a      	bne.n	8005baa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	9200      	str	r2, [sp, #0]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f000 fa9f 	bl	80060e4 <xQueueGenericCreateStatic>
 8005ba6:	61f8      	str	r0, [r7, #28]
 8005ba8:	e005      	b.n	8005bb6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005baa:	2203      	movs	r2, #3
 8005bac:	2100      	movs	r1, #0
 8005bae:	2001      	movs	r0, #1
 8005bb0:	f000 fb15 	bl	80061de <xQueueGenericCreate>
 8005bb4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d022      	beq.n	8005c02 <osSemaphoreNew+0xe8>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01f      	beq.n	8005c02 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	69f8      	ldr	r0, [r7, #28]
 8005bca:	f000 fc8d 	bl	80064e8 <xQueueGenericSend>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d016      	beq.n	8005c02 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005bd4:	69f8      	ldr	r0, [r7, #28]
 8005bd6:	f001 f92b 	bl	8006e30 <vQueueDelete>
            hSemaphore = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	e010      	b.n	8005c02 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d108      	bne.n	8005bf8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	461a      	mov	r2, r3
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fc0c 	bl	800640c <xQueueCreateCountingSemaphoreStatic>
 8005bf4:	61f8      	str	r0, [r7, #28]
 8005bf6:	e004      	b.n	8005c02 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 fc3f 	bl	800647e <xQueueCreateCountingSemaphore>
 8005c00:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00c      	beq.n	8005c22 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e001      	b.n	8005c1a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005c1a:	6979      	ldr	r1, [r7, #20]
 8005c1c:	69f8      	ldr	r0, [r7, #28]
 8005c1e:	f001 fa53 	bl	80070c8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005c22:	69fb      	ldr	r3, [r7, #28]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005c44:	f06f 0303 	mvn.w	r3, #3
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e039      	b.n	8005cc0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c4c:	f3ef 8305 	mrs	r3, IPSR
 8005c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c52:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d022      	beq.n	8005c9e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005c5e:	f06f 0303 	mvn.w	r3, #3
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e02c      	b.n	8005cc0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005c6a:	f107 0308 	add.w	r3, r7, #8
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2100      	movs	r1, #0
 8005c72:	6938      	ldr	r0, [r7, #16]
 8005c74:	f001 f85a 	bl	8006d2c <xQueueReceiveFromISR>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d003      	beq.n	8005c86 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005c7e:	f06f 0302 	mvn.w	r3, #2
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e01c      	b.n	8005cc0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d019      	beq.n	8005cc0 <osSemaphoreAcquire+0x94>
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ccc <osSemaphoreAcquire+0xa0>)
 8005c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	e010      	b.n	8005cc0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6938      	ldr	r0, [r7, #16]
 8005ca2:	f000 ff33 	bl	8006b0c <xQueueSemaphoreTake>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d009      	beq.n	8005cc0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005cb2:	f06f 0301 	mvn.w	r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e002      	b.n	8005cc0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005cba:	f06f 0302 	mvn.w	r3, #2
 8005cbe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005cc0:	697b      	ldr	r3, [r7, #20]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	e000ed04 	.word	0xe000ed04

08005cd0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005ce6:	f06f 0303 	mvn.w	r3, #3
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e02c      	b.n	8005d48 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cee:	f3ef 8305 	mrs	r3, IPSR
 8005cf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01a      	beq.n	8005d30 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	4619      	mov	r1, r3
 8005d04:	6938      	ldr	r0, [r7, #16]
 8005d06:	f000 fd8f 	bl	8006828 <xQueueGiveFromISR>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d003      	beq.n	8005d18 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005d10:	f06f 0302 	mvn.w	r3, #2
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e017      	b.n	8005d48 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d014      	beq.n	8005d48 <osSemaphoreRelease+0x78>
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d54 <osSemaphoreRelease+0x84>)
 8005d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	e00b      	b.n	8005d48 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d30:	2300      	movs	r3, #0
 8005d32:	2200      	movs	r2, #0
 8005d34:	2100      	movs	r1, #0
 8005d36:	6938      	ldr	r0, [r7, #16]
 8005d38:	f000 fbd6 	bl	80064e8 <xQueueGenericSend>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d002      	beq.n	8005d48 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005d42:	f06f 0302 	mvn.w	r3, #2
 8005d46:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005d48:	697b      	ldr	r3, [r7, #20]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	@ 0x28
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d68:	f3ef 8305 	mrs	r3, IPSR
 8005d6c:	613b      	str	r3, [r7, #16]
  return(result);
 8005d6e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d15f      	bne.n	8005e34 <osMessageQueueNew+0xdc>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d05c      	beq.n	8005e34 <osMessageQueueNew+0xdc>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d059      	beq.n	8005e34 <osMessageQueueNew+0xdc>
    mem = -1;
 8005d80:	f04f 33ff 	mov.w	r3, #4294967295
 8005d84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d029      	beq.n	8005de0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d012      	beq.n	8005dba <osMessageQueueNew+0x62>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b4f      	cmp	r3, #79	@ 0x4f
 8005d9a:	d90e      	bls.n	8005dba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <osMessageQueueNew+0x62>
        mem = 1;
 8005db4:	2301      	movs	r3, #1
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	e014      	b.n	8005de4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d110      	bne.n	8005de4 <osMessageQueueNew+0x8c>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10c      	bne.n	8005de4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d108      	bne.n	8005de4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <osMessageQueueNew+0x8c>
          mem = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	e001      	b.n	8005de4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d10b      	bne.n	8005e02 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2100      	movs	r1, #0
 8005df4:	9100      	str	r1, [sp, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f973 	bl	80060e4 <xQueueGenericCreateStatic>
 8005dfe:	61f8      	str	r0, [r7, #28]
 8005e00:	e008      	b.n	8005e14 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d105      	bne.n	8005e14 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005e08:	2200      	movs	r2, #0
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f9e6 	bl	80061de <xQueueGenericCreate>
 8005e12:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e001      	b.n	8005e2c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	69f8      	ldr	r0, [r7, #28]
 8005e30:	f001 f94a 	bl	80070c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005e34:	69fb      	ldr	r3, [r7, #28]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3720      	adds	r7, #32
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4a07      	ldr	r2, [pc, #28]	@ (8005e6c <vApplicationGetIdleTaskMemory+0x2c>)
 8005e50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	4a06      	ldr	r2, [pc, #24]	@ (8005e70 <vApplicationGetIdleTaskMemory+0x30>)
 8005e56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2280      	movs	r2, #128	@ 0x80
 8005e5c:	601a      	str	r2, [r3, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000878 	.word	0x20000878
 8005e70:	200008d4 	.word	0x200008d4

08005e74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4a07      	ldr	r2, [pc, #28]	@ (8005ea0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4a06      	ldr	r2, [pc, #24]	@ (8005ea4 <vApplicationGetTimerTaskMemory+0x30>)
 8005e8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	20000ad4 	.word	0x20000ad4
 8005ea4:	20000b30 	.word	0x20000b30

08005ea8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f103 0208 	add.w	r2, r3, #8
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f103 0208 	add.w	r2, r3, #8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f103 0208 	add.w	r2, r3, #8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	601a      	str	r2, [r3, #0]
}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d103      	bne.n	8005f6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e00c      	b.n	8005f84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e002      	b.n	8005f78 <vListInsert+0x2e>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d2f6      	bcs.n	8005f72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6892      	ldr	r2, [r2, #8]
 8005fd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6852      	ldr	r2, [r2, #4]
 8005fdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d103      	bne.n	8005ff0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	e7fd      	b.n	8006038 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800603c:	f002 fd74 	bl	8008b28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006048:	68f9      	ldr	r1, [r7, #12]
 800604a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	441a      	add	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	3b01      	subs	r3, #1
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	441a      	add	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	22ff      	movs	r2, #255	@ 0xff
 8006080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	22ff      	movs	r2, #255	@ 0xff
 8006088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d114      	bne.n	80060bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01a      	beq.n	80060d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3310      	adds	r3, #16
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fd04 	bl	8007aac <xTaskRemoveFromEventList>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d012      	beq.n	80060d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060aa:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <xQueueGenericReset+0xd0>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	e009      	b.n	80060d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3310      	adds	r3, #16
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fef1 	bl	8005ea8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3324      	adds	r3, #36	@ 0x24
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff feec 	bl	8005ea8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060d0:	f002 fd5c 	bl	8008b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060d4:	2301      	movs	r3, #1
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08e      	sub	sp, #56	@ 0x38
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <xQueueGenericCreateStatic+0x56>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <xQueueGenericCreateStatic+0x5a>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <xQueueGenericCreateStatic+0x5c>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10b      	bne.n	800615c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	623b      	str	r3, [r7, #32]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <xQueueGenericCreateStatic+0x84>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <xQueueGenericCreateStatic+0x88>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <xQueueGenericCreateStatic+0x8a>
 800616c:	2300      	movs	r3, #0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10b      	bne.n	800618a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	61fb      	str	r3, [r7, #28]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800618a:	2350      	movs	r3, #80	@ 0x50
 800618c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b50      	cmp	r3, #80	@ 0x50
 8006192:	d00b      	beq.n	80061ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	61bb      	str	r3, [r7, #24]
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00d      	beq.n	80061d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f840 	bl	8006254 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3730      	adds	r7, #48	@ 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b08a      	sub	sp, #40	@ 0x28
 80061e2:	af02      	add	r7, sp, #8
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	4613      	mov	r3, r2
 80061ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <xQueueGenericCreate+0x2c>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	613b      	str	r3, [r7, #16]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	fb02 f303 	mul.w	r3, r2, r3
 8006212:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	3350      	adds	r3, #80	@ 0x50
 8006218:	4618      	mov	r0, r3
 800621a:	f002 fda7 	bl	8008d6c <pvPortMalloc>
 800621e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d011      	beq.n	800624a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	3350      	adds	r3, #80	@ 0x50
 800622e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006238:	79fa      	ldrb	r2, [r7, #7]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	4613      	mov	r3, r2
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 f805 	bl	8006254 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800624a:	69bb      	ldr	r3, [r7, #24]
	}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e002      	b.n	8006276 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006282:	2101      	movs	r1, #1
 8006284:	69b8      	ldr	r0, [r7, #24]
 8006286:	f7ff fec3 	bl	8006010 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006292:	bf00      	nop
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00e      	beq.n	80062c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80062ba:	2300      	movs	r3, #0
 80062bc:	2200      	movs	r2, #0
 80062be:	2100      	movs	r1, #0
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f911 	bl	80064e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	4603      	mov	r3, r0
 80062d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062d8:	2301      	movs	r3, #1
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6939      	ldr	r1, [r7, #16]
 80062e6:	6978      	ldr	r0, [r7, #20]
 80062e8:	f7ff ff79 	bl	80061de <xQueueGenericCreate>
 80062ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff ffd3 	bl	800629a <prvInitialiseMutex>

		return xNewQueue;
 80062f4:	68fb      	ldr	r3, [r7, #12]
	}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b088      	sub	sp, #32
 8006302:	af02      	add	r7, sp, #8
 8006304:	4603      	mov	r3, r0
 8006306:	6039      	str	r1, [r7, #0]
 8006308:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800630a:	2301      	movs	r3, #1
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	2300      	movs	r3, #0
 8006310:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2200      	movs	r2, #0
 800631a:	6939      	ldr	r1, [r7, #16]
 800631c:	6978      	ldr	r0, [r7, #20]
 800631e:	f7ff fee1 	bl	80060e4 <xQueueGenericCreateStatic>
 8006322:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff ffb8 	bl	800629a <prvInitialiseMutex>

		return xNewQueue;
 800632a:	68fb      	ldr	r3, [r7, #12]
	}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60fb      	str	r3, [r7, #12]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	689c      	ldr	r4, [r3, #8]
 8006362:	f001 fd63 	bl	8007e2c <xTaskGetCurrentTaskHandle>
 8006366:	4603      	mov	r3, r0
 8006368:	429c      	cmp	r4, r3
 800636a:	d111      	bne.n	8006390 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	1e5a      	subs	r2, r3, #1
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800637e:	2300      	movs	r3, #0
 8006380:	2200      	movs	r2, #0
 8006382:	2100      	movs	r1, #0
 8006384:	6938      	ldr	r0, [r7, #16]
 8006386:	f000 f8af 	bl	80064e8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800638a:	2301      	movs	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e001      	b.n	8006394 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006394:	697b      	ldr	r3, [r7, #20]
	}
 8006396:	4618      	mov	r0, r3
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	bd90      	pop	{r4, r7, pc}

0800639e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800639e:	b590      	push	{r4, r7, lr}
 80063a0:	b087      	sub	sp, #28
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	60fb      	str	r3, [r7, #12]
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	e7fd      	b.n	80063c6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	689c      	ldr	r4, [r3, #8]
 80063ce:	f001 fd2d 	bl	8007e2c <xTaskGetCurrentTaskHandle>
 80063d2:	4603      	mov	r3, r0
 80063d4:	429c      	cmp	r4, r3
 80063d6:	d107      	bne.n	80063e8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80063e2:	2301      	movs	r3, #1
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e00c      	b.n	8006402 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6938      	ldr	r0, [r7, #16]
 80063ec:	f000 fb8e 	bl	8006b0c <xQueueSemaphoreTake>
 80063f0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006402:	697b      	ldr	r3, [r7, #20]
	}
 8006404:	4618      	mov	r0, r3
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	bd90      	pop	{r4, r7, pc}

0800640c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	@ 0x28
 8006410:	af02      	add	r7, sp, #8
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	61bb      	str	r3, [r7, #24]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	429a      	cmp	r2, r3
 800643c:	d90b      	bls.n	8006456 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	617b      	str	r3, [r7, #20]
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	e7fd      	b.n	8006452 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006456:	2302      	movs	r3, #2
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	2100      	movs	r1, #0
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff fe3f 	bl	80060e4 <xQueueGenericCreateStatic>
 8006466:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006474:	69fb      	ldr	r3, [r7, #28]
	}
 8006476:	4618      	mov	r0, r3
 8006478:	3720      	adds	r7, #32
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	613b      	str	r3, [r7, #16]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d90b      	bls.n	80064c6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60fb      	str	r3, [r7, #12]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064c6:	2202      	movs	r2, #2
 80064c8:	2100      	movs	r1, #0
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff fe87 	bl	80061de <xQueueGenericCreate>
 80064d0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064de:	697b      	ldr	r3, [r7, #20]
	}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08e      	sub	sp, #56	@ 0x38
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064f6:	2300      	movs	r3, #0
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10b      	bne.n	800651c <xQueueGenericSend+0x34>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006516:	bf00      	nop
 8006518:	bf00      	nop
 800651a:	e7fd      	b.n	8006518 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d103      	bne.n	800652a <xQueueGenericSend+0x42>
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <xQueueGenericSend+0x46>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <xQueueGenericSend+0x48>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10b      	bne.n	800654c <xQueueGenericSend+0x64>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	e7fd      	b.n	8006548 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d103      	bne.n	800655a <xQueueGenericSend+0x72>
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <xQueueGenericSend+0x76>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <xQueueGenericSend+0x78>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10b      	bne.n	800657c <xQueueGenericSend+0x94>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	623b      	str	r3, [r7, #32]
}
 8006576:	bf00      	nop
 8006578:	bf00      	nop
 800657a:	e7fd      	b.n	8006578 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800657c:	f001 fc66 	bl	8007e4c <xTaskGetSchedulerState>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d102      	bne.n	800658c <xQueueGenericSend+0xa4>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <xQueueGenericSend+0xa8>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <xQueueGenericSend+0xaa>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <xQueueGenericSend+0xc6>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	61fb      	str	r3, [r7, #28]
}
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	e7fd      	b.n	80065aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ae:	f002 fabb 	bl	8008b28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <xQueueGenericSend+0xdc>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d129      	bne.n	8006618 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ca:	f000 fc6d 	bl	8006ea8 <prvCopyDataToQueue>
 80065ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d010      	beq.n	80065fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	3324      	adds	r3, #36	@ 0x24
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fa65 	bl	8007aac <xTaskRemoveFromEventList>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d013      	beq.n	8006610 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065e8:	4b3f      	ldr	r3, [pc, #252]	@ (80066e8 <xQueueGenericSend+0x200>)
 80065ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	e00a      	b.n	8006610 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006600:	4b39      	ldr	r3, [pc, #228]	@ (80066e8 <xQueueGenericSend+0x200>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006610:	f002 fabc 	bl	8008b8c <vPortExitCritical>
				return pdPASS;
 8006614:	2301      	movs	r3, #1
 8006616:	e063      	b.n	80066e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800661e:	f002 fab5 	bl	8008b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006622:	2300      	movs	r3, #0
 8006624:	e05c      	b.n	80066e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006628:	2b00      	cmp	r3, #0
 800662a:	d106      	bne.n	800663a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800662c:	f107 0314 	add.w	r3, r7, #20
 8006630:	4618      	mov	r0, r3
 8006632:	f001 fa9f 	bl	8007b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006636:	2301      	movs	r3, #1
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800663a:	f002 faa7 	bl	8008b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800663e:	f001 f80f 	bl	8007660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006642:	f002 fa71 	bl	8008b28 <vPortEnterCritical>
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800664c:	b25b      	sxtb	r3, r3
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d103      	bne.n	800665c <xQueueGenericSend+0x174>
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800665c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006662:	b25b      	sxtb	r3, r3
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d103      	bne.n	8006672 <xQueueGenericSend+0x18a>
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006672:	f002 fa8b 	bl	8008b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006676:	1d3a      	adds	r2, r7, #4
 8006678:	f107 0314 	add.w	r3, r7, #20
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f001 fa8e 	bl	8007ba0 <xTaskCheckForTimeOut>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d124      	bne.n	80066d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800668a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800668c:	f000 fd04 	bl	8007098 <prvIsQueueFull>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	3310      	adds	r3, #16
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 f9b2 	bl	8007a08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066a6:	f000 fc8f 	bl	8006fc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066aa:	f000 ffe7 	bl	800767c <xTaskResumeAll>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f47f af7c 	bne.w	80065ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80066b6:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <xQueueGenericSend+0x200>)
 80066b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	e772      	b.n	80065ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066ca:	f000 fc7d 	bl	8006fc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ce:	f000 ffd5 	bl	800767c <xTaskResumeAll>
 80066d2:	e76c      	b.n	80065ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066d6:	f000 fc77 	bl	8006fc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066da:	f000 ffcf 	bl	800767c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3738      	adds	r7, #56	@ 0x38
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b090      	sub	sp, #64	@ 0x40
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80066fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <xQueueGenericSendFromISR+0x3e>
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <xQueueGenericSendFromISR+0x42>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <xQueueGenericSendFromISR+0x44>
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d103      	bne.n	800675a <xQueueGenericSendFromISR+0x6e>
 8006752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <xQueueGenericSendFromISR+0x72>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <xQueueGenericSendFromISR+0x74>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	623b      	str	r3, [r7, #32]
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	e7fd      	b.n	8006778 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800677c:	f002 fab4 	bl	8008ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006780:	f3ef 8211 	mrs	r2, BASEPRI
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	61fa      	str	r2, [r7, #28]
 8006796:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006798:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800679c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d302      	bcc.n	80067ae <xQueueGenericSendFromISR+0xc2>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d12f      	bne.n	800680e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067c4:	f000 fb70 	bl	8006ea8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d112      	bne.n	80067f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d016      	beq.n	8006808 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	3324      	adds	r3, #36	@ 0x24
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 f964 	bl	8007aac <xTaskRemoveFromEventList>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e007      	b.n	8006808 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80067fc:	3301      	adds	r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	b25a      	sxtb	r2, r3
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006808:	2301      	movs	r3, #1
 800680a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800680c:	e001      	b.n	8006812 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800680e:	2300      	movs	r3, #0
 8006810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006814:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800681c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800681e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006820:	4618      	mov	r0, r3
 8006822:	3740      	adds	r7, #64	@ 0x40
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08e      	sub	sp, #56	@ 0x38
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	623b      	str	r3, [r7, #32]
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	e7fd      	b.n	8006850 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	61fb      	str	r3, [r7, #28]
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d103      	bne.n	8006884 <xQueueGiveFromISR+0x5c>
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <xQueueGiveFromISR+0x60>
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <xQueueGiveFromISR+0x62>
 8006888:	2300      	movs	r3, #0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	61bb      	str	r3, [r7, #24]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068a6:	f002 fa1f 	bl	8008ce8 <vPortValidateInterruptPriority>
	__asm volatile
 80068aa:	f3ef 8211 	mrs	r2, BASEPRI
 80068ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	617a      	str	r2, [r7, #20]
 80068c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d22b      	bcs.n	800692e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d112      	bne.n	8006918 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d016      	beq.n	8006928 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	3324      	adds	r3, #36	@ 0x24
 80068fe:	4618      	mov	r0, r3
 8006900:	f001 f8d4 	bl	8007aac <xTaskRemoveFromEventList>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00e      	beq.n	8006928 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00b      	beq.n	8006928 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e007      	b.n	8006928 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800691c:	3301      	adds	r3, #1
 800691e:	b2db      	uxtb	r3, r3
 8006920:	b25a      	sxtb	r2, r3
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006928:	2301      	movs	r3, #1
 800692a:	637b      	str	r3, [r7, #52]	@ 0x34
 800692c:	e001      	b.n	8006932 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800692e:	2300      	movs	r3, #0
 8006930:	637b      	str	r3, [r7, #52]	@ 0x34
 8006932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006934:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f383 8811 	msr	BASEPRI, r3
}
 800693c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800693e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006940:	4618      	mov	r0, r3
 8006942:	3738      	adds	r7, #56	@ 0x38
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08c      	sub	sp, #48	@ 0x30
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006954:	2300      	movs	r3, #0
 8006956:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800695c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10b      	bne.n	800697a <xQueueReceive+0x32>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	623b      	str	r3, [r7, #32]
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	e7fd      	b.n	8006976 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d103      	bne.n	8006988 <xQueueReceive+0x40>
 8006980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <xQueueReceive+0x44>
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <xQueueReceive+0x46>
 800698c:	2300      	movs	r3, #0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10b      	bne.n	80069aa <xQueueReceive+0x62>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	61fb      	str	r3, [r7, #28]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069aa:	f001 fa4f 	bl	8007e4c <xTaskGetSchedulerState>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <xQueueReceive+0x72>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <xQueueReceive+0x76>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <xQueueReceive+0x78>
 80069be:	2300      	movs	r3, #0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10b      	bne.n	80069dc <xQueueReceive+0x94>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	61bb      	str	r3, [r7, #24]
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069dc:	f002 f8a4 	bl	8008b28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01f      	beq.n	8006a2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069f0:	f000 fac4 	bl	8006f7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	1e5a      	subs	r2, r3, #1
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00f      	beq.n	8006a24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	3310      	adds	r3, #16
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f84f 	bl	8007aac <xTaskRemoveFromEventList>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a14:	4b3c      	ldr	r3, [pc, #240]	@ (8006b08 <xQueueReceive+0x1c0>)
 8006a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a24:	f002 f8b2 	bl	8008b8c <vPortExitCritical>
				return pdPASS;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e069      	b.n	8006b00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a32:	f002 f8ab 	bl	8008b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a36:	2300      	movs	r3, #0
 8006a38:	e062      	b.n	8006b00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a40:	f107 0310 	add.w	r3, r7, #16
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 f895 	bl	8007b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a4e:	f002 f89d 	bl	8008b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a52:	f000 fe05 	bl	8007660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a56:	f002 f867 	bl	8008b28 <vPortEnterCritical>
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a60:	b25b      	sxtb	r3, r3
 8006a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a66:	d103      	bne.n	8006a70 <xQueueReceive+0x128>
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a76:	b25b      	sxtb	r3, r3
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d103      	bne.n	8006a86 <xQueueReceive+0x13e>
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a86:	f002 f881 	bl	8008b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a8a:	1d3a      	adds	r2, r7, #4
 8006a8c:	f107 0310 	add.w	r3, r7, #16
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 f884 	bl	8007ba0 <xTaskCheckForTimeOut>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d123      	bne.n	8006ae6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aa0:	f000 fae4 	bl	800706c <prvIsQueueEmpty>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d017      	beq.n	8006ada <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aac:	3324      	adds	r3, #36	@ 0x24
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 ffa8 	bl	8007a08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ab8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aba:	f000 fa85 	bl	8006fc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006abe:	f000 fddd 	bl	800767c <xTaskResumeAll>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d189      	bne.n	80069dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b08 <xQueueReceive+0x1c0>)
 8006aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	e780      	b.n	80069dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006adc:	f000 fa74 	bl	8006fc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ae0:	f000 fdcc 	bl	800767c <xTaskResumeAll>
 8006ae4:	e77a      	b.n	80069dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ae8:	f000 fa6e 	bl	8006fc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aec:	f000 fdc6 	bl	800767c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af2:	f000 fabb 	bl	800706c <prvIsQueueEmpty>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f43f af6f 	beq.w	80069dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006afe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3730      	adds	r7, #48	@ 0x30
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08e      	sub	sp, #56	@ 0x38
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10b      	bne.n	8006b40 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	623b      	str	r3, [r7, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	bf00      	nop
 8006b3e:	e7fd      	b.n	8006b3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	61fb      	str	r3, [r7, #28]
}
 8006b5a:	bf00      	nop
 8006b5c:	bf00      	nop
 8006b5e:	e7fd      	b.n	8006b5c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b60:	f001 f974 	bl	8007e4c <xTaskGetSchedulerState>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d102      	bne.n	8006b70 <xQueueSemaphoreTake+0x64>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <xQueueSemaphoreTake+0x68>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <xQueueSemaphoreTake+0x6a>
 8006b74:	2300      	movs	r3, #0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	61bb      	str	r3, [r7, #24]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b92:	f001 ffc9 	bl	8008b28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d024      	beq.n	8006bec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	1e5a      	subs	r2, r3, #1
 8006ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bb2:	f001 fac5 	bl	8008140 <pvTaskIncrementMutexHeldCount>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00f      	beq.n	8006be4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc6:	3310      	adds	r3, #16
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 ff6f 	bl	8007aac <xTaskRemoveFromEventList>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bd4:	4b54      	ldr	r3, [pc, #336]	@ (8006d28 <xQueueSemaphoreTake+0x21c>)
 8006bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006be4:	f001 ffd2 	bl	8008b8c <vPortExitCritical>
				return pdPASS;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e098      	b.n	8006d1e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d112      	bne.n	8006c18 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	617b      	str	r3, [r7, #20]
}
 8006c0a:	bf00      	nop
 8006c0c:	bf00      	nop
 8006c0e:	e7fd      	b.n	8006c0c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c10:	f001 ffbc 	bl	8008b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e082      	b.n	8006d1e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c1e:	f107 030c 	add.w	r3, r7, #12
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 ffa6 	bl	8007b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c2c:	f001 ffae 	bl	8008b8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c30:	f000 fd16 	bl	8007660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c34:	f001 ff78 	bl	8008b28 <vPortEnterCritical>
 8006c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c3e:	b25b      	sxtb	r3, r3
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c44:	d103      	bne.n	8006c4e <xQueueSemaphoreTake+0x142>
 8006c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c54:	b25b      	sxtb	r3, r3
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d103      	bne.n	8006c64 <xQueueSemaphoreTake+0x158>
 8006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c64:	f001 ff92 	bl	8008b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c68:	463a      	mov	r2, r7
 8006c6a:	f107 030c 	add.w	r3, r7, #12
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 ff95 	bl	8007ba0 <xTaskCheckForTimeOut>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d132      	bne.n	8006ce2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c7e:	f000 f9f5 	bl	800706c <prvIsQueueEmpty>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d026      	beq.n	8006cd6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006c90:	f001 ff4a 	bl	8008b28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 f8f5 	bl	8007e88 <xTaskPriorityInherit>
 8006c9e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006ca0:	f001 ff74 	bl	8008b8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca6:	3324      	adds	r3, #36	@ 0x24
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	4611      	mov	r1, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 feab 	bl	8007a08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cb4:	f000 f988 	bl	8006fc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cb8:	f000 fce0 	bl	800767c <xTaskResumeAll>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f47f af67 	bne.w	8006b92 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006cc4:	4b18      	ldr	r3, [pc, #96]	@ (8006d28 <xQueueSemaphoreTake+0x21c>)
 8006cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	e75d      	b.n	8006b92 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cd8:	f000 f976 	bl	8006fc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cdc:	f000 fcce 	bl	800767c <xTaskResumeAll>
 8006ce0:	e757      	b.n	8006b92 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006ce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ce4:	f000 f970 	bl	8006fc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ce8:	f000 fcc8 	bl	800767c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cee:	f000 f9bd 	bl	800706c <prvIsQueueEmpty>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f43f af4c 	beq.w	8006b92 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00d      	beq.n	8006d1c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006d00:	f001 ff12 	bl	8008b28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d06:	f000 f8b7 	bl	8006e78 <prvGetDisinheritPriorityAfterTimeout>
 8006d0a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 f990 	bl	8008038 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d18:	f001 ff38 	bl	8008b8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3738      	adds	r7, #56	@ 0x38
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08e      	sub	sp, #56	@ 0x38
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10b      	bne.n	8006d5a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	623b      	str	r3, [r7, #32]
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	e7fd      	b.n	8006d56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d103      	bne.n	8006d68 <xQueueReceiveFromISR+0x3c>
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <xQueueReceiveFromISR+0x40>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <xQueueReceiveFromISR+0x42>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10b      	bne.n	8006d8a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61fb      	str	r3, [r7, #28]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d8a:	f001 ffad 	bl	8008ce8 <vPortValidateInterruptPriority>
	__asm volatile
 8006d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	61ba      	str	r2, [r7, #24]
 8006da4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006da6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d02f      	beq.n	8006e16 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dc4:	f000 f8da 	bl	8006f7c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dca:	1e5a      	subs	r2, r3, #1
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006dd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d112      	bne.n	8006e00 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d016      	beq.n	8006e10 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	3310      	adds	r3, #16
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fe60 	bl	8007aac <xTaskRemoveFromEventList>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00b      	beq.n	8006e10 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e007      	b.n	8006e10 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e04:	3301      	adds	r3, #1
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	b25a      	sxtb	r2, r3
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006e10:	2301      	movs	r3, #1
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	e001      	b.n	8006e1a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f383 8811 	msr	BASEPRI, r3
}
 8006e24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3738      	adds	r7, #56	@ 0x38
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10b      	bne.n	8006e5a <vQueueDelete+0x2a>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	60bb      	str	r3, [r7, #8]
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	e7fd      	b.n	8006e56 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f95e 	bl	800711c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f002 f84c 	bl	8008f08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e70:	bf00      	nop
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d006      	beq.n	8006e96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	e001      	b.n	8006e9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
	}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10d      	bne.n	8006ee2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d14d      	bne.n	8006f6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 f840 	bl	8007f58 <xTaskPriorityDisinherit>
 8006ed8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	609a      	str	r2, [r3, #8]
 8006ee0:	e043      	b.n	8006f6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d119      	bne.n	8006f1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6858      	ldr	r0, [r3, #4]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	f002 fb9b 	bl	800962e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f00:	441a      	add	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d32b      	bcc.n	8006f6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	e026      	b.n	8006f6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68d8      	ldr	r0, [r3, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f24:	461a      	mov	r2, r3
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	f002 fb81 	bl	800962e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f34:	425b      	negs	r3, r3
 8006f36:	441a      	add	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d207      	bcs.n	8006f58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f50:	425b      	negs	r3, r3
 8006f52:	441a      	add	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d105      	bne.n	8006f6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006f72:	697b      	ldr	r3, [r7, #20]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d018      	beq.n	8006fc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68da      	ldr	r2, [r3, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	441a      	add	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d303      	bcc.n	8006fb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68d9      	ldr	r1, [r3, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6838      	ldr	r0, [r7, #0]
 8006fbc:	f002 fb37 	bl	800962e <memcpy>
	}
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fd0:	f001 fdaa 	bl	8008b28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fdc:	e011      	b.n	8007002 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d012      	beq.n	800700c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3324      	adds	r3, #36	@ 0x24
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fd5e 	bl	8007aac <xTaskRemoveFromEventList>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ff6:	f000 fe37 	bl	8007c68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007006:	2b00      	cmp	r3, #0
 8007008:	dce9      	bgt.n	8006fde <prvUnlockQueue+0x16>
 800700a:	e000      	b.n	800700e <prvUnlockQueue+0x46>
					break;
 800700c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	22ff      	movs	r2, #255	@ 0xff
 8007012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007016:	f001 fdb9 	bl	8008b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800701a:	f001 fd85 	bl	8008b28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007024:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007026:	e011      	b.n	800704c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d012      	beq.n	8007056 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3310      	adds	r3, #16
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fd39 	bl	8007aac <xTaskRemoveFromEventList>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007040:	f000 fe12 	bl	8007c68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	3b01      	subs	r3, #1
 8007048:	b2db      	uxtb	r3, r3
 800704a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800704c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007050:	2b00      	cmp	r3, #0
 8007052:	dce9      	bgt.n	8007028 <prvUnlockQueue+0x60>
 8007054:	e000      	b.n	8007058 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007056:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	22ff      	movs	r2, #255	@ 0xff
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007060:	f001 fd94 	bl	8008b8c <vPortExitCritical>
}
 8007064:	bf00      	nop
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007074:	f001 fd58 	bl	8008b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	2b00      	cmp	r3, #0
 800707e:	d102      	bne.n	8007086 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007080:	2301      	movs	r3, #1
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	e001      	b.n	800708a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800708a:	f001 fd7f 	bl	8008b8c <vPortExitCritical>

	return xReturn;
 800708e:	68fb      	ldr	r3, [r7, #12]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a0:	f001 fd42 	bl	8008b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d102      	bne.n	80070b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e001      	b.n	80070ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ba:	f001 fd67 	bl	8008b8c <vPortExitCritical>

	return xReturn;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e014      	b.n	8007102 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070d8:	4a0f      	ldr	r2, [pc, #60]	@ (8007118 <vQueueAddToRegistry+0x50>)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070e4:	490c      	ldr	r1, [pc, #48]	@ (8007118 <vQueueAddToRegistry+0x50>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007118 <vQueueAddToRegistry+0x50>)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070fa:	e006      	b.n	800710a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b07      	cmp	r3, #7
 8007106:	d9e7      	bls.n	80070d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000f30 	.word	0x20000f30

0800711c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	e016      	b.n	8007158 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800712a:	4a10      	ldr	r2, [pc, #64]	@ (800716c <vQueueUnregisterQueue+0x50>)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	4413      	add	r3, r2
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d10b      	bne.n	8007152 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800713a:	4a0c      	ldr	r2, [pc, #48]	@ (800716c <vQueueUnregisterQueue+0x50>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2100      	movs	r1, #0
 8007140:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007144:	4a09      	ldr	r2, [pc, #36]	@ (800716c <vQueueUnregisterQueue+0x50>)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	4413      	add	r3, r2
 800714c:	2200      	movs	r2, #0
 800714e:	605a      	str	r2, [r3, #4]
				break;
 8007150:	e006      	b.n	8007160 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3301      	adds	r3, #1
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b07      	cmp	r3, #7
 800715c:	d9e5      	bls.n	800712a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	20000f30 	.word	0x20000f30

08007170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007180:	f001 fcd2 	bl	8008b28 <vPortEnterCritical>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800718a:	b25b      	sxtb	r3, r3
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007190:	d103      	bne.n	800719a <vQueueWaitForMessageRestricted+0x2a>
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071a0:	b25b      	sxtb	r3, r3
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a6:	d103      	bne.n	80071b0 <vQueueWaitForMessageRestricted+0x40>
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071b0:	f001 fcec 	bl	8008b8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	3324      	adds	r3, #36	@ 0x24
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fc45 	bl	8007a54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071ca:	6978      	ldr	r0, [r7, #20]
 80071cc:	f7ff fefc 	bl	8006fc8 <prvUnlockQueue>
	}
 80071d0:	bf00      	nop
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08e      	sub	sp, #56	@ 0x38
 80071dc:	af04      	add	r7, sp, #16
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <xTaskCreateStatic+0x2c>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	623b      	str	r3, [r7, #32]
}
 80071fe:	bf00      	nop
 8007200:	bf00      	nop
 8007202:	e7fd      	b.n	8007200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10b      	bne.n	8007222 <xTaskCreateStatic+0x4a>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	61fb      	str	r3, [r7, #28]
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	e7fd      	b.n	800721e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007222:	235c      	movs	r3, #92	@ 0x5c
 8007224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b5c      	cmp	r3, #92	@ 0x5c
 800722a:	d00b      	beq.n	8007244 <xTaskCreateStatic+0x6c>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	61bb      	str	r3, [r7, #24]
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007244:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01e      	beq.n	800728a <xTaskCreateStatic+0xb2>
 800724c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01b      	beq.n	800728a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007254:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800725a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	2202      	movs	r2, #2
 8007260:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007264:	2300      	movs	r3, #0
 8007266:	9303      	str	r3, [sp, #12]
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	9302      	str	r3, [sp, #8]
 800726c:	f107 0314 	add.w	r3, r7, #20
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f850 	bl	8007322 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007282:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007284:	f000 f8de 	bl	8007444 <prvAddNewTaskToReadyList>
 8007288:	e001      	b.n	800728e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800728e:	697b      	ldr	r3, [r7, #20]
	}
 8007290:	4618      	mov	r0, r3
 8007292:	3728      	adds	r7, #40	@ 0x28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08c      	sub	sp, #48	@ 0x30
 800729c:	af04      	add	r7, sp, #16
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	4613      	mov	r3, r2
 80072a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072a8:	88fb      	ldrh	r3, [r7, #6]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 fd5d 	bl	8008d6c <pvPortMalloc>
 80072b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00e      	beq.n	80072d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072ba:	205c      	movs	r0, #92	@ 0x5c
 80072bc:	f001 fd56 	bl	8008d6c <pvPortMalloc>
 80072c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80072ce:	e005      	b.n	80072dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072d0:	6978      	ldr	r0, [r7, #20]
 80072d2:	f001 fe19 	bl	8008f08 <vPortFree>
 80072d6:	e001      	b.n	80072dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d017      	beq.n	8007312 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	2300      	movs	r3, #0
 80072ee:	9303      	str	r3, [sp, #12]
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	9302      	str	r3, [sp, #8]
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f80e 	bl	8007322 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007306:	69f8      	ldr	r0, [r7, #28]
 8007308:	f000 f89c 	bl	8007444 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800730c:	2301      	movs	r3, #1
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	e002      	b.n	8007318 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007312:	f04f 33ff 	mov.w	r3, #4294967295
 8007316:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007318:	69bb      	ldr	r3, [r7, #24]
	}
 800731a:	4618      	mov	r0, r3
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b088      	sub	sp, #32
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007332:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	461a      	mov	r2, r3
 800733a:	21a5      	movs	r1, #165	@ 0xa5
 800733c:	f002 f8fc 	bl	8009538 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800734a:	3b01      	subs	r3, #1
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	f023 0307 	bic.w	r3, r3, #7
 8007358:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	617b      	str	r3, [r7, #20]
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d01f      	beq.n	80073c2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007382:	2300      	movs	r3, #0
 8007384:	61fb      	str	r3, [r7, #28]
 8007386:	e012      	b.n	80073ae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	7819      	ldrb	r1, [r3, #0]
 8007390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	4413      	add	r3, r2
 8007396:	3334      	adds	r3, #52	@ 0x34
 8007398:	460a      	mov	r2, r1
 800739a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	4413      	add	r3, r2
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d006      	beq.n	80073b6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	3301      	adds	r3, #1
 80073ac:	61fb      	str	r3, [r7, #28]
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	2b0f      	cmp	r3, #15
 80073b2:	d9e9      	bls.n	8007388 <prvInitialiseNewTask+0x66>
 80073b4:	e000      	b.n	80073b8 <prvInitialiseNewTask+0x96>
			{
				break;
 80073b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073c0:	e003      	b.n	80073ca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073cc:	2b37      	cmp	r3, #55	@ 0x37
 80073ce:	d901      	bls.n	80073d4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073d0:	2337      	movs	r3, #55	@ 0x37
 80073d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073de:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	2200      	movs	r2, #0
 80073e4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	3304      	adds	r3, #4
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fd7c 	bl	8005ee8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	3318      	adds	r3, #24
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe fd77 	bl	8005ee8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800740e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	2200      	movs	r2, #0
 8007414:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	68f9      	ldr	r1, [r7, #12]
 8007422:	69b8      	ldr	r0, [r7, #24]
 8007424:	f001 fa4e 	bl	80088c4 <pxPortInitialiseStack>
 8007428:	4602      	mov	r2, r0
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800742e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007438:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800743a:	bf00      	nop
 800743c:	3720      	adds	r7, #32
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800744c:	f001 fb6c 	bl	8008b28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007450:	4b2d      	ldr	r3, [pc, #180]	@ (8007508 <prvAddNewTaskToReadyList+0xc4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	4a2c      	ldr	r2, [pc, #176]	@ (8007508 <prvAddNewTaskToReadyList+0xc4>)
 8007458:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800745a:	4b2c      	ldr	r3, [pc, #176]	@ (800750c <prvAddNewTaskToReadyList+0xc8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d109      	bne.n	8007476 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007462:	4a2a      	ldr	r2, [pc, #168]	@ (800750c <prvAddNewTaskToReadyList+0xc8>)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007468:	4b27      	ldr	r3, [pc, #156]	@ (8007508 <prvAddNewTaskToReadyList+0xc4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d110      	bne.n	8007492 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007470:	f000 fc1e 	bl	8007cb0 <prvInitialiseTaskLists>
 8007474:	e00d      	b.n	8007492 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007476:	4b26      	ldr	r3, [pc, #152]	@ (8007510 <prvAddNewTaskToReadyList+0xcc>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800747e:	4b23      	ldr	r3, [pc, #140]	@ (800750c <prvAddNewTaskToReadyList+0xc8>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	429a      	cmp	r2, r3
 800748a:	d802      	bhi.n	8007492 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800748c:	4a1f      	ldr	r2, [pc, #124]	@ (800750c <prvAddNewTaskToReadyList+0xc8>)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007492:	4b20      	ldr	r3, [pc, #128]	@ (8007514 <prvAddNewTaskToReadyList+0xd0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3301      	adds	r3, #1
 8007498:	4a1e      	ldr	r2, [pc, #120]	@ (8007514 <prvAddNewTaskToReadyList+0xd0>)
 800749a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800749c:	4b1d      	ldr	r3, [pc, #116]	@ (8007514 <prvAddNewTaskToReadyList+0xd0>)
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007518 <prvAddNewTaskToReadyList+0xd4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d903      	bls.n	80074b8 <prvAddNewTaskToReadyList+0x74>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	4a18      	ldr	r2, [pc, #96]	@ (8007518 <prvAddNewTaskToReadyList+0xd4>)
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4a15      	ldr	r2, [pc, #84]	@ (800751c <prvAddNewTaskToReadyList+0xd8>)
 80074c6:	441a      	add	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f7fe fd17 	bl	8005f02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074d4:	f001 fb5a 	bl	8008b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007510 <prvAddNewTaskToReadyList+0xcc>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00e      	beq.n	80074fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074e0:	4b0a      	ldr	r3, [pc, #40]	@ (800750c <prvAddNewTaskToReadyList+0xc8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d207      	bcs.n	80074fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007520 <prvAddNewTaskToReadyList+0xdc>)
 80074f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20001444 	.word	0x20001444
 800750c:	20000f70 	.word	0x20000f70
 8007510:	20001450 	.word	0x20001450
 8007514:	20001460 	.word	0x20001460
 8007518:	2000144c 	.word	0x2000144c
 800751c:	20000f74 	.word	0x20000f74
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d018      	beq.n	8007568 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007536:	4b14      	ldr	r3, [pc, #80]	@ (8007588 <vTaskDelay+0x64>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <vTaskDelay+0x32>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60bb      	str	r3, [r7, #8]
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	e7fd      	b.n	8007552 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007556:	f000 f883 	bl	8007660 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800755a:	2100      	movs	r1, #0
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fe03 	bl	8008168 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007562:	f000 f88b 	bl	800767c <xTaskResumeAll>
 8007566:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d107      	bne.n	800757e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800756e:	4b07      	ldr	r3, [pc, #28]	@ (800758c <vTaskDelay+0x68>)
 8007570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	2000146c 	.word	0x2000146c
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08a      	sub	sp, #40	@ 0x28
 8007594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007596:	2300      	movs	r3, #0
 8007598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800759a:	2300      	movs	r3, #0
 800759c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800759e:	463a      	mov	r2, r7
 80075a0:	1d39      	adds	r1, r7, #4
 80075a2:	f107 0308 	add.w	r3, r7, #8
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe fc4a 	bl	8005e40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	9202      	str	r2, [sp, #8]
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	2300      	movs	r3, #0
 80075bc:	460a      	mov	r2, r1
 80075be:	4922      	ldr	r1, [pc, #136]	@ (8007648 <vTaskStartScheduler+0xb8>)
 80075c0:	4822      	ldr	r0, [pc, #136]	@ (800764c <vTaskStartScheduler+0xbc>)
 80075c2:	f7ff fe09 	bl	80071d8 <xTaskCreateStatic>
 80075c6:	4603      	mov	r3, r0
 80075c8:	4a21      	ldr	r2, [pc, #132]	@ (8007650 <vTaskStartScheduler+0xc0>)
 80075ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075cc:	4b20      	ldr	r3, [pc, #128]	@ (8007650 <vTaskStartScheduler+0xc0>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075d4:	2301      	movs	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e001      	b.n	80075de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d102      	bne.n	80075ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075e4:	f000 fe14 	bl	8008210 <xTimerCreateTimerTask>
 80075e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d116      	bne.n	800761e <vTaskStartScheduler+0x8e>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
}
 8007602:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007604:	4b13      	ldr	r3, [pc, #76]	@ (8007654 <vTaskStartScheduler+0xc4>)
 8007606:	f04f 32ff 	mov.w	r2, #4294967295
 800760a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800760c:	4b12      	ldr	r3, [pc, #72]	@ (8007658 <vTaskStartScheduler+0xc8>)
 800760e:	2201      	movs	r2, #1
 8007610:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007612:	4b12      	ldr	r3, [pc, #72]	@ (800765c <vTaskStartScheduler+0xcc>)
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007618:	f001 f9e2 	bl	80089e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800761c:	e00f      	b.n	800763e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d10b      	bne.n	800763e <vTaskStartScheduler+0xae>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <vTaskStartScheduler+0xaa>
}
 800763e:	bf00      	nop
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	08009bbc 	.word	0x08009bbc
 800764c:	08007c81 	.word	0x08007c81
 8007650:	20001468 	.word	0x20001468
 8007654:	20001464 	.word	0x20001464
 8007658:	20001450 	.word	0x20001450
 800765c:	20001448 	.word	0x20001448

08007660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007664:	4b04      	ldr	r3, [pc, #16]	@ (8007678 <vTaskSuspendAll+0x18>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	4a03      	ldr	r2, [pc, #12]	@ (8007678 <vTaskSuspendAll+0x18>)
 800766c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800766e:	bf00      	nop
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	2000146c 	.word	0x2000146c

0800767c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800768a:	4b42      	ldr	r3, [pc, #264]	@ (8007794 <xTaskResumeAll+0x118>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <xTaskResumeAll+0x2e>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	603b      	str	r3, [r7, #0]
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	e7fd      	b.n	80076a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076aa:	f001 fa3d 	bl	8008b28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076ae:	4b39      	ldr	r3, [pc, #228]	@ (8007794 <xTaskResumeAll+0x118>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	4a37      	ldr	r2, [pc, #220]	@ (8007794 <xTaskResumeAll+0x118>)
 80076b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076b8:	4b36      	ldr	r3, [pc, #216]	@ (8007794 <xTaskResumeAll+0x118>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d162      	bne.n	8007786 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076c0:	4b35      	ldr	r3, [pc, #212]	@ (8007798 <xTaskResumeAll+0x11c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d05e      	beq.n	8007786 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076c8:	e02f      	b.n	800772a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ca:	4b34      	ldr	r3, [pc, #208]	@ (800779c <xTaskResumeAll+0x120>)
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3318      	adds	r3, #24
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe fc70 	bl	8005fbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3304      	adds	r3, #4
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fe fc6b 	bl	8005fbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ea:	4b2d      	ldr	r3, [pc, #180]	@ (80077a0 <xTaskResumeAll+0x124>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d903      	bls.n	80076fa <xTaskResumeAll+0x7e>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f6:	4a2a      	ldr	r2, [pc, #168]	@ (80077a0 <xTaskResumeAll+0x124>)
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4a27      	ldr	r2, [pc, #156]	@ (80077a4 <xTaskResumeAll+0x128>)
 8007708:	441a      	add	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7fe fbf6 	bl	8005f02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771a:	4b23      	ldr	r3, [pc, #140]	@ (80077a8 <xTaskResumeAll+0x12c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	429a      	cmp	r2, r3
 8007722:	d302      	bcc.n	800772a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007724:	4b21      	ldr	r3, [pc, #132]	@ (80077ac <xTaskResumeAll+0x130>)
 8007726:	2201      	movs	r2, #1
 8007728:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800772a:	4b1c      	ldr	r3, [pc, #112]	@ (800779c <xTaskResumeAll+0x120>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1cb      	bne.n	80076ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007738:	f000 fb58 	bl	8007dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800773c:	4b1c      	ldr	r3, [pc, #112]	@ (80077b0 <xTaskResumeAll+0x134>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d010      	beq.n	800776a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007748:	f000 f846 	bl	80077d8 <xTaskIncrementTick>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007752:	4b16      	ldr	r3, [pc, #88]	@ (80077ac <xTaskResumeAll+0x130>)
 8007754:	2201      	movs	r2, #1
 8007756:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3b01      	subs	r3, #1
 800775c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f1      	bne.n	8007748 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007764:	4b12      	ldr	r3, [pc, #72]	@ (80077b0 <xTaskResumeAll+0x134>)
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800776a:	4b10      	ldr	r3, [pc, #64]	@ (80077ac <xTaskResumeAll+0x130>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007772:	2301      	movs	r3, #1
 8007774:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007776:	4b0f      	ldr	r3, [pc, #60]	@ (80077b4 <xTaskResumeAll+0x138>)
 8007778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007786:	f001 fa01 	bl	8008b8c <vPortExitCritical>

	return xAlreadyYielded;
 800778a:	68bb      	ldr	r3, [r7, #8]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	2000146c 	.word	0x2000146c
 8007798:	20001444 	.word	0x20001444
 800779c:	20001404 	.word	0x20001404
 80077a0:	2000144c 	.word	0x2000144c
 80077a4:	20000f74 	.word	0x20000f74
 80077a8:	20000f70 	.word	0x20000f70
 80077ac:	20001458 	.word	0x20001458
 80077b0:	20001454 	.word	0x20001454
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077be:	4b05      	ldr	r3, [pc, #20]	@ (80077d4 <xTaskGetTickCount+0x1c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077c4:	687b      	ldr	r3, [r7, #4]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	20001448 	.word	0x20001448

080077d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007920 <xTaskIncrementTick+0x148>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f040 8090 	bne.w	800790c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007924 <xTaskIncrementTick+0x14c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3301      	adds	r3, #1
 80077f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077f4:	4a4b      	ldr	r2, [pc, #300]	@ (8007924 <xTaskIncrementTick+0x14c>)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d121      	bne.n	8007844 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007800:	4b49      	ldr	r3, [pc, #292]	@ (8007928 <xTaskIncrementTick+0x150>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <xTaskIncrementTick+0x4a>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	603b      	str	r3, [r7, #0]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <xTaskIncrementTick+0x46>
 8007822:	4b41      	ldr	r3, [pc, #260]	@ (8007928 <xTaskIncrementTick+0x150>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	4b40      	ldr	r3, [pc, #256]	@ (800792c <xTaskIncrementTick+0x154>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a3e      	ldr	r2, [pc, #248]	@ (8007928 <xTaskIncrementTick+0x150>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	4a3e      	ldr	r2, [pc, #248]	@ (800792c <xTaskIncrementTick+0x154>)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	4b3e      	ldr	r3, [pc, #248]	@ (8007930 <xTaskIncrementTick+0x158>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	4a3c      	ldr	r2, [pc, #240]	@ (8007930 <xTaskIncrementTick+0x158>)
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	f000 fad4 	bl	8007dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007844:	4b3b      	ldr	r3, [pc, #236]	@ (8007934 <xTaskIncrementTick+0x15c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	d349      	bcc.n	80078e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800784e:	4b36      	ldr	r3, [pc, #216]	@ (8007928 <xTaskIncrementTick+0x150>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007858:	4b36      	ldr	r3, [pc, #216]	@ (8007934 <xTaskIncrementTick+0x15c>)
 800785a:	f04f 32ff 	mov.w	r2, #4294967295
 800785e:	601a      	str	r2, [r3, #0]
					break;
 8007860:	e03f      	b.n	80078e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007862:	4b31      	ldr	r3, [pc, #196]	@ (8007928 <xTaskIncrementTick+0x150>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	429a      	cmp	r2, r3
 8007878:	d203      	bcs.n	8007882 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800787a:	4a2e      	ldr	r2, [pc, #184]	@ (8007934 <xTaskIncrementTick+0x15c>)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007880:	e02f      	b.n	80078e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	3304      	adds	r3, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fb98 	bl	8005fbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	3318      	adds	r3, #24
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fb8f 	bl	8005fbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a2:	4b25      	ldr	r3, [pc, #148]	@ (8007938 <xTaskIncrementTick+0x160>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d903      	bls.n	80078b2 <xTaskIncrementTick+0xda>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ae:	4a22      	ldr	r2, [pc, #136]	@ (8007938 <xTaskIncrementTick+0x160>)
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4a1f      	ldr	r2, [pc, #124]	@ (800793c <xTaskIncrementTick+0x164>)
 80078c0:	441a      	add	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f7fe fb1a 	bl	8005f02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007940 <xTaskIncrementTick+0x168>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	429a      	cmp	r2, r3
 80078da:	d3b8      	bcc.n	800784e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80078dc:	2301      	movs	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078e0:	e7b5      	b.n	800784e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078e2:	4b17      	ldr	r3, [pc, #92]	@ (8007940 <xTaskIncrementTick+0x168>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e8:	4914      	ldr	r1, [pc, #80]	@ (800793c <xTaskIncrementTick+0x164>)
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d901      	bls.n	80078fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80078fa:	2301      	movs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078fe:	4b11      	ldr	r3, [pc, #68]	@ (8007944 <xTaskIncrementTick+0x16c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d007      	beq.n	8007916 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007906:	2301      	movs	r3, #1
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	e004      	b.n	8007916 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800790c:	4b0e      	ldr	r3, [pc, #56]	@ (8007948 <xTaskIncrementTick+0x170>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3301      	adds	r3, #1
 8007912:	4a0d      	ldr	r2, [pc, #52]	@ (8007948 <xTaskIncrementTick+0x170>)
 8007914:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007916:	697b      	ldr	r3, [r7, #20]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	2000146c 	.word	0x2000146c
 8007924:	20001448 	.word	0x20001448
 8007928:	200013fc 	.word	0x200013fc
 800792c:	20001400 	.word	0x20001400
 8007930:	2000145c 	.word	0x2000145c
 8007934:	20001464 	.word	0x20001464
 8007938:	2000144c 	.word	0x2000144c
 800793c:	20000f74 	.word	0x20000f74
 8007940:	20000f70 	.word	0x20000f70
 8007944:	20001458 	.word	0x20001458
 8007948:	20001454 	.word	0x20001454

0800794c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007952:	4b28      	ldr	r3, [pc, #160]	@ (80079f4 <vTaskSwitchContext+0xa8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800795a:	4b27      	ldr	r3, [pc, #156]	@ (80079f8 <vTaskSwitchContext+0xac>)
 800795c:	2201      	movs	r2, #1
 800795e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007960:	e042      	b.n	80079e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007962:	4b25      	ldr	r3, [pc, #148]	@ (80079f8 <vTaskSwitchContext+0xac>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007968:	4b24      	ldr	r3, [pc, #144]	@ (80079fc <vTaskSwitchContext+0xb0>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e011      	b.n	8007994 <vTaskSwitchContext+0x48>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <vTaskSwitchContext+0x42>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	607b      	str	r3, [r7, #4]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <vTaskSwitchContext+0x3e>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b01      	subs	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	491a      	ldr	r1, [pc, #104]	@ (8007a00 <vTaskSwitchContext+0xb4>)
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	440b      	add	r3, r1
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0e3      	beq.n	8007970 <vTaskSwitchContext+0x24>
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4a13      	ldr	r2, [pc, #76]	@ (8007a00 <vTaskSwitchContext+0xb4>)
 80079b4:	4413      	add	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	605a      	str	r2, [r3, #4]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	3308      	adds	r3, #8
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d104      	bne.n	80079d8 <vTaskSwitchContext+0x8c>
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	605a      	str	r2, [r3, #4]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	4a09      	ldr	r2, [pc, #36]	@ (8007a04 <vTaskSwitchContext+0xb8>)
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	4a06      	ldr	r2, [pc, #24]	@ (80079fc <vTaskSwitchContext+0xb0>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6013      	str	r3, [r2, #0]
}
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	2000146c 	.word	0x2000146c
 80079f8:	20001458 	.word	0x20001458
 80079fc:	2000144c 	.word	0x2000144c
 8007a00:	20000f74 	.word	0x20000f74
 8007a04:	20000f70 	.word	0x20000f70

08007a08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10b      	bne.n	8007a30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	60fb      	str	r3, [r7, #12]
}
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	e7fd      	b.n	8007a2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a30:	4b07      	ldr	r3, [pc, #28]	@ (8007a50 <vTaskPlaceOnEventList+0x48>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3318      	adds	r3, #24
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7fe fa86 	bl	8005f4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a3e:	2101      	movs	r1, #1
 8007a40:	6838      	ldr	r0, [r7, #0]
 8007a42:	f000 fb91 	bl	8008168 <prvAddCurrentTaskToDelayedList>
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000f70 	.word	0x20000f70

08007a54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10b      	bne.n	8007a7e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	617b      	str	r3, [r7, #20]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3318      	adds	r3, #24
 8007a84:	4619      	mov	r1, r3
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7fe fa3b 	bl	8005f02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	68b8      	ldr	r0, [r7, #8]
 8007a9c:	f000 fb64 	bl	8008168 <prvAddCurrentTaskToDelayedList>
	}
 8007aa0:	bf00      	nop
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20000f70 	.word	0x20000f70

08007aac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10b      	bne.n	8007ada <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60fb      	str	r3, [r7, #12]
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	e7fd      	b.n	8007ad6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	3318      	adds	r3, #24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe fa6c 	bl	8005fbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b5c <xTaskRemoveFromEventList+0xb0>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11d      	bne.n	8007b28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fe fa63 	bl	8005fbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007afa:	4b19      	ldr	r3, [pc, #100]	@ (8007b60 <xTaskRemoveFromEventList+0xb4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d903      	bls.n	8007b0a <xTaskRemoveFromEventList+0x5e>
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b06:	4a16      	ldr	r2, [pc, #88]	@ (8007b60 <xTaskRemoveFromEventList+0xb4>)
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4a13      	ldr	r2, [pc, #76]	@ (8007b64 <xTaskRemoveFromEventList+0xb8>)
 8007b18:	441a      	add	r2, r3
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f7fe f9ee 	bl	8005f02 <vListInsertEnd>
 8007b26:	e005      	b.n	8007b34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	3318      	adds	r3, #24
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	480e      	ldr	r0, [pc, #56]	@ (8007b68 <xTaskRemoveFromEventList+0xbc>)
 8007b30:	f7fe f9e7 	bl	8005f02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b38:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <xTaskRemoveFromEventList+0xc0>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d905      	bls.n	8007b4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b42:	2301      	movs	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b46:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <xTaskRemoveFromEventList+0xc4>)
 8007b48:	2201      	movs	r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	e001      	b.n	8007b52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b52:	697b      	ldr	r3, [r7, #20]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	2000146c 	.word	0x2000146c
 8007b60:	2000144c 	.word	0x2000144c
 8007b64:	20000f74 	.word	0x20000f74
 8007b68:	20001404 	.word	0x20001404
 8007b6c:	20000f70 	.word	0x20000f70
 8007b70:	20001458 	.word	0x20001458

08007b74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b7c:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <vTaskInternalSetTimeOutState+0x24>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b84:	4b05      	ldr	r3, [pc, #20]	@ (8007b9c <vTaskInternalSetTimeOutState+0x28>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	605a      	str	r2, [r3, #4]
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	2000145c 	.word	0x2000145c
 8007b9c:	20001448 	.word	0x20001448

08007ba0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10b      	bne.n	8007bc8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	613b      	str	r3, [r7, #16]
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	e7fd      	b.n	8007bc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10b      	bne.n	8007be6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	60fb      	str	r3, [r7, #12]
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	e7fd      	b.n	8007be2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007be6:	f000 ff9f 	bl	8008b28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007bea:	4b1d      	ldr	r3, [pc, #116]	@ (8007c60 <xTaskCheckForTimeOut+0xc0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d102      	bne.n	8007c0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61fb      	str	r3, [r7, #28]
 8007c08:	e023      	b.n	8007c52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b15      	ldr	r3, [pc, #84]	@ (8007c64 <xTaskCheckForTimeOut+0xc4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d007      	beq.n	8007c26 <xTaskCheckForTimeOut+0x86>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d302      	bcc.n	8007c26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c20:	2301      	movs	r3, #1
 8007c22:	61fb      	str	r3, [r7, #28]
 8007c24:	e015      	b.n	8007c52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d20b      	bcs.n	8007c48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	1ad2      	subs	r2, r2, r3
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff ff99 	bl	8007b74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	61fb      	str	r3, [r7, #28]
 8007c46:	e004      	b.n	8007c52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c52:	f000 ff9b 	bl	8008b8c <vPortExitCritical>

	return xReturn;
 8007c56:	69fb      	ldr	r3, [r7, #28]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3720      	adds	r7, #32
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20001448 	.word	0x20001448
 8007c64:	2000145c 	.word	0x2000145c

08007c68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c6c:	4b03      	ldr	r3, [pc, #12]	@ (8007c7c <vTaskMissedYield+0x14>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
}
 8007c72:	bf00      	nop
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	20001458 	.word	0x20001458

08007c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c88:	f000 f852 	bl	8007d30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <prvIdleTask+0x28>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d9f9      	bls.n	8007c88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c94:	4b05      	ldr	r3, [pc, #20]	@ (8007cac <prvIdleTask+0x2c>)
 8007c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ca4:	e7f0      	b.n	8007c88 <prvIdleTask+0x8>
 8007ca6:	bf00      	nop
 8007ca8:	20000f74 	.word	0x20000f74
 8007cac:	e000ed04 	.word	0xe000ed04

08007cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	607b      	str	r3, [r7, #4]
 8007cba:	e00c      	b.n	8007cd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4a12      	ldr	r2, [pc, #72]	@ (8007d10 <prvInitialiseTaskLists+0x60>)
 8007cc8:	4413      	add	r3, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe f8ec 	bl	8005ea8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	607b      	str	r3, [r7, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b37      	cmp	r3, #55	@ 0x37
 8007cda:	d9ef      	bls.n	8007cbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cdc:	480d      	ldr	r0, [pc, #52]	@ (8007d14 <prvInitialiseTaskLists+0x64>)
 8007cde:	f7fe f8e3 	bl	8005ea8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ce2:	480d      	ldr	r0, [pc, #52]	@ (8007d18 <prvInitialiseTaskLists+0x68>)
 8007ce4:	f7fe f8e0 	bl	8005ea8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ce8:	480c      	ldr	r0, [pc, #48]	@ (8007d1c <prvInitialiseTaskLists+0x6c>)
 8007cea:	f7fe f8dd 	bl	8005ea8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cee:	480c      	ldr	r0, [pc, #48]	@ (8007d20 <prvInitialiseTaskLists+0x70>)
 8007cf0:	f7fe f8da 	bl	8005ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cf4:	480b      	ldr	r0, [pc, #44]	@ (8007d24 <prvInitialiseTaskLists+0x74>)
 8007cf6:	f7fe f8d7 	bl	8005ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007d28 <prvInitialiseTaskLists+0x78>)
 8007cfc:	4a05      	ldr	r2, [pc, #20]	@ (8007d14 <prvInitialiseTaskLists+0x64>)
 8007cfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d00:	4b0a      	ldr	r3, [pc, #40]	@ (8007d2c <prvInitialiseTaskLists+0x7c>)
 8007d02:	4a05      	ldr	r2, [pc, #20]	@ (8007d18 <prvInitialiseTaskLists+0x68>)
 8007d04:	601a      	str	r2, [r3, #0]
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000f74 	.word	0x20000f74
 8007d14:	200013d4 	.word	0x200013d4
 8007d18:	200013e8 	.word	0x200013e8
 8007d1c:	20001404 	.word	0x20001404
 8007d20:	20001418 	.word	0x20001418
 8007d24:	20001430 	.word	0x20001430
 8007d28:	200013fc 	.word	0x200013fc
 8007d2c:	20001400 	.word	0x20001400

08007d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d36:	e019      	b.n	8007d6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d38:	f000 fef6 	bl	8008b28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3c:	4b10      	ldr	r3, [pc, #64]	@ (8007d80 <prvCheckTasksWaitingTermination+0x50>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fe f937 	bl	8005fbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <prvCheckTasksWaitingTermination+0x54>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	4a0b      	ldr	r2, [pc, #44]	@ (8007d84 <prvCheckTasksWaitingTermination+0x54>)
 8007d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d58:	4b0b      	ldr	r3, [pc, #44]	@ (8007d88 <prvCheckTasksWaitingTermination+0x58>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d88 <prvCheckTasksWaitingTermination+0x58>)
 8007d60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d62:	f000 ff13 	bl	8008b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f810 	bl	8007d8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d6c:	4b06      	ldr	r3, [pc, #24]	@ (8007d88 <prvCheckTasksWaitingTermination+0x58>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e1      	bne.n	8007d38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20001418 	.word	0x20001418
 8007d84:	20001444 	.word	0x20001444
 8007d88:	2000142c 	.word	0x2000142c

08007d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d108      	bne.n	8007db0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 f8b0 	bl	8008f08 <vPortFree>
				vPortFree( pxTCB );
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 f8ad 	bl	8008f08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dae:	e019      	b.n	8007de4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d103      	bne.n	8007dc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 f8a4 	bl	8008f08 <vPortFree>
	}
 8007dc0:	e010      	b.n	8007de4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d00b      	beq.n	8007de4 <prvDeleteTCB+0x58>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60fb      	str	r3, [r7, #12]
}
 8007dde:	bf00      	nop
 8007de0:	bf00      	nop
 8007de2:	e7fd      	b.n	8007de0 <prvDeleteTCB+0x54>
	}
 8007de4:	bf00      	nop
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007df2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e24 <prvResetNextTaskUnblockTime+0x38>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007e28 <prvResetNextTaskUnblockTime+0x3c>)
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e04:	e008      	b.n	8007e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e06:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <prvResetNextTaskUnblockTime+0x38>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	4a04      	ldr	r2, [pc, #16]	@ (8007e28 <prvResetNextTaskUnblockTime+0x3c>)
 8007e16:	6013      	str	r3, [r2, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	200013fc 	.word	0x200013fc
 8007e28:	20001464 	.word	0x20001464

08007e2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007e32:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <xTaskGetCurrentTaskHandle+0x1c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007e38:	687b      	ldr	r3, [r7, #4]
	}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	20000f70 	.word	0x20000f70

08007e4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e52:	4b0b      	ldr	r3, [pc, #44]	@ (8007e80 <xTaskGetSchedulerState+0x34>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	e008      	b.n	8007e72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e60:	4b08      	ldr	r3, [pc, #32]	@ (8007e84 <xTaskGetSchedulerState+0x38>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	607b      	str	r3, [r7, #4]
 8007e6c:	e001      	b.n	8007e72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e72:	687b      	ldr	r3, [r7, #4]
	}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20001450 	.word	0x20001450
 8007e84:	2000146c 	.word	0x2000146c

08007e88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d051      	beq.n	8007f42 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8007f4c <xTaskPriorityInherit+0xc4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d241      	bcs.n	8007f30 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	db06      	blt.n	8007ec2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb4:	4b25      	ldr	r3, [pc, #148]	@ (8007f4c <xTaskPriorityInherit+0xc4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	6959      	ldr	r1, [r3, #20]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8007f50 <xTaskPriorityInherit+0xc8>)
 8007ed4:	4413      	add	r3, r2
 8007ed6:	4299      	cmp	r1, r3
 8007ed8:	d122      	bne.n	8007f20 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe f86c 	bl	8005fbc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ee4:	4b19      	ldr	r3, [pc, #100]	@ (8007f4c <xTaskPriorityInherit+0xc4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef2:	4b18      	ldr	r3, [pc, #96]	@ (8007f54 <xTaskPriorityInherit+0xcc>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d903      	bls.n	8007f02 <xTaskPriorityInherit+0x7a>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007efe:	4a15      	ldr	r2, [pc, #84]	@ (8007f54 <xTaskPriorityInherit+0xcc>)
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4a10      	ldr	r2, [pc, #64]	@ (8007f50 <xTaskPriorityInherit+0xc8>)
 8007f10:	441a      	add	r2, r3
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4619      	mov	r1, r3
 8007f18:	4610      	mov	r0, r2
 8007f1a:	f7fd fff2 	bl	8005f02 <vListInsertEnd>
 8007f1e:	e004      	b.n	8007f2a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f20:	4b0a      	ldr	r3, [pc, #40]	@ (8007f4c <xTaskPriorityInherit+0xc4>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e008      	b.n	8007f42 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f34:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <xTaskPriorityInherit+0xc4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d201      	bcs.n	8007f42 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f42:	68fb      	ldr	r3, [r7, #12]
	}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20000f70 	.word	0x20000f70
 8007f50:	20000f74 	.word	0x20000f74
 8007f54:	2000144c 	.word	0x2000144c

08007f58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d058      	beq.n	8008020 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800802c <xTaskPriorityDisinherit+0xd4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d00b      	beq.n	8007f90 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	60fb      	str	r3, [r7, #12]
}
 8007f8a:	bf00      	nop
 8007f8c:	bf00      	nop
 8007f8e:	e7fd      	b.n	8007f8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10b      	bne.n	8007fb0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	60bb      	str	r3, [r7, #8]
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	e7fd      	b.n	8007fac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb4:	1e5a      	subs	r2, r3, #1
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d02c      	beq.n	8008020 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d128      	bne.n	8008020 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fd fff2 	bl	8005fbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8008030 <xTaskPriorityDisinherit+0xd8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d903      	bls.n	8008000 <xTaskPriorityDisinherit+0xa8>
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8008030 <xTaskPriorityDisinherit+0xd8>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a09      	ldr	r2, [pc, #36]	@ (8008034 <xTaskPriorityDisinherit+0xdc>)
 800800e:	441a      	add	r2, r3
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fd ff73 	bl	8005f02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800801c:	2301      	movs	r3, #1
 800801e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008020:	697b      	ldr	r3, [r7, #20]
	}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000f70 	.word	0x20000f70
 8008030:	2000144c 	.word	0x2000144c
 8008034:	20000f74 	.word	0x20000f74

08008038 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008046:	2301      	movs	r3, #1
 8008048:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d06c      	beq.n	800812a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10b      	bne.n	8008070 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	60fb      	str	r3, [r7, #12]
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	e7fd      	b.n	800806c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d902      	bls.n	8008080 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	e002      	b.n	8008086 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008084:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	429a      	cmp	r2, r3
 800808e:	d04c      	beq.n	800812a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	429a      	cmp	r2, r3
 8008098:	d147      	bne.n	800812a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800809a:	4b26      	ldr	r3, [pc, #152]	@ (8008134 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d10b      	bne.n	80080bc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	60bb      	str	r3, [r7, #8]
}
 80080b6:	bf00      	nop
 80080b8:	bf00      	nop
 80080ba:	e7fd      	b.n	80080b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	69fa      	ldr	r2, [r7, #28]
 80080c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	db04      	blt.n	80080da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	6959      	ldr	r1, [r3, #20]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4a13      	ldr	r2, [pc, #76]	@ (8008138 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80080ea:	4413      	add	r3, r2
 80080ec:	4299      	cmp	r1, r3
 80080ee:	d11c      	bne.n	800812a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fd ff61 	bl	8005fbc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080fe:	4b0f      	ldr	r3, [pc, #60]	@ (800813c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d903      	bls.n	800810e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810a:	4a0c      	ldr	r2, [pc, #48]	@ (800813c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4a07      	ldr	r2, [pc, #28]	@ (8008138 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800811c:	441a      	add	r2, r3
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	3304      	adds	r3, #4
 8008122:	4619      	mov	r1, r3
 8008124:	4610      	mov	r0, r2
 8008126:	f7fd feec 	bl	8005f02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800812a:	bf00      	nop
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20000f70 	.word	0x20000f70
 8008138:	20000f74 	.word	0x20000f74
 800813c:	2000144c 	.word	0x2000144c

08008140 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008144:	4b07      	ldr	r3, [pc, #28]	@ (8008164 <pvTaskIncrementMutexHeldCount+0x24>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d004      	beq.n	8008156 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800814c:	4b05      	ldr	r3, [pc, #20]	@ (8008164 <pvTaskIncrementMutexHeldCount+0x24>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008152:	3201      	adds	r2, #1
 8008154:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008156:	4b03      	ldr	r3, [pc, #12]	@ (8008164 <pvTaskIncrementMutexHeldCount+0x24>)
 8008158:	681b      	ldr	r3, [r3, #0]
	}
 800815a:	4618      	mov	r0, r3
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	20000f70 	.word	0x20000f70

08008168 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008172:	4b21      	ldr	r3, [pc, #132]	@ (80081f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008178:	4b20      	ldr	r3, [pc, #128]	@ (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3304      	adds	r3, #4
 800817e:	4618      	mov	r0, r3
 8008180:	f7fd ff1c 	bl	8005fbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818a:	d10a      	bne.n	80081a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d007      	beq.n	80081a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008192:	4b1a      	ldr	r3, [pc, #104]	@ (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4819      	ldr	r0, [pc, #100]	@ (8008200 <prvAddCurrentTaskToDelayedList+0x98>)
 800819c:	f7fd feb1 	bl	8005f02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081a0:	e026      	b.n	80081f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4413      	add	r3, r2
 80081a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081aa:	4b14      	ldr	r3, [pc, #80]	@ (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d209      	bcs.n	80081ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ba:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4b0f      	ldr	r3, [pc, #60]	@ (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fd febf 	bl	8005f4a <vListInsert>
}
 80081cc:	e010      	b.n	80081f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008208 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b0a      	ldr	r3, [pc, #40]	@ (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3304      	adds	r3, #4
 80081d8:	4619      	mov	r1, r3
 80081da:	4610      	mov	r0, r2
 80081dc:	f7fd feb5 	bl	8005f4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081e0:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <prvAddCurrentTaskToDelayedList+0xa4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d202      	bcs.n	80081f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081ea:	4a08      	ldr	r2, [pc, #32]	@ (800820c <prvAddCurrentTaskToDelayedList+0xa4>)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	6013      	str	r3, [r2, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20001448 	.word	0x20001448
 80081fc:	20000f70 	.word	0x20000f70
 8008200:	20001430 	.word	0x20001430
 8008204:	20001400 	.word	0x20001400
 8008208:	200013fc 	.word	0x200013fc
 800820c:	20001464 	.word	0x20001464

08008210 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08a      	sub	sp, #40	@ 0x28
 8008214:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800821a:	f000 fb13 	bl	8008844 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800821e:	4b1d      	ldr	r3, [pc, #116]	@ (8008294 <xTimerCreateTimerTask+0x84>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d021      	beq.n	800826a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800822e:	1d3a      	adds	r2, r7, #4
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	f107 030c 	add.w	r3, r7, #12
 8008238:	4618      	mov	r0, r3
 800823a:	f7fd fe1b 	bl	8005e74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	9202      	str	r2, [sp, #8]
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	2302      	movs	r3, #2
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	2300      	movs	r3, #0
 800824e:	460a      	mov	r2, r1
 8008250:	4911      	ldr	r1, [pc, #68]	@ (8008298 <xTimerCreateTimerTask+0x88>)
 8008252:	4812      	ldr	r0, [pc, #72]	@ (800829c <xTimerCreateTimerTask+0x8c>)
 8008254:	f7fe ffc0 	bl	80071d8 <xTaskCreateStatic>
 8008258:	4603      	mov	r3, r0
 800825a:	4a11      	ldr	r2, [pc, #68]	@ (80082a0 <xTimerCreateTimerTask+0x90>)
 800825c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800825e:	4b10      	ldr	r3, [pc, #64]	@ (80082a0 <xTimerCreateTimerTask+0x90>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008266:	2301      	movs	r3, #1
 8008268:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10b      	bne.n	8008288 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	613b      	str	r3, [r7, #16]
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	e7fd      	b.n	8008284 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008288:	697b      	ldr	r3, [r7, #20]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200014a0 	.word	0x200014a0
 8008298:	08009bc4 	.word	0x08009bc4
 800829c:	080083dd 	.word	0x080083dd
 80082a0:	200014a4 	.word	0x200014a4

080082a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	@ 0x28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10b      	bne.n	80082d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	623b      	str	r3, [r7, #32]
}
 80082ce:	bf00      	nop
 80082d0:	bf00      	nop
 80082d2:	e7fd      	b.n	80082d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082d4:	4b19      	ldr	r3, [pc, #100]	@ (800833c <xTimerGenericCommand+0x98>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d02a      	beq.n	8008332 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	dc18      	bgt.n	8008320 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082ee:	f7ff fdad 	bl	8007e4c <xTaskGetSchedulerState>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d109      	bne.n	800830c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082f8:	4b10      	ldr	r3, [pc, #64]	@ (800833c <xTimerGenericCommand+0x98>)
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	f107 0110 	add.w	r1, r7, #16
 8008300:	2300      	movs	r3, #0
 8008302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008304:	f7fe f8f0 	bl	80064e8 <xQueueGenericSend>
 8008308:	6278      	str	r0, [r7, #36]	@ 0x24
 800830a:	e012      	b.n	8008332 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800830c:	4b0b      	ldr	r3, [pc, #44]	@ (800833c <xTimerGenericCommand+0x98>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	f107 0110 	add.w	r1, r7, #16
 8008314:	2300      	movs	r3, #0
 8008316:	2200      	movs	r2, #0
 8008318:	f7fe f8e6 	bl	80064e8 <xQueueGenericSend>
 800831c:	6278      	str	r0, [r7, #36]	@ 0x24
 800831e:	e008      	b.n	8008332 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008320:	4b06      	ldr	r3, [pc, #24]	@ (800833c <xTimerGenericCommand+0x98>)
 8008322:	6818      	ldr	r0, [r3, #0]
 8008324:	f107 0110 	add.w	r1, r7, #16
 8008328:	2300      	movs	r3, #0
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	f7fe f9de 	bl	80066ec <xQueueGenericSendFromISR>
 8008330:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008334:	4618      	mov	r0, r3
 8008336:	3728      	adds	r7, #40	@ 0x28
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	200014a0 	.word	0x200014a0

08008340 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af02      	add	r7, sp, #8
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800834a:	4b23      	ldr	r3, [pc, #140]	@ (80083d8 <prvProcessExpiredTimer+0x98>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	3304      	adds	r3, #4
 8008358:	4618      	mov	r0, r3
 800835a:	f7fd fe2f 	bl	8005fbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d023      	beq.n	80083b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	18d1      	adds	r1, r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	6978      	ldr	r0, [r7, #20]
 800837a:	f000 f8d5 	bl	8008528 <prvInsertTimerInActiveList>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d020      	beq.n	80083c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008384:	2300      	movs	r3, #0
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	2300      	movs	r3, #0
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	2100      	movs	r1, #0
 800838e:	6978      	ldr	r0, [r7, #20]
 8008390:	f7ff ff88 	bl	80082a4 <xTimerGenericCommand>
 8008394:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d114      	bne.n	80083c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	60fb      	str	r3, [r7, #12]
}
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	e7fd      	b.n	80083b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ba:	f023 0301 	bic.w	r3, r3, #1
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	6978      	ldr	r0, [r7, #20]
 80083cc:	4798      	blx	r3
}
 80083ce:	bf00      	nop
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20001498 	.word	0x20001498

080083dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 f859 	bl	80084a0 <prvGetNextExpireTime>
 80083ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4619      	mov	r1, r3
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 f805 	bl	8008404 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083fa:	f000 f8d7 	bl	80085ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083fe:	bf00      	nop
 8008400:	e7f0      	b.n	80083e4 <prvTimerTask+0x8>
	...

08008404 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800840e:	f7ff f927 	bl	8007660 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008412:	f107 0308 	add.w	r3, r7, #8
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f866 	bl	80084e8 <prvSampleTimeNow>
 800841c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d130      	bne.n	8008486 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <prvProcessTimerOrBlockTask+0x3c>
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	429a      	cmp	r2, r3
 8008430:	d806      	bhi.n	8008440 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008432:	f7ff f923 	bl	800767c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff ff81 	bl	8008340 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800843e:	e024      	b.n	800848a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d008      	beq.n	8008458 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008446:	4b13      	ldr	r3, [pc, #76]	@ (8008494 <prvProcessTimerOrBlockTask+0x90>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <prvProcessTimerOrBlockTask+0x50>
 8008450:	2301      	movs	r3, #1
 8008452:	e000      	b.n	8008456 <prvProcessTimerOrBlockTask+0x52>
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008458:	4b0f      	ldr	r3, [pc, #60]	@ (8008498 <prvProcessTimerOrBlockTask+0x94>)
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4619      	mov	r1, r3
 8008466:	f7fe fe83 	bl	8007170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800846a:	f7ff f907 	bl	800767c <xTaskResumeAll>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008474:	4b09      	ldr	r3, [pc, #36]	@ (800849c <prvProcessTimerOrBlockTask+0x98>)
 8008476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	f3bf 8f6f 	isb	sy
}
 8008484:	e001      	b.n	800848a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008486:	f7ff f8f9 	bl	800767c <xTaskResumeAll>
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	2000149c 	.word	0x2000149c
 8008498:	200014a0 	.word	0x200014a0
 800849c:	e000ed04 	.word	0xe000ed04

080084a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084a8:	4b0e      	ldr	r3, [pc, #56]	@ (80084e4 <prvGetNextExpireTime+0x44>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <prvGetNextExpireTime+0x16>
 80084b2:	2201      	movs	r2, #1
 80084b4:	e000      	b.n	80084b8 <prvGetNextExpireTime+0x18>
 80084b6:	2200      	movs	r2, #0
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d105      	bne.n	80084d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084c4:	4b07      	ldr	r3, [pc, #28]	@ (80084e4 <prvGetNextExpireTime+0x44>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	e001      	b.n	80084d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084d4:	68fb      	ldr	r3, [r7, #12]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20001498 	.word	0x20001498

080084e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084f0:	f7ff f962 	bl	80077b8 <xTaskGetTickCount>
 80084f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008524 <prvSampleTimeNow+0x3c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d205      	bcs.n	800850c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008500:	f000 f93a 	bl	8008778 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	e002      	b.n	8008512 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008512:	4a04      	ldr	r2, [pc, #16]	@ (8008524 <prvSampleTimeNow+0x3c>)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008518:	68fb      	ldr	r3, [r7, #12]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200014a8 	.word	0x200014a8

08008528 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	429a      	cmp	r2, r3
 800854c:	d812      	bhi.n	8008574 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	1ad2      	subs	r2, r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	429a      	cmp	r2, r3
 800855a:	d302      	bcc.n	8008562 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800855c:	2301      	movs	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	e01b      	b.n	800859a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008562:	4b10      	ldr	r3, [pc, #64]	@ (80085a4 <prvInsertTimerInActiveList+0x7c>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3304      	adds	r3, #4
 800856a:	4619      	mov	r1, r3
 800856c:	4610      	mov	r0, r2
 800856e:	f7fd fcec 	bl	8005f4a <vListInsert>
 8008572:	e012      	b.n	800859a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	d206      	bcs.n	800858a <prvInsertTimerInActiveList+0x62>
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d302      	bcc.n	800858a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	e007      	b.n	800859a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800858a:	4b07      	ldr	r3, [pc, #28]	@ (80085a8 <prvInsertTimerInActiveList+0x80>)
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3304      	adds	r3, #4
 8008592:	4619      	mov	r1, r3
 8008594:	4610      	mov	r0, r2
 8008596:	f7fd fcd8 	bl	8005f4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800859a:	697b      	ldr	r3, [r7, #20]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	2000149c 	.word	0x2000149c
 80085a8:	20001498 	.word	0x20001498

080085ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08e      	sub	sp, #56	@ 0x38
 80085b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085b2:	e0ce      	b.n	8008752 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	da19      	bge.n	80085ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085ba:	1d3b      	adds	r3, r7, #4
 80085bc:	3304      	adds	r3, #4
 80085be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <prvProcessReceivedCommands+0x32>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	61fb      	str	r3, [r7, #28]
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	e7fd      	b.n	80085da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085e4:	6850      	ldr	r0, [r2, #4]
 80085e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085e8:	6892      	ldr	r2, [r2, #8]
 80085ea:	4611      	mov	r1, r2
 80085ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f2c0 80ae 	blt.w	8008752 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008604:	3304      	adds	r3, #4
 8008606:	4618      	mov	r0, r3
 8008608:	f7fd fcd8 	bl	8005fbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800860c:	463b      	mov	r3, r7
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff ff6a 	bl	80084e8 <prvSampleTimeNow>
 8008614:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b09      	cmp	r3, #9
 800861a:	f200 8097 	bhi.w	800874c <prvProcessReceivedCommands+0x1a0>
 800861e:	a201      	add	r2, pc, #4	@ (adr r2, 8008624 <prvProcessReceivedCommands+0x78>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	0800864d 	.word	0x0800864d
 8008628:	0800864d 	.word	0x0800864d
 800862c:	0800864d 	.word	0x0800864d
 8008630:	080086c3 	.word	0x080086c3
 8008634:	080086d7 	.word	0x080086d7
 8008638:	08008723 	.word	0x08008723
 800863c:	0800864d 	.word	0x0800864d
 8008640:	0800864d 	.word	0x0800864d
 8008644:	080086c3 	.word	0x080086c3
 8008648:	080086d7 	.word	0x080086d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800864c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	b2da      	uxtb	r2, r3
 8008658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	18d1      	adds	r1, r2, r3
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800866a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800866c:	f7ff ff5c 	bl	8008528 <prvInsertTimerInActiveList>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d06c      	beq.n	8008750 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800867c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800867e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d061      	beq.n	8008750 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	441a      	add	r2, r3
 8008694:	2300      	movs	r3, #0
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	2300      	movs	r3, #0
 800869a:	2100      	movs	r1, #0
 800869c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800869e:	f7ff fe01 	bl	80082a4 <xTimerGenericCommand>
 80086a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d152      	bne.n	8008750 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	61bb      	str	r3, [r7, #24]
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	e7fd      	b.n	80086be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086c8:	f023 0301 	bic.w	r3, r3, #1
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80086d4:	e03d      	b.n	8008752 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086dc:	f043 0301 	orr.w	r3, r3, #1
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <prvProcessReceivedCommands+0x162>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	617b      	str	r3, [r7, #20]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008710:	699a      	ldr	r2, [r3, #24]
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	18d1      	adds	r1, r2, r3
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800871a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800871c:	f7ff ff04 	bl	8008528 <prvInsertTimerInActiveList>
					break;
 8008720:	e017      	b.n	8008752 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008732:	f000 fbe9 	bl	8008f08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008736:	e00c      	b.n	8008752 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	b2da      	uxtb	r2, r3
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800874a:	e002      	b.n	8008752 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800874c:	bf00      	nop
 800874e:	e000      	b.n	8008752 <prvProcessReceivedCommands+0x1a6>
					break;
 8008750:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008752:	4b08      	ldr	r3, [pc, #32]	@ (8008774 <prvProcessReceivedCommands+0x1c8>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	1d39      	adds	r1, r7, #4
 8008758:	2200      	movs	r2, #0
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe f8f4 	bl	8006948 <xQueueReceive>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	f47f af26 	bne.w	80085b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	3730      	adds	r7, #48	@ 0x30
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	200014a0 	.word	0x200014a0

08008778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800877e:	e049      	b.n	8008814 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008780:	4b2e      	ldr	r3, [pc, #184]	@ (800883c <prvSwitchTimerLists+0xc4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800878a:	4b2c      	ldr	r3, [pc, #176]	@ (800883c <prvSwitchTimerLists+0xc4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3304      	adds	r3, #4
 8008798:	4618      	mov	r0, r3
 800879a:	f7fd fc0f 	bl	8005fbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d02f      	beq.n	8008814 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	4413      	add	r3, r2
 80087bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d90e      	bls.n	80087e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087d2:	4b1a      	ldr	r3, [pc, #104]	@ (800883c <prvSwitchTimerLists+0xc4>)
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3304      	adds	r3, #4
 80087da:	4619      	mov	r1, r3
 80087dc:	4610      	mov	r0, r2
 80087de:	f7fd fbb4 	bl	8005f4a <vListInsert>
 80087e2:	e017      	b.n	8008814 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087e4:	2300      	movs	r3, #0
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	2300      	movs	r3, #0
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	2100      	movs	r1, #0
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff fd58 	bl	80082a4 <xTimerGenericCommand>
 80087f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	603b      	str	r3, [r7, #0]
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	e7fd      	b.n	8008810 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008814:	4b09      	ldr	r3, [pc, #36]	@ (800883c <prvSwitchTimerLists+0xc4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1b0      	bne.n	8008780 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800881e:	4b07      	ldr	r3, [pc, #28]	@ (800883c <prvSwitchTimerLists+0xc4>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008824:	4b06      	ldr	r3, [pc, #24]	@ (8008840 <prvSwitchTimerLists+0xc8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a04      	ldr	r2, [pc, #16]	@ (800883c <prvSwitchTimerLists+0xc4>)
 800882a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800882c:	4a04      	ldr	r2, [pc, #16]	@ (8008840 <prvSwitchTimerLists+0xc8>)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	6013      	str	r3, [r2, #0]
}
 8008832:	bf00      	nop
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20001498 	.word	0x20001498
 8008840:	2000149c 	.word	0x2000149c

08008844 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800884a:	f000 f96d 	bl	8008b28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800884e:	4b15      	ldr	r3, [pc, #84]	@ (80088a4 <prvCheckForValidListAndQueue+0x60>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d120      	bne.n	8008898 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008856:	4814      	ldr	r0, [pc, #80]	@ (80088a8 <prvCheckForValidListAndQueue+0x64>)
 8008858:	f7fd fb26 	bl	8005ea8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800885c:	4813      	ldr	r0, [pc, #76]	@ (80088ac <prvCheckForValidListAndQueue+0x68>)
 800885e:	f7fd fb23 	bl	8005ea8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008862:	4b13      	ldr	r3, [pc, #76]	@ (80088b0 <prvCheckForValidListAndQueue+0x6c>)
 8008864:	4a10      	ldr	r2, [pc, #64]	@ (80088a8 <prvCheckForValidListAndQueue+0x64>)
 8008866:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008868:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <prvCheckForValidListAndQueue+0x70>)
 800886a:	4a10      	ldr	r2, [pc, #64]	@ (80088ac <prvCheckForValidListAndQueue+0x68>)
 800886c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800886e:	2300      	movs	r3, #0
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	4b11      	ldr	r3, [pc, #68]	@ (80088b8 <prvCheckForValidListAndQueue+0x74>)
 8008874:	4a11      	ldr	r2, [pc, #68]	@ (80088bc <prvCheckForValidListAndQueue+0x78>)
 8008876:	2110      	movs	r1, #16
 8008878:	200a      	movs	r0, #10
 800887a:	f7fd fc33 	bl	80060e4 <xQueueGenericCreateStatic>
 800887e:	4603      	mov	r3, r0
 8008880:	4a08      	ldr	r2, [pc, #32]	@ (80088a4 <prvCheckForValidListAndQueue+0x60>)
 8008882:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008884:	4b07      	ldr	r3, [pc, #28]	@ (80088a4 <prvCheckForValidListAndQueue+0x60>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d005      	beq.n	8008898 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800888c:	4b05      	ldr	r3, [pc, #20]	@ (80088a4 <prvCheckForValidListAndQueue+0x60>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	490b      	ldr	r1, [pc, #44]	@ (80088c0 <prvCheckForValidListAndQueue+0x7c>)
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fc18 	bl	80070c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008898:	f000 f978 	bl	8008b8c <vPortExitCritical>
}
 800889c:	bf00      	nop
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	200014a0 	.word	0x200014a0
 80088a8:	20001470 	.word	0x20001470
 80088ac:	20001484 	.word	0x20001484
 80088b0:	20001498 	.word	0x20001498
 80088b4:	2000149c 	.word	0x2000149c
 80088b8:	2000154c 	.word	0x2000154c
 80088bc:	200014ac 	.word	0x200014ac
 80088c0:	08009bcc 	.word	0x08009bcc

080088c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3b04      	subs	r3, #4
 80088d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80088dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3b04      	subs	r3, #4
 80088e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f023 0201 	bic.w	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3b04      	subs	r3, #4
 80088f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008928 <pxPortInitialiseStack+0x64>)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3b14      	subs	r3, #20
 80088fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3b04      	subs	r3, #4
 800890a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f06f 0202 	mvn.w	r2, #2
 8008912:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3b20      	subs	r3, #32
 8008918:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800891a:	68fb      	ldr	r3, [r7, #12]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	0800892d 	.word	0x0800892d

0800892c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008936:	4b13      	ldr	r3, [pc, #76]	@ (8008984 <prvTaskExitError+0x58>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d00b      	beq.n	8008958 <prvTaskExitError+0x2c>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60fb      	str	r3, [r7, #12]
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <prvTaskExitError+0x28>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	60bb      	str	r3, [r7, #8]
}
 800896a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800896c:	bf00      	nop
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0fc      	beq.n	800896e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20000010 	.word	0x20000010
	...

08008990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008990:	4b07      	ldr	r3, [pc, #28]	@ (80089b0 <pxCurrentTCBConst2>)
 8008992:	6819      	ldr	r1, [r3, #0]
 8008994:	6808      	ldr	r0, [r1, #0]
 8008996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899a:	f380 8809 	msr	PSP, r0
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f04f 0000 	mov.w	r0, #0
 80089a6:	f380 8811 	msr	BASEPRI, r0
 80089aa:	4770      	bx	lr
 80089ac:	f3af 8000 	nop.w

080089b0 <pxCurrentTCBConst2>:
 80089b0:	20000f70 	.word	0x20000f70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop

080089b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089b8:	4808      	ldr	r0, [pc, #32]	@ (80089dc <prvPortStartFirstTask+0x24>)
 80089ba:	6800      	ldr	r0, [r0, #0]
 80089bc:	6800      	ldr	r0, [r0, #0]
 80089be:	f380 8808 	msr	MSP, r0
 80089c2:	f04f 0000 	mov.w	r0, #0
 80089c6:	f380 8814 	msr	CONTROL, r0
 80089ca:	b662      	cpsie	i
 80089cc:	b661      	cpsie	f
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	df00      	svc	0
 80089d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089da:	bf00      	nop
 80089dc:	e000ed08 	.word	0xe000ed08

080089e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089e6:	4b47      	ldr	r3, [pc, #284]	@ (8008b04 <xPortStartScheduler+0x124>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a47      	ldr	r2, [pc, #284]	@ (8008b08 <xPortStartScheduler+0x128>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d10b      	bne.n	8008a08 <xPortStartScheduler+0x28>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	613b      	str	r3, [r7, #16]
}
 8008a02:	bf00      	nop
 8008a04:	bf00      	nop
 8008a06:	e7fd      	b.n	8008a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a08:	4b3e      	ldr	r3, [pc, #248]	@ (8008b04 <xPortStartScheduler+0x124>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b0c <xPortStartScheduler+0x12c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d10b      	bne.n	8008a2a <xPortStartScheduler+0x4a>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	60fb      	str	r3, [r7, #12]
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop
 8008a28:	e7fd      	b.n	8008a26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a2a:	4b39      	ldr	r3, [pc, #228]	@ (8008b10 <xPortStartScheduler+0x130>)
 8008a2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	22ff      	movs	r2, #255	@ 0xff
 8008a3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	4b31      	ldr	r3, [pc, #196]	@ (8008b14 <xPortStartScheduler+0x134>)
 8008a50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a52:	4b31      	ldr	r3, [pc, #196]	@ (8008b18 <xPortStartScheduler+0x138>)
 8008a54:	2207      	movs	r2, #7
 8008a56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a58:	e009      	b.n	8008a6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b18 <xPortStartScheduler+0x138>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	4a2d      	ldr	r2, [pc, #180]	@ (8008b18 <xPortStartScheduler+0x138>)
 8008a62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a64:	78fb      	ldrb	r3, [r7, #3]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a6e:	78fb      	ldrb	r3, [r7, #3]
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a76:	2b80      	cmp	r3, #128	@ 0x80
 8008a78:	d0ef      	beq.n	8008a5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a7a:	4b27      	ldr	r3, [pc, #156]	@ (8008b18 <xPortStartScheduler+0x138>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f1c3 0307 	rsb	r3, r3, #7
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d00b      	beq.n	8008a9e <xPortStartScheduler+0xbe>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	60bb      	str	r3, [r7, #8]
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	e7fd      	b.n	8008a9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b18 <xPortStartScheduler+0x138>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b18 <xPortStartScheduler+0x138>)
 8008aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8008b18 <xPortStartScheduler+0x138>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ab0:	4a19      	ldr	r2, [pc, #100]	@ (8008b18 <xPortStartScheduler+0x138>)
 8008ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008abc:	4b17      	ldr	r3, [pc, #92]	@ (8008b1c <xPortStartScheduler+0x13c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a16      	ldr	r2, [pc, #88]	@ (8008b1c <xPortStartScheduler+0x13c>)
 8008ac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ac8:	4b14      	ldr	r3, [pc, #80]	@ (8008b1c <xPortStartScheduler+0x13c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a13      	ldr	r2, [pc, #76]	@ (8008b1c <xPortStartScheduler+0x13c>)
 8008ace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ad4:	f000 f8da 	bl	8008c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ad8:	4b11      	ldr	r3, [pc, #68]	@ (8008b20 <xPortStartScheduler+0x140>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ade:	f000 f8f9 	bl	8008cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ae2:	4b10      	ldr	r3, [pc, #64]	@ (8008b24 <xPortStartScheduler+0x144>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8008b24 <xPortStartScheduler+0x144>)
 8008ae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008aec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008aee:	f7ff ff63 	bl	80089b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008af2:	f7fe ff2b 	bl	800794c <vTaskSwitchContext>
	prvTaskExitError();
 8008af6:	f7ff ff19 	bl	800892c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	e000ed00 	.word	0xe000ed00
 8008b08:	410fc271 	.word	0x410fc271
 8008b0c:	410fc270 	.word	0x410fc270
 8008b10:	e000e400 	.word	0xe000e400
 8008b14:	2000159c 	.word	0x2000159c
 8008b18:	200015a0 	.word	0x200015a0
 8008b1c:	e000ed20 	.word	0xe000ed20
 8008b20:	20000010 	.word	0x20000010
 8008b24:	e000ef34 	.word	0xe000ef34

08008b28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	607b      	str	r3, [r7, #4]
}
 8008b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b42:	4b10      	ldr	r3, [pc, #64]	@ (8008b84 <vPortEnterCritical+0x5c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3301      	adds	r3, #1
 8008b48:	4a0e      	ldr	r2, [pc, #56]	@ (8008b84 <vPortEnterCritical+0x5c>)
 8008b4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b84 <vPortEnterCritical+0x5c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d110      	bne.n	8008b76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b54:	4b0c      	ldr	r3, [pc, #48]	@ (8008b88 <vPortEnterCritical+0x60>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00b      	beq.n	8008b76 <vPortEnterCritical+0x4e>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	603b      	str	r3, [r7, #0]
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	e7fd      	b.n	8008b72 <vPortEnterCritical+0x4a>
	}
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000010 	.word	0x20000010
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b92:	4b12      	ldr	r3, [pc, #72]	@ (8008bdc <vPortExitCritical+0x50>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10b      	bne.n	8008bb2 <vPortExitCritical+0x26>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	607b      	str	r3, [r7, #4]
}
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	e7fd      	b.n	8008bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bdc <vPortExitCritical+0x50>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	4a08      	ldr	r2, [pc, #32]	@ (8008bdc <vPortExitCritical+0x50>)
 8008bba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bbc:	4b07      	ldr	r3, [pc, #28]	@ (8008bdc <vPortExitCritical+0x50>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d105      	bne.n	8008bd0 <vPortExitCritical+0x44>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f383 8811 	msr	BASEPRI, r3
}
 8008bce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	20000010 	.word	0x20000010

08008be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008be0:	f3ef 8009 	mrs	r0, PSP
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4b15      	ldr	r3, [pc, #84]	@ (8008c40 <pxCurrentTCBConst>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	f01e 0f10 	tst.w	lr, #16
 8008bf0:	bf08      	it	eq
 8008bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfa:	6010      	str	r0, [r2, #0]
 8008bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c04:	f380 8811 	msr	BASEPRI, r0
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f7fe fe9c 	bl	800794c <vTaskSwitchContext>
 8008c14:	f04f 0000 	mov.w	r0, #0
 8008c18:	f380 8811 	msr	BASEPRI, r0
 8008c1c:	bc09      	pop	{r0, r3}
 8008c1e:	6819      	ldr	r1, [r3, #0]
 8008c20:	6808      	ldr	r0, [r1, #0]
 8008c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c26:	f01e 0f10 	tst.w	lr, #16
 8008c2a:	bf08      	it	eq
 8008c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c30:	f380 8809 	msr	PSP, r0
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	f3af 8000 	nop.w

08008c40 <pxCurrentTCBConst>:
 8008c40:	20000f70 	.word	0x20000f70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop

08008c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	607b      	str	r3, [r7, #4]
}
 8008c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c62:	f7fe fdb9 	bl	80077d8 <xTaskIncrementTick>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c6c:	4b06      	ldr	r3, [pc, #24]	@ (8008c88 <xPortSysTickHandler+0x40>)
 8008c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	2300      	movs	r3, #0
 8008c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	f383 8811 	msr	BASEPRI, r3
}
 8008c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	e000ed04 	.word	0xe000ed04

08008c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c90:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc0 <vPortSetupTimerInterrupt+0x34>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c96:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc4 <vPortSetupTimerInterrupt+0x38>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <vPortSetupTimerInterrupt+0x3c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8008ccc <vPortSetupTimerInterrupt+0x40>)
 8008ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca6:	099b      	lsrs	r3, r3, #6
 8008ca8:	4a09      	ldr	r2, [pc, #36]	@ (8008cd0 <vPortSetupTimerInterrupt+0x44>)
 8008caa:	3b01      	subs	r3, #1
 8008cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cae:	4b04      	ldr	r3, [pc, #16]	@ (8008cc0 <vPortSetupTimerInterrupt+0x34>)
 8008cb0:	2207      	movs	r2, #7
 8008cb2:	601a      	str	r2, [r3, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	e000e010 	.word	0xe000e010
 8008cc4:	e000e018 	.word	0xe000e018
 8008cc8:	20000004 	.word	0x20000004
 8008ccc:	10624dd3 	.word	0x10624dd3
 8008cd0:	e000e014 	.word	0xe000e014

08008cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ce4 <vPortEnableVFP+0x10>
 8008cd8:	6801      	ldr	r1, [r0, #0]
 8008cda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008cde:	6001      	str	r1, [r0, #0]
 8008ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ce2:	bf00      	nop
 8008ce4:	e000ed88 	.word	0xe000ed88

08008ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cee:	f3ef 8305 	mrs	r3, IPSR
 8008cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b0f      	cmp	r3, #15
 8008cf8:	d915      	bls.n	8008d26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cfa:	4a18      	ldr	r2, [pc, #96]	@ (8008d5c <vPortValidateInterruptPriority+0x74>)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d04:	4b16      	ldr	r3, [pc, #88]	@ (8008d60 <vPortValidateInterruptPriority+0x78>)
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	7afa      	ldrb	r2, [r7, #11]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d20b      	bcs.n	8008d26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	607b      	str	r3, [r7, #4]
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	e7fd      	b.n	8008d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d26:	4b0f      	ldr	r3, [pc, #60]	@ (8008d64 <vPortValidateInterruptPriority+0x7c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d68 <vPortValidateInterruptPriority+0x80>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d90b      	bls.n	8008d4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	603b      	str	r3, [r7, #0]
}
 8008d48:	bf00      	nop
 8008d4a:	bf00      	nop
 8008d4c:	e7fd      	b.n	8008d4a <vPortValidateInterruptPriority+0x62>
	}
 8008d4e:	bf00      	nop
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	e000e3f0 	.word	0xe000e3f0
 8008d60:	2000159c 	.word	0x2000159c
 8008d64:	e000ed0c 	.word	0xe000ed0c
 8008d68:	200015a0 	.word	0x200015a0

08008d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	@ 0x28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d74:	2300      	movs	r3, #0
 8008d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d78:	f7fe fc72 	bl	8007660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ef0 <pvPortMalloc+0x184>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d84:	f000 f924 	bl	8008fd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d88:	4b5a      	ldr	r3, [pc, #360]	@ (8008ef4 <pvPortMalloc+0x188>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f040 8095 	bne.w	8008ec0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d01e      	beq.n	8008dda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4413      	add	r3, r2
 8008da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d015      	beq.n	8008dda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f023 0307 	bic.w	r3, r3, #7
 8008db4:	3308      	adds	r3, #8
 8008db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00b      	beq.n	8008dda <pvPortMalloc+0x6e>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	617b      	str	r3, [r7, #20]
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop
 8008dd8:	e7fd      	b.n	8008dd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d06f      	beq.n	8008ec0 <pvPortMalloc+0x154>
 8008de0:	4b45      	ldr	r3, [pc, #276]	@ (8008ef8 <pvPortMalloc+0x18c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d86a      	bhi.n	8008ec0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008dea:	4b44      	ldr	r3, [pc, #272]	@ (8008efc <pvPortMalloc+0x190>)
 8008dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dee:	4b43      	ldr	r3, [pc, #268]	@ (8008efc <pvPortMalloc+0x190>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008df4:	e004      	b.n	8008e00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d903      	bls.n	8008e12 <pvPortMalloc+0xa6>
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1f1      	bne.n	8008df6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e12:	4b37      	ldr	r3, [pc, #220]	@ (8008ef0 <pvPortMalloc+0x184>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d051      	beq.n	8008ec0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2208      	movs	r2, #8
 8008e22:	4413      	add	r3, r2
 8008e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	1ad2      	subs	r2, r2, r3
 8008e36:	2308      	movs	r3, #8
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d920      	bls.n	8008e80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4413      	add	r3, r2
 8008e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	f003 0307 	and.w	r3, r3, #7
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00b      	beq.n	8008e68 <pvPortMalloc+0xfc>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	613b      	str	r3, [r7, #16]
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	e7fd      	b.n	8008e64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	1ad2      	subs	r2, r2, r3
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e7a:	69b8      	ldr	r0, [r7, #24]
 8008e7c:	f000 f90a 	bl	8009094 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e80:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef8 <pvPortMalloc+0x18c>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef8 <pvPortMalloc+0x18c>)
 8008e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ef8 <pvPortMalloc+0x18c>)
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	4b1b      	ldr	r3, [pc, #108]	@ (8008f00 <pvPortMalloc+0x194>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d203      	bcs.n	8008ea2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e9a:	4b17      	ldr	r3, [pc, #92]	@ (8008ef8 <pvPortMalloc+0x18c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a18      	ldr	r2, [pc, #96]	@ (8008f00 <pvPortMalloc+0x194>)
 8008ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	4b13      	ldr	r3, [pc, #76]	@ (8008ef4 <pvPortMalloc+0x188>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008eb6:	4b13      	ldr	r3, [pc, #76]	@ (8008f04 <pvPortMalloc+0x198>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	4a11      	ldr	r2, [pc, #68]	@ (8008f04 <pvPortMalloc+0x198>)
 8008ebe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ec0:	f7fe fbdc 	bl	800767c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <pvPortMalloc+0x17a>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	60fb      	str	r3, [r7, #12]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <pvPortMalloc+0x176>
	return pvReturn;
 8008ee6:	69fb      	ldr	r3, [r7, #28]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3728      	adds	r7, #40	@ 0x28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20002164 	.word	0x20002164
 8008ef4:	20002178 	.word	0x20002178
 8008ef8:	20002168 	.word	0x20002168
 8008efc:	2000215c 	.word	0x2000215c
 8008f00:	2000216c 	.word	0x2000216c
 8008f04:	20002170 	.word	0x20002170

08008f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d04f      	beq.n	8008fba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	425b      	negs	r3, r3
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4413      	add	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	4b25      	ldr	r3, [pc, #148]	@ (8008fc4 <vPortFree+0xbc>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4013      	ands	r3, r2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10b      	bne.n	8008f4e <vPortFree+0x46>
	__asm volatile
 8008f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	60fb      	str	r3, [r7, #12]
}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	e7fd      	b.n	8008f4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00b      	beq.n	8008f6e <vPortFree+0x66>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	60bb      	str	r3, [r7, #8]
}
 8008f68:	bf00      	nop
 8008f6a:	bf00      	nop
 8008f6c:	e7fd      	b.n	8008f6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	4b14      	ldr	r3, [pc, #80]	@ (8008fc4 <vPortFree+0xbc>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4013      	ands	r3, r2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01e      	beq.n	8008fba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d11a      	bne.n	8008fba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc4 <vPortFree+0xbc>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	401a      	ands	r2, r3
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f94:	f7fe fb64 	bl	8007660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc8 <vPortFree+0xc0>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	4a09      	ldr	r2, [pc, #36]	@ (8008fc8 <vPortFree+0xc0>)
 8008fa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fa6:	6938      	ldr	r0, [r7, #16]
 8008fa8:	f000 f874 	bl	8009094 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fac:	4b07      	ldr	r3, [pc, #28]	@ (8008fcc <vPortFree+0xc4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	4a06      	ldr	r2, [pc, #24]	@ (8008fcc <vPortFree+0xc4>)
 8008fb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008fb6:	f7fe fb61 	bl	800767c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fba:	bf00      	nop
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20002178 	.word	0x20002178
 8008fc8:	20002168 	.word	0x20002168
 8008fcc:	20002174 	.word	0x20002174

08008fd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fd6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008fda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fdc:	4b27      	ldr	r3, [pc, #156]	@ (800907c <prvHeapInit+0xac>)
 8008fde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00c      	beq.n	8009004 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3307      	adds	r3, #7
 8008fee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 0307 	bic.w	r3, r3, #7
 8008ff6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800907c <prvHeapInit+0xac>)
 8009000:	4413      	add	r3, r2
 8009002:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009008:	4a1d      	ldr	r2, [pc, #116]	@ (8009080 <prvHeapInit+0xb0>)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800900e:	4b1c      	ldr	r3, [pc, #112]	@ (8009080 <prvHeapInit+0xb0>)
 8009010:	2200      	movs	r2, #0
 8009012:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	4413      	add	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800901c:	2208      	movs	r2, #8
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	1a9b      	subs	r3, r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0307 	bic.w	r3, r3, #7
 800902a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4a15      	ldr	r2, [pc, #84]	@ (8009084 <prvHeapInit+0xb4>)
 8009030:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009032:	4b14      	ldr	r3, [pc, #80]	@ (8009084 <prvHeapInit+0xb4>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2200      	movs	r2, #0
 8009038:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800903a:	4b12      	ldr	r3, [pc, #72]	@ (8009084 <prvHeapInit+0xb4>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	1ad2      	subs	r2, r2, r3
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009050:	4b0c      	ldr	r3, [pc, #48]	@ (8009084 <prvHeapInit+0xb4>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	4a0a      	ldr	r2, [pc, #40]	@ (8009088 <prvHeapInit+0xb8>)
 800905e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	4a09      	ldr	r2, [pc, #36]	@ (800908c <prvHeapInit+0xbc>)
 8009066:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009068:	4b09      	ldr	r3, [pc, #36]	@ (8009090 <prvHeapInit+0xc0>)
 800906a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800906e:	601a      	str	r2, [r3, #0]
}
 8009070:	bf00      	nop
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	200015a4 	.word	0x200015a4
 8009080:	2000215c 	.word	0x2000215c
 8009084:	20002164 	.word	0x20002164
 8009088:	2000216c 	.word	0x2000216c
 800908c:	20002168 	.word	0x20002168
 8009090:	20002178 	.word	0x20002178

08009094 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800909c:	4b28      	ldr	r3, [pc, #160]	@ (8009140 <prvInsertBlockIntoFreeList+0xac>)
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	e002      	b.n	80090a8 <prvInsertBlockIntoFreeList+0x14>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d8f7      	bhi.n	80090a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4413      	add	r3, r2
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d108      	bne.n	80090d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	441a      	add	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	441a      	add	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d118      	bne.n	800911c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	4b15      	ldr	r3, [pc, #84]	@ (8009144 <prvInsertBlockIntoFreeList+0xb0>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d00d      	beq.n	8009112 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	441a      	add	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	e008      	b.n	8009124 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009112:	4b0c      	ldr	r3, [pc, #48]	@ (8009144 <prvInsertBlockIntoFreeList+0xb0>)
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	e003      	b.n	8009124 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	429a      	cmp	r2, r3
 800912a:	d002      	beq.n	8009132 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009132:	bf00      	nop
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	2000215c 	.word	0x2000215c
 8009144:	20002164 	.word	0x20002164

08009148 <std>:
 8009148:	2300      	movs	r3, #0
 800914a:	b510      	push	{r4, lr}
 800914c:	4604      	mov	r4, r0
 800914e:	e9c0 3300 	strd	r3, r3, [r0]
 8009152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009156:	6083      	str	r3, [r0, #8]
 8009158:	8181      	strh	r1, [r0, #12]
 800915a:	6643      	str	r3, [r0, #100]	@ 0x64
 800915c:	81c2      	strh	r2, [r0, #14]
 800915e:	6183      	str	r3, [r0, #24]
 8009160:	4619      	mov	r1, r3
 8009162:	2208      	movs	r2, #8
 8009164:	305c      	adds	r0, #92	@ 0x5c
 8009166:	f000 f9e7 	bl	8009538 <memset>
 800916a:	4b0d      	ldr	r3, [pc, #52]	@ (80091a0 <std+0x58>)
 800916c:	6263      	str	r3, [r4, #36]	@ 0x24
 800916e:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <std+0x5c>)
 8009170:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009172:	4b0d      	ldr	r3, [pc, #52]	@ (80091a8 <std+0x60>)
 8009174:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009176:	4b0d      	ldr	r3, [pc, #52]	@ (80091ac <std+0x64>)
 8009178:	6323      	str	r3, [r4, #48]	@ 0x30
 800917a:	4b0d      	ldr	r3, [pc, #52]	@ (80091b0 <std+0x68>)
 800917c:	6224      	str	r4, [r4, #32]
 800917e:	429c      	cmp	r4, r3
 8009180:	d006      	beq.n	8009190 <std+0x48>
 8009182:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009186:	4294      	cmp	r4, r2
 8009188:	d002      	beq.n	8009190 <std+0x48>
 800918a:	33d0      	adds	r3, #208	@ 0xd0
 800918c:	429c      	cmp	r4, r3
 800918e:	d105      	bne.n	800919c <std+0x54>
 8009190:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009198:	f000 ba46 	b.w	8009628 <__retarget_lock_init_recursive>
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop
 80091a0:	08009389 	.word	0x08009389
 80091a4:	080093ab 	.word	0x080093ab
 80091a8:	080093e3 	.word	0x080093e3
 80091ac:	08009407 	.word	0x08009407
 80091b0:	2000217c 	.word	0x2000217c

080091b4 <stdio_exit_handler>:
 80091b4:	4a02      	ldr	r2, [pc, #8]	@ (80091c0 <stdio_exit_handler+0xc>)
 80091b6:	4903      	ldr	r1, [pc, #12]	@ (80091c4 <stdio_exit_handler+0x10>)
 80091b8:	4803      	ldr	r0, [pc, #12]	@ (80091c8 <stdio_exit_handler+0x14>)
 80091ba:	f000 b869 	b.w	8009290 <_fwalk_sglue>
 80091be:	bf00      	nop
 80091c0:	20000014 	.word	0x20000014
 80091c4:	08009945 	.word	0x08009945
 80091c8:	20000024 	.word	0x20000024

080091cc <cleanup_stdio>:
 80091cc:	6841      	ldr	r1, [r0, #4]
 80091ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009200 <cleanup_stdio+0x34>)
 80091d0:	4299      	cmp	r1, r3
 80091d2:	b510      	push	{r4, lr}
 80091d4:	4604      	mov	r4, r0
 80091d6:	d001      	beq.n	80091dc <cleanup_stdio+0x10>
 80091d8:	f000 fbb4 	bl	8009944 <_fflush_r>
 80091dc:	68a1      	ldr	r1, [r4, #8]
 80091de:	4b09      	ldr	r3, [pc, #36]	@ (8009204 <cleanup_stdio+0x38>)
 80091e0:	4299      	cmp	r1, r3
 80091e2:	d002      	beq.n	80091ea <cleanup_stdio+0x1e>
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 fbad 	bl	8009944 <_fflush_r>
 80091ea:	68e1      	ldr	r1, [r4, #12]
 80091ec:	4b06      	ldr	r3, [pc, #24]	@ (8009208 <cleanup_stdio+0x3c>)
 80091ee:	4299      	cmp	r1, r3
 80091f0:	d004      	beq.n	80091fc <cleanup_stdio+0x30>
 80091f2:	4620      	mov	r0, r4
 80091f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f8:	f000 bba4 	b.w	8009944 <_fflush_r>
 80091fc:	bd10      	pop	{r4, pc}
 80091fe:	bf00      	nop
 8009200:	2000217c 	.word	0x2000217c
 8009204:	200021e4 	.word	0x200021e4
 8009208:	2000224c 	.word	0x2000224c

0800920c <global_stdio_init.part.0>:
 800920c:	b510      	push	{r4, lr}
 800920e:	4b0b      	ldr	r3, [pc, #44]	@ (800923c <global_stdio_init.part.0+0x30>)
 8009210:	4c0b      	ldr	r4, [pc, #44]	@ (8009240 <global_stdio_init.part.0+0x34>)
 8009212:	4a0c      	ldr	r2, [pc, #48]	@ (8009244 <global_stdio_init.part.0+0x38>)
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	4620      	mov	r0, r4
 8009218:	2200      	movs	r2, #0
 800921a:	2104      	movs	r1, #4
 800921c:	f7ff ff94 	bl	8009148 <std>
 8009220:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009224:	2201      	movs	r2, #1
 8009226:	2109      	movs	r1, #9
 8009228:	f7ff ff8e 	bl	8009148 <std>
 800922c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009230:	2202      	movs	r2, #2
 8009232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009236:	2112      	movs	r1, #18
 8009238:	f7ff bf86 	b.w	8009148 <std>
 800923c:	200022b4 	.word	0x200022b4
 8009240:	2000217c 	.word	0x2000217c
 8009244:	080091b5 	.word	0x080091b5

08009248 <__sfp_lock_acquire>:
 8009248:	4801      	ldr	r0, [pc, #4]	@ (8009250 <__sfp_lock_acquire+0x8>)
 800924a:	f000 b9ee 	b.w	800962a <__retarget_lock_acquire_recursive>
 800924e:	bf00      	nop
 8009250:	200022bd 	.word	0x200022bd

08009254 <__sfp_lock_release>:
 8009254:	4801      	ldr	r0, [pc, #4]	@ (800925c <__sfp_lock_release+0x8>)
 8009256:	f000 b9e9 	b.w	800962c <__retarget_lock_release_recursive>
 800925a:	bf00      	nop
 800925c:	200022bd 	.word	0x200022bd

08009260 <__sinit>:
 8009260:	b510      	push	{r4, lr}
 8009262:	4604      	mov	r4, r0
 8009264:	f7ff fff0 	bl	8009248 <__sfp_lock_acquire>
 8009268:	6a23      	ldr	r3, [r4, #32]
 800926a:	b11b      	cbz	r3, 8009274 <__sinit+0x14>
 800926c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009270:	f7ff bff0 	b.w	8009254 <__sfp_lock_release>
 8009274:	4b04      	ldr	r3, [pc, #16]	@ (8009288 <__sinit+0x28>)
 8009276:	6223      	str	r3, [r4, #32]
 8009278:	4b04      	ldr	r3, [pc, #16]	@ (800928c <__sinit+0x2c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1f5      	bne.n	800926c <__sinit+0xc>
 8009280:	f7ff ffc4 	bl	800920c <global_stdio_init.part.0>
 8009284:	e7f2      	b.n	800926c <__sinit+0xc>
 8009286:	bf00      	nop
 8009288:	080091cd 	.word	0x080091cd
 800928c:	200022b4 	.word	0x200022b4

08009290 <_fwalk_sglue>:
 8009290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009294:	4607      	mov	r7, r0
 8009296:	4688      	mov	r8, r1
 8009298:	4614      	mov	r4, r2
 800929a:	2600      	movs	r6, #0
 800929c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092a0:	f1b9 0901 	subs.w	r9, r9, #1
 80092a4:	d505      	bpl.n	80092b2 <_fwalk_sglue+0x22>
 80092a6:	6824      	ldr	r4, [r4, #0]
 80092a8:	2c00      	cmp	r4, #0
 80092aa:	d1f7      	bne.n	800929c <_fwalk_sglue+0xc>
 80092ac:	4630      	mov	r0, r6
 80092ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b2:	89ab      	ldrh	r3, [r5, #12]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d907      	bls.n	80092c8 <_fwalk_sglue+0x38>
 80092b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092bc:	3301      	adds	r3, #1
 80092be:	d003      	beq.n	80092c8 <_fwalk_sglue+0x38>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4638      	mov	r0, r7
 80092c4:	47c0      	blx	r8
 80092c6:	4306      	orrs	r6, r0
 80092c8:	3568      	adds	r5, #104	@ 0x68
 80092ca:	e7e9      	b.n	80092a0 <_fwalk_sglue+0x10>

080092cc <_puts_r>:
 80092cc:	6a03      	ldr	r3, [r0, #32]
 80092ce:	b570      	push	{r4, r5, r6, lr}
 80092d0:	6884      	ldr	r4, [r0, #8]
 80092d2:	4605      	mov	r5, r0
 80092d4:	460e      	mov	r6, r1
 80092d6:	b90b      	cbnz	r3, 80092dc <_puts_r+0x10>
 80092d8:	f7ff ffc2 	bl	8009260 <__sinit>
 80092dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092de:	07db      	lsls	r3, r3, #31
 80092e0:	d405      	bmi.n	80092ee <_puts_r+0x22>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	0598      	lsls	r0, r3, #22
 80092e6:	d402      	bmi.n	80092ee <_puts_r+0x22>
 80092e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ea:	f000 f99e 	bl	800962a <__retarget_lock_acquire_recursive>
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	0719      	lsls	r1, r3, #28
 80092f2:	d502      	bpl.n	80092fa <_puts_r+0x2e>
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d135      	bne.n	8009366 <_puts_r+0x9a>
 80092fa:	4621      	mov	r1, r4
 80092fc:	4628      	mov	r0, r5
 80092fe:	f000 f8c5 	bl	800948c <__swsetup_r>
 8009302:	b380      	cbz	r0, 8009366 <_puts_r+0x9a>
 8009304:	f04f 35ff 	mov.w	r5, #4294967295
 8009308:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800930a:	07da      	lsls	r2, r3, #31
 800930c:	d405      	bmi.n	800931a <_puts_r+0x4e>
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	059b      	lsls	r3, r3, #22
 8009312:	d402      	bmi.n	800931a <_puts_r+0x4e>
 8009314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009316:	f000 f989 	bl	800962c <__retarget_lock_release_recursive>
 800931a:	4628      	mov	r0, r5
 800931c:	bd70      	pop	{r4, r5, r6, pc}
 800931e:	2b00      	cmp	r3, #0
 8009320:	da04      	bge.n	800932c <_puts_r+0x60>
 8009322:	69a2      	ldr	r2, [r4, #24]
 8009324:	429a      	cmp	r2, r3
 8009326:	dc17      	bgt.n	8009358 <_puts_r+0x8c>
 8009328:	290a      	cmp	r1, #10
 800932a:	d015      	beq.n	8009358 <_puts_r+0x8c>
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	1c5a      	adds	r2, r3, #1
 8009330:	6022      	str	r2, [r4, #0]
 8009332:	7019      	strb	r1, [r3, #0]
 8009334:	68a3      	ldr	r3, [r4, #8]
 8009336:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800933a:	3b01      	subs	r3, #1
 800933c:	60a3      	str	r3, [r4, #8]
 800933e:	2900      	cmp	r1, #0
 8009340:	d1ed      	bne.n	800931e <_puts_r+0x52>
 8009342:	2b00      	cmp	r3, #0
 8009344:	da11      	bge.n	800936a <_puts_r+0x9e>
 8009346:	4622      	mov	r2, r4
 8009348:	210a      	movs	r1, #10
 800934a:	4628      	mov	r0, r5
 800934c:	f000 f85f 	bl	800940e <__swbuf_r>
 8009350:	3001      	adds	r0, #1
 8009352:	d0d7      	beq.n	8009304 <_puts_r+0x38>
 8009354:	250a      	movs	r5, #10
 8009356:	e7d7      	b.n	8009308 <_puts_r+0x3c>
 8009358:	4622      	mov	r2, r4
 800935a:	4628      	mov	r0, r5
 800935c:	f000 f857 	bl	800940e <__swbuf_r>
 8009360:	3001      	adds	r0, #1
 8009362:	d1e7      	bne.n	8009334 <_puts_r+0x68>
 8009364:	e7ce      	b.n	8009304 <_puts_r+0x38>
 8009366:	3e01      	subs	r6, #1
 8009368:	e7e4      	b.n	8009334 <_puts_r+0x68>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	6022      	str	r2, [r4, #0]
 8009370:	220a      	movs	r2, #10
 8009372:	701a      	strb	r2, [r3, #0]
 8009374:	e7ee      	b.n	8009354 <_puts_r+0x88>
	...

08009378 <puts>:
 8009378:	4b02      	ldr	r3, [pc, #8]	@ (8009384 <puts+0xc>)
 800937a:	4601      	mov	r1, r0
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	f7ff bfa5 	b.w	80092cc <_puts_r>
 8009382:	bf00      	nop
 8009384:	20000020 	.word	0x20000020

08009388 <__sread>:
 8009388:	b510      	push	{r4, lr}
 800938a:	460c      	mov	r4, r1
 800938c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009390:	f000 f8fc 	bl	800958c <_read_r>
 8009394:	2800      	cmp	r0, #0
 8009396:	bfab      	itete	ge
 8009398:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800939a:	89a3      	ldrhlt	r3, [r4, #12]
 800939c:	181b      	addge	r3, r3, r0
 800939e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093a2:	bfac      	ite	ge
 80093a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093a6:	81a3      	strhlt	r3, [r4, #12]
 80093a8:	bd10      	pop	{r4, pc}

080093aa <__swrite>:
 80093aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ae:	461f      	mov	r7, r3
 80093b0:	898b      	ldrh	r3, [r1, #12]
 80093b2:	05db      	lsls	r3, r3, #23
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	4616      	mov	r6, r2
 80093ba:	d505      	bpl.n	80093c8 <__swrite+0x1e>
 80093bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c0:	2302      	movs	r3, #2
 80093c2:	2200      	movs	r2, #0
 80093c4:	f000 f8d0 	bl	8009568 <_lseek_r>
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093d2:	81a3      	strh	r3, [r4, #12]
 80093d4:	4632      	mov	r2, r6
 80093d6:	463b      	mov	r3, r7
 80093d8:	4628      	mov	r0, r5
 80093da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093de:	f000 b8e7 	b.w	80095b0 <_write_r>

080093e2 <__sseek>:
 80093e2:	b510      	push	{r4, lr}
 80093e4:	460c      	mov	r4, r1
 80093e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ea:	f000 f8bd 	bl	8009568 <_lseek_r>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	bf15      	itete	ne
 80093f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093fe:	81a3      	strheq	r3, [r4, #12]
 8009400:	bf18      	it	ne
 8009402:	81a3      	strhne	r3, [r4, #12]
 8009404:	bd10      	pop	{r4, pc}

08009406 <__sclose>:
 8009406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940a:	f000 b89d 	b.w	8009548 <_close_r>

0800940e <__swbuf_r>:
 800940e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009410:	460e      	mov	r6, r1
 8009412:	4614      	mov	r4, r2
 8009414:	4605      	mov	r5, r0
 8009416:	b118      	cbz	r0, 8009420 <__swbuf_r+0x12>
 8009418:	6a03      	ldr	r3, [r0, #32]
 800941a:	b90b      	cbnz	r3, 8009420 <__swbuf_r+0x12>
 800941c:	f7ff ff20 	bl	8009260 <__sinit>
 8009420:	69a3      	ldr	r3, [r4, #24]
 8009422:	60a3      	str	r3, [r4, #8]
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	071a      	lsls	r2, r3, #28
 8009428:	d501      	bpl.n	800942e <__swbuf_r+0x20>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	b943      	cbnz	r3, 8009440 <__swbuf_r+0x32>
 800942e:	4621      	mov	r1, r4
 8009430:	4628      	mov	r0, r5
 8009432:	f000 f82b 	bl	800948c <__swsetup_r>
 8009436:	b118      	cbz	r0, 8009440 <__swbuf_r+0x32>
 8009438:	f04f 37ff 	mov.w	r7, #4294967295
 800943c:	4638      	mov	r0, r7
 800943e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	6922      	ldr	r2, [r4, #16]
 8009444:	1a98      	subs	r0, r3, r2
 8009446:	6963      	ldr	r3, [r4, #20]
 8009448:	b2f6      	uxtb	r6, r6
 800944a:	4283      	cmp	r3, r0
 800944c:	4637      	mov	r7, r6
 800944e:	dc05      	bgt.n	800945c <__swbuf_r+0x4e>
 8009450:	4621      	mov	r1, r4
 8009452:	4628      	mov	r0, r5
 8009454:	f000 fa76 	bl	8009944 <_fflush_r>
 8009458:	2800      	cmp	r0, #0
 800945a:	d1ed      	bne.n	8009438 <__swbuf_r+0x2a>
 800945c:	68a3      	ldr	r3, [r4, #8]
 800945e:	3b01      	subs	r3, #1
 8009460:	60a3      	str	r3, [r4, #8]
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	6022      	str	r2, [r4, #0]
 8009468:	701e      	strb	r6, [r3, #0]
 800946a:	6962      	ldr	r2, [r4, #20]
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	429a      	cmp	r2, r3
 8009470:	d004      	beq.n	800947c <__swbuf_r+0x6e>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	07db      	lsls	r3, r3, #31
 8009476:	d5e1      	bpl.n	800943c <__swbuf_r+0x2e>
 8009478:	2e0a      	cmp	r6, #10
 800947a:	d1df      	bne.n	800943c <__swbuf_r+0x2e>
 800947c:	4621      	mov	r1, r4
 800947e:	4628      	mov	r0, r5
 8009480:	f000 fa60 	bl	8009944 <_fflush_r>
 8009484:	2800      	cmp	r0, #0
 8009486:	d0d9      	beq.n	800943c <__swbuf_r+0x2e>
 8009488:	e7d6      	b.n	8009438 <__swbuf_r+0x2a>
	...

0800948c <__swsetup_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4b29      	ldr	r3, [pc, #164]	@ (8009534 <__swsetup_r+0xa8>)
 8009490:	4605      	mov	r5, r0
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	460c      	mov	r4, r1
 8009496:	b118      	cbz	r0, 80094a0 <__swsetup_r+0x14>
 8009498:	6a03      	ldr	r3, [r0, #32]
 800949a:	b90b      	cbnz	r3, 80094a0 <__swsetup_r+0x14>
 800949c:	f7ff fee0 	bl	8009260 <__sinit>
 80094a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a4:	0719      	lsls	r1, r3, #28
 80094a6:	d422      	bmi.n	80094ee <__swsetup_r+0x62>
 80094a8:	06da      	lsls	r2, r3, #27
 80094aa:	d407      	bmi.n	80094bc <__swsetup_r+0x30>
 80094ac:	2209      	movs	r2, #9
 80094ae:	602a      	str	r2, [r5, #0]
 80094b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ba:	e033      	b.n	8009524 <__swsetup_r+0x98>
 80094bc:	0758      	lsls	r0, r3, #29
 80094be:	d512      	bpl.n	80094e6 <__swsetup_r+0x5a>
 80094c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094c2:	b141      	cbz	r1, 80094d6 <__swsetup_r+0x4a>
 80094c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094c8:	4299      	cmp	r1, r3
 80094ca:	d002      	beq.n	80094d2 <__swsetup_r+0x46>
 80094cc:	4628      	mov	r0, r5
 80094ce:	f000 f8bd 	bl	800964c <_free_r>
 80094d2:	2300      	movs	r3, #0
 80094d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094dc:	81a3      	strh	r3, [r4, #12]
 80094de:	2300      	movs	r3, #0
 80094e0:	6063      	str	r3, [r4, #4]
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f043 0308 	orr.w	r3, r3, #8
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	b94b      	cbnz	r3, 8009506 <__swsetup_r+0x7a>
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094fc:	d003      	beq.n	8009506 <__swsetup_r+0x7a>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f000 fa6d 	bl	80099e0 <__smakebuf_r>
 8009506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800950a:	f013 0201 	ands.w	r2, r3, #1
 800950e:	d00a      	beq.n	8009526 <__swsetup_r+0x9a>
 8009510:	2200      	movs	r2, #0
 8009512:	60a2      	str	r2, [r4, #8]
 8009514:	6962      	ldr	r2, [r4, #20]
 8009516:	4252      	negs	r2, r2
 8009518:	61a2      	str	r2, [r4, #24]
 800951a:	6922      	ldr	r2, [r4, #16]
 800951c:	b942      	cbnz	r2, 8009530 <__swsetup_r+0xa4>
 800951e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009522:	d1c5      	bne.n	80094b0 <__swsetup_r+0x24>
 8009524:	bd38      	pop	{r3, r4, r5, pc}
 8009526:	0799      	lsls	r1, r3, #30
 8009528:	bf58      	it	pl
 800952a:	6962      	ldrpl	r2, [r4, #20]
 800952c:	60a2      	str	r2, [r4, #8]
 800952e:	e7f4      	b.n	800951a <__swsetup_r+0x8e>
 8009530:	2000      	movs	r0, #0
 8009532:	e7f7      	b.n	8009524 <__swsetup_r+0x98>
 8009534:	20000020 	.word	0x20000020

08009538 <memset>:
 8009538:	4402      	add	r2, r0
 800953a:	4603      	mov	r3, r0
 800953c:	4293      	cmp	r3, r2
 800953e:	d100      	bne.n	8009542 <memset+0xa>
 8009540:	4770      	bx	lr
 8009542:	f803 1b01 	strb.w	r1, [r3], #1
 8009546:	e7f9      	b.n	800953c <memset+0x4>

08009548 <_close_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d06      	ldr	r5, [pc, #24]	@ (8009564 <_close_r+0x1c>)
 800954c:	2300      	movs	r3, #0
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	f7f8 f919 	bl	800178a <_close>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_close_r+0x1a>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_close_r+0x1a>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	200022b8 	.word	0x200022b8

08009568 <_lseek_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4d07      	ldr	r5, [pc, #28]	@ (8009588 <_lseek_r+0x20>)
 800956c:	4604      	mov	r4, r0
 800956e:	4608      	mov	r0, r1
 8009570:	4611      	mov	r1, r2
 8009572:	2200      	movs	r2, #0
 8009574:	602a      	str	r2, [r5, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	f7f8 f92e 	bl	80017d8 <_lseek>
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d102      	bne.n	8009586 <_lseek_r+0x1e>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	b103      	cbz	r3, 8009586 <_lseek_r+0x1e>
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	200022b8 	.word	0x200022b8

0800958c <_read_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4d07      	ldr	r5, [pc, #28]	@ (80095ac <_read_r+0x20>)
 8009590:	4604      	mov	r4, r0
 8009592:	4608      	mov	r0, r1
 8009594:	4611      	mov	r1, r2
 8009596:	2200      	movs	r2, #0
 8009598:	602a      	str	r2, [r5, #0]
 800959a:	461a      	mov	r2, r3
 800959c:	f7f8 f8d8 	bl	8001750 <_read>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_read_r+0x1e>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_read_r+0x1e>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	200022b8 	.word	0x200022b8

080095b0 <_write_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4d07      	ldr	r5, [pc, #28]	@ (80095d0 <_write_r+0x20>)
 80095b4:	4604      	mov	r4, r0
 80095b6:	4608      	mov	r0, r1
 80095b8:	4611      	mov	r1, r2
 80095ba:	2200      	movs	r2, #0
 80095bc:	602a      	str	r2, [r5, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	f7f7 fc32 	bl	8000e28 <_write>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_write_r+0x1e>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_write_r+0x1e>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	200022b8 	.word	0x200022b8

080095d4 <__errno>:
 80095d4:	4b01      	ldr	r3, [pc, #4]	@ (80095dc <__errno+0x8>)
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	20000020 	.word	0x20000020

080095e0 <__libc_init_array>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	4d0d      	ldr	r5, [pc, #52]	@ (8009618 <__libc_init_array+0x38>)
 80095e4:	4c0d      	ldr	r4, [pc, #52]	@ (800961c <__libc_init_array+0x3c>)
 80095e6:	1b64      	subs	r4, r4, r5
 80095e8:	10a4      	asrs	r4, r4, #2
 80095ea:	2600      	movs	r6, #0
 80095ec:	42a6      	cmp	r6, r4
 80095ee:	d109      	bne.n	8009604 <__libc_init_array+0x24>
 80095f0:	4d0b      	ldr	r5, [pc, #44]	@ (8009620 <__libc_init_array+0x40>)
 80095f2:	4c0c      	ldr	r4, [pc, #48]	@ (8009624 <__libc_init_array+0x44>)
 80095f4:	f000 fa62 	bl	8009abc <_init>
 80095f8:	1b64      	subs	r4, r4, r5
 80095fa:	10a4      	asrs	r4, r4, #2
 80095fc:	2600      	movs	r6, #0
 80095fe:	42a6      	cmp	r6, r4
 8009600:	d105      	bne.n	800960e <__libc_init_array+0x2e>
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	f855 3b04 	ldr.w	r3, [r5], #4
 8009608:	4798      	blx	r3
 800960a:	3601      	adds	r6, #1
 800960c:	e7ee      	b.n	80095ec <__libc_init_array+0xc>
 800960e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009612:	4798      	blx	r3
 8009614:	3601      	adds	r6, #1
 8009616:	e7f2      	b.n	80095fe <__libc_init_array+0x1e>
 8009618:	08009d6c 	.word	0x08009d6c
 800961c:	08009d6c 	.word	0x08009d6c
 8009620:	08009d6c 	.word	0x08009d6c
 8009624:	08009d70 	.word	0x08009d70

08009628 <__retarget_lock_init_recursive>:
 8009628:	4770      	bx	lr

0800962a <__retarget_lock_acquire_recursive>:
 800962a:	4770      	bx	lr

0800962c <__retarget_lock_release_recursive>:
 800962c:	4770      	bx	lr

0800962e <memcpy>:
 800962e:	440a      	add	r2, r1
 8009630:	4291      	cmp	r1, r2
 8009632:	f100 33ff 	add.w	r3, r0, #4294967295
 8009636:	d100      	bne.n	800963a <memcpy+0xc>
 8009638:	4770      	bx	lr
 800963a:	b510      	push	{r4, lr}
 800963c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009640:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009644:	4291      	cmp	r1, r2
 8009646:	d1f9      	bne.n	800963c <memcpy+0xe>
 8009648:	bd10      	pop	{r4, pc}
	...

0800964c <_free_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4605      	mov	r5, r0
 8009650:	2900      	cmp	r1, #0
 8009652:	d041      	beq.n	80096d8 <_free_r+0x8c>
 8009654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009658:	1f0c      	subs	r4, r1, #4
 800965a:	2b00      	cmp	r3, #0
 800965c:	bfb8      	it	lt
 800965e:	18e4      	addlt	r4, r4, r3
 8009660:	f000 f8e0 	bl	8009824 <__malloc_lock>
 8009664:	4a1d      	ldr	r2, [pc, #116]	@ (80096dc <_free_r+0x90>)
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	b933      	cbnz	r3, 8009678 <_free_r+0x2c>
 800966a:	6063      	str	r3, [r4, #4]
 800966c:	6014      	str	r4, [r2, #0]
 800966e:	4628      	mov	r0, r5
 8009670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009674:	f000 b8dc 	b.w	8009830 <__malloc_unlock>
 8009678:	42a3      	cmp	r3, r4
 800967a:	d908      	bls.n	800968e <_free_r+0x42>
 800967c:	6820      	ldr	r0, [r4, #0]
 800967e:	1821      	adds	r1, r4, r0
 8009680:	428b      	cmp	r3, r1
 8009682:	bf01      	itttt	eq
 8009684:	6819      	ldreq	r1, [r3, #0]
 8009686:	685b      	ldreq	r3, [r3, #4]
 8009688:	1809      	addeq	r1, r1, r0
 800968a:	6021      	streq	r1, [r4, #0]
 800968c:	e7ed      	b.n	800966a <_free_r+0x1e>
 800968e:	461a      	mov	r2, r3
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	b10b      	cbz	r3, 8009698 <_free_r+0x4c>
 8009694:	42a3      	cmp	r3, r4
 8009696:	d9fa      	bls.n	800968e <_free_r+0x42>
 8009698:	6811      	ldr	r1, [r2, #0]
 800969a:	1850      	adds	r0, r2, r1
 800969c:	42a0      	cmp	r0, r4
 800969e:	d10b      	bne.n	80096b8 <_free_r+0x6c>
 80096a0:	6820      	ldr	r0, [r4, #0]
 80096a2:	4401      	add	r1, r0
 80096a4:	1850      	adds	r0, r2, r1
 80096a6:	4283      	cmp	r3, r0
 80096a8:	6011      	str	r1, [r2, #0]
 80096aa:	d1e0      	bne.n	800966e <_free_r+0x22>
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	6053      	str	r3, [r2, #4]
 80096b2:	4408      	add	r0, r1
 80096b4:	6010      	str	r0, [r2, #0]
 80096b6:	e7da      	b.n	800966e <_free_r+0x22>
 80096b8:	d902      	bls.n	80096c0 <_free_r+0x74>
 80096ba:	230c      	movs	r3, #12
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	e7d6      	b.n	800966e <_free_r+0x22>
 80096c0:	6820      	ldr	r0, [r4, #0]
 80096c2:	1821      	adds	r1, r4, r0
 80096c4:	428b      	cmp	r3, r1
 80096c6:	bf04      	itt	eq
 80096c8:	6819      	ldreq	r1, [r3, #0]
 80096ca:	685b      	ldreq	r3, [r3, #4]
 80096cc:	6063      	str	r3, [r4, #4]
 80096ce:	bf04      	itt	eq
 80096d0:	1809      	addeq	r1, r1, r0
 80096d2:	6021      	streq	r1, [r4, #0]
 80096d4:	6054      	str	r4, [r2, #4]
 80096d6:	e7ca      	b.n	800966e <_free_r+0x22>
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	bf00      	nop
 80096dc:	200022c4 	.word	0x200022c4

080096e0 <sbrk_aligned>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	4e0f      	ldr	r6, [pc, #60]	@ (8009720 <sbrk_aligned+0x40>)
 80096e4:	460c      	mov	r4, r1
 80096e6:	6831      	ldr	r1, [r6, #0]
 80096e8:	4605      	mov	r5, r0
 80096ea:	b911      	cbnz	r1, 80096f2 <sbrk_aligned+0x12>
 80096ec:	f000 f9d6 	bl	8009a9c <_sbrk_r>
 80096f0:	6030      	str	r0, [r6, #0]
 80096f2:	4621      	mov	r1, r4
 80096f4:	4628      	mov	r0, r5
 80096f6:	f000 f9d1 	bl	8009a9c <_sbrk_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	d103      	bne.n	8009706 <sbrk_aligned+0x26>
 80096fe:	f04f 34ff 	mov.w	r4, #4294967295
 8009702:	4620      	mov	r0, r4
 8009704:	bd70      	pop	{r4, r5, r6, pc}
 8009706:	1cc4      	adds	r4, r0, #3
 8009708:	f024 0403 	bic.w	r4, r4, #3
 800970c:	42a0      	cmp	r0, r4
 800970e:	d0f8      	beq.n	8009702 <sbrk_aligned+0x22>
 8009710:	1a21      	subs	r1, r4, r0
 8009712:	4628      	mov	r0, r5
 8009714:	f000 f9c2 	bl	8009a9c <_sbrk_r>
 8009718:	3001      	adds	r0, #1
 800971a:	d1f2      	bne.n	8009702 <sbrk_aligned+0x22>
 800971c:	e7ef      	b.n	80096fe <sbrk_aligned+0x1e>
 800971e:	bf00      	nop
 8009720:	200022c0 	.word	0x200022c0

08009724 <_malloc_r>:
 8009724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009728:	1ccd      	adds	r5, r1, #3
 800972a:	f025 0503 	bic.w	r5, r5, #3
 800972e:	3508      	adds	r5, #8
 8009730:	2d0c      	cmp	r5, #12
 8009732:	bf38      	it	cc
 8009734:	250c      	movcc	r5, #12
 8009736:	2d00      	cmp	r5, #0
 8009738:	4606      	mov	r6, r0
 800973a:	db01      	blt.n	8009740 <_malloc_r+0x1c>
 800973c:	42a9      	cmp	r1, r5
 800973e:	d904      	bls.n	800974a <_malloc_r+0x26>
 8009740:	230c      	movs	r3, #12
 8009742:	6033      	str	r3, [r6, #0]
 8009744:	2000      	movs	r0, #0
 8009746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009820 <_malloc_r+0xfc>
 800974e:	f000 f869 	bl	8009824 <__malloc_lock>
 8009752:	f8d8 3000 	ldr.w	r3, [r8]
 8009756:	461c      	mov	r4, r3
 8009758:	bb44      	cbnz	r4, 80097ac <_malloc_r+0x88>
 800975a:	4629      	mov	r1, r5
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff ffbf 	bl	80096e0 <sbrk_aligned>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	4604      	mov	r4, r0
 8009766:	d158      	bne.n	800981a <_malloc_r+0xf6>
 8009768:	f8d8 4000 	ldr.w	r4, [r8]
 800976c:	4627      	mov	r7, r4
 800976e:	2f00      	cmp	r7, #0
 8009770:	d143      	bne.n	80097fa <_malloc_r+0xd6>
 8009772:	2c00      	cmp	r4, #0
 8009774:	d04b      	beq.n	800980e <_malloc_r+0xea>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	4639      	mov	r1, r7
 800977a:	4630      	mov	r0, r6
 800977c:	eb04 0903 	add.w	r9, r4, r3
 8009780:	f000 f98c 	bl	8009a9c <_sbrk_r>
 8009784:	4581      	cmp	r9, r0
 8009786:	d142      	bne.n	800980e <_malloc_r+0xea>
 8009788:	6821      	ldr	r1, [r4, #0]
 800978a:	1a6d      	subs	r5, r5, r1
 800978c:	4629      	mov	r1, r5
 800978e:	4630      	mov	r0, r6
 8009790:	f7ff ffa6 	bl	80096e0 <sbrk_aligned>
 8009794:	3001      	adds	r0, #1
 8009796:	d03a      	beq.n	800980e <_malloc_r+0xea>
 8009798:	6823      	ldr	r3, [r4, #0]
 800979a:	442b      	add	r3, r5
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	f8d8 3000 	ldr.w	r3, [r8]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	bb62      	cbnz	r2, 8009800 <_malloc_r+0xdc>
 80097a6:	f8c8 7000 	str.w	r7, [r8]
 80097aa:	e00f      	b.n	80097cc <_malloc_r+0xa8>
 80097ac:	6822      	ldr	r2, [r4, #0]
 80097ae:	1b52      	subs	r2, r2, r5
 80097b0:	d420      	bmi.n	80097f4 <_malloc_r+0xd0>
 80097b2:	2a0b      	cmp	r2, #11
 80097b4:	d917      	bls.n	80097e6 <_malloc_r+0xc2>
 80097b6:	1961      	adds	r1, r4, r5
 80097b8:	42a3      	cmp	r3, r4
 80097ba:	6025      	str	r5, [r4, #0]
 80097bc:	bf18      	it	ne
 80097be:	6059      	strne	r1, [r3, #4]
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	bf08      	it	eq
 80097c4:	f8c8 1000 	streq.w	r1, [r8]
 80097c8:	5162      	str	r2, [r4, r5]
 80097ca:	604b      	str	r3, [r1, #4]
 80097cc:	4630      	mov	r0, r6
 80097ce:	f000 f82f 	bl	8009830 <__malloc_unlock>
 80097d2:	f104 000b 	add.w	r0, r4, #11
 80097d6:	1d23      	adds	r3, r4, #4
 80097d8:	f020 0007 	bic.w	r0, r0, #7
 80097dc:	1ac2      	subs	r2, r0, r3
 80097de:	bf1c      	itt	ne
 80097e0:	1a1b      	subne	r3, r3, r0
 80097e2:	50a3      	strne	r3, [r4, r2]
 80097e4:	e7af      	b.n	8009746 <_malloc_r+0x22>
 80097e6:	6862      	ldr	r2, [r4, #4]
 80097e8:	42a3      	cmp	r3, r4
 80097ea:	bf0c      	ite	eq
 80097ec:	f8c8 2000 	streq.w	r2, [r8]
 80097f0:	605a      	strne	r2, [r3, #4]
 80097f2:	e7eb      	b.n	80097cc <_malloc_r+0xa8>
 80097f4:	4623      	mov	r3, r4
 80097f6:	6864      	ldr	r4, [r4, #4]
 80097f8:	e7ae      	b.n	8009758 <_malloc_r+0x34>
 80097fa:	463c      	mov	r4, r7
 80097fc:	687f      	ldr	r7, [r7, #4]
 80097fe:	e7b6      	b.n	800976e <_malloc_r+0x4a>
 8009800:	461a      	mov	r2, r3
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	42a3      	cmp	r3, r4
 8009806:	d1fb      	bne.n	8009800 <_malloc_r+0xdc>
 8009808:	2300      	movs	r3, #0
 800980a:	6053      	str	r3, [r2, #4]
 800980c:	e7de      	b.n	80097cc <_malloc_r+0xa8>
 800980e:	230c      	movs	r3, #12
 8009810:	6033      	str	r3, [r6, #0]
 8009812:	4630      	mov	r0, r6
 8009814:	f000 f80c 	bl	8009830 <__malloc_unlock>
 8009818:	e794      	b.n	8009744 <_malloc_r+0x20>
 800981a:	6005      	str	r5, [r0, #0]
 800981c:	e7d6      	b.n	80097cc <_malloc_r+0xa8>
 800981e:	bf00      	nop
 8009820:	200022c4 	.word	0x200022c4

08009824 <__malloc_lock>:
 8009824:	4801      	ldr	r0, [pc, #4]	@ (800982c <__malloc_lock+0x8>)
 8009826:	f7ff bf00 	b.w	800962a <__retarget_lock_acquire_recursive>
 800982a:	bf00      	nop
 800982c:	200022bc 	.word	0x200022bc

08009830 <__malloc_unlock>:
 8009830:	4801      	ldr	r0, [pc, #4]	@ (8009838 <__malloc_unlock+0x8>)
 8009832:	f7ff befb 	b.w	800962c <__retarget_lock_release_recursive>
 8009836:	bf00      	nop
 8009838:	200022bc 	.word	0x200022bc

0800983c <__sflush_r>:
 800983c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009844:	0716      	lsls	r6, r2, #28
 8009846:	4605      	mov	r5, r0
 8009848:	460c      	mov	r4, r1
 800984a:	d454      	bmi.n	80098f6 <__sflush_r+0xba>
 800984c:	684b      	ldr	r3, [r1, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	dc02      	bgt.n	8009858 <__sflush_r+0x1c>
 8009852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	dd48      	ble.n	80098ea <__sflush_r+0xae>
 8009858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800985a:	2e00      	cmp	r6, #0
 800985c:	d045      	beq.n	80098ea <__sflush_r+0xae>
 800985e:	2300      	movs	r3, #0
 8009860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009864:	682f      	ldr	r7, [r5, #0]
 8009866:	6a21      	ldr	r1, [r4, #32]
 8009868:	602b      	str	r3, [r5, #0]
 800986a:	d030      	beq.n	80098ce <__sflush_r+0x92>
 800986c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	0759      	lsls	r1, r3, #29
 8009872:	d505      	bpl.n	8009880 <__sflush_r+0x44>
 8009874:	6863      	ldr	r3, [r4, #4]
 8009876:	1ad2      	subs	r2, r2, r3
 8009878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800987a:	b10b      	cbz	r3, 8009880 <__sflush_r+0x44>
 800987c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	2300      	movs	r3, #0
 8009882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009884:	6a21      	ldr	r1, [r4, #32]
 8009886:	4628      	mov	r0, r5
 8009888:	47b0      	blx	r6
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	d106      	bne.n	800989e <__sflush_r+0x62>
 8009890:	6829      	ldr	r1, [r5, #0]
 8009892:	291d      	cmp	r1, #29
 8009894:	d82b      	bhi.n	80098ee <__sflush_r+0xb2>
 8009896:	4a2a      	ldr	r2, [pc, #168]	@ (8009940 <__sflush_r+0x104>)
 8009898:	410a      	asrs	r2, r1
 800989a:	07d6      	lsls	r6, r2, #31
 800989c:	d427      	bmi.n	80098ee <__sflush_r+0xb2>
 800989e:	2200      	movs	r2, #0
 80098a0:	6062      	str	r2, [r4, #4]
 80098a2:	04d9      	lsls	r1, r3, #19
 80098a4:	6922      	ldr	r2, [r4, #16]
 80098a6:	6022      	str	r2, [r4, #0]
 80098a8:	d504      	bpl.n	80098b4 <__sflush_r+0x78>
 80098aa:	1c42      	adds	r2, r0, #1
 80098ac:	d101      	bne.n	80098b2 <__sflush_r+0x76>
 80098ae:	682b      	ldr	r3, [r5, #0]
 80098b0:	b903      	cbnz	r3, 80098b4 <__sflush_r+0x78>
 80098b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80098b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098b6:	602f      	str	r7, [r5, #0]
 80098b8:	b1b9      	cbz	r1, 80098ea <__sflush_r+0xae>
 80098ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098be:	4299      	cmp	r1, r3
 80098c0:	d002      	beq.n	80098c8 <__sflush_r+0x8c>
 80098c2:	4628      	mov	r0, r5
 80098c4:	f7ff fec2 	bl	800964c <_free_r>
 80098c8:	2300      	movs	r3, #0
 80098ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80098cc:	e00d      	b.n	80098ea <__sflush_r+0xae>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b0      	blx	r6
 80098d4:	4602      	mov	r2, r0
 80098d6:	1c50      	adds	r0, r2, #1
 80098d8:	d1c9      	bne.n	800986e <__sflush_r+0x32>
 80098da:	682b      	ldr	r3, [r5, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0c6      	beq.n	800986e <__sflush_r+0x32>
 80098e0:	2b1d      	cmp	r3, #29
 80098e2:	d001      	beq.n	80098e8 <__sflush_r+0xac>
 80098e4:	2b16      	cmp	r3, #22
 80098e6:	d11e      	bne.n	8009926 <__sflush_r+0xea>
 80098e8:	602f      	str	r7, [r5, #0]
 80098ea:	2000      	movs	r0, #0
 80098ec:	e022      	b.n	8009934 <__sflush_r+0xf8>
 80098ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f2:	b21b      	sxth	r3, r3
 80098f4:	e01b      	b.n	800992e <__sflush_r+0xf2>
 80098f6:	690f      	ldr	r7, [r1, #16]
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	d0f6      	beq.n	80098ea <__sflush_r+0xae>
 80098fc:	0793      	lsls	r3, r2, #30
 80098fe:	680e      	ldr	r6, [r1, #0]
 8009900:	bf08      	it	eq
 8009902:	694b      	ldreq	r3, [r1, #20]
 8009904:	600f      	str	r7, [r1, #0]
 8009906:	bf18      	it	ne
 8009908:	2300      	movne	r3, #0
 800990a:	eba6 0807 	sub.w	r8, r6, r7
 800990e:	608b      	str	r3, [r1, #8]
 8009910:	f1b8 0f00 	cmp.w	r8, #0
 8009914:	dde9      	ble.n	80098ea <__sflush_r+0xae>
 8009916:	6a21      	ldr	r1, [r4, #32]
 8009918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800991a:	4643      	mov	r3, r8
 800991c:	463a      	mov	r2, r7
 800991e:	4628      	mov	r0, r5
 8009920:	47b0      	blx	r6
 8009922:	2800      	cmp	r0, #0
 8009924:	dc08      	bgt.n	8009938 <__sflush_r+0xfc>
 8009926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	f04f 30ff 	mov.w	r0, #4294967295
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	4407      	add	r7, r0
 800993a:	eba8 0800 	sub.w	r8, r8, r0
 800993e:	e7e7      	b.n	8009910 <__sflush_r+0xd4>
 8009940:	dfbffffe 	.word	0xdfbffffe

08009944 <_fflush_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	690b      	ldr	r3, [r1, #16]
 8009948:	4605      	mov	r5, r0
 800994a:	460c      	mov	r4, r1
 800994c:	b913      	cbnz	r3, 8009954 <_fflush_r+0x10>
 800994e:	2500      	movs	r5, #0
 8009950:	4628      	mov	r0, r5
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	b118      	cbz	r0, 800995e <_fflush_r+0x1a>
 8009956:	6a03      	ldr	r3, [r0, #32]
 8009958:	b90b      	cbnz	r3, 800995e <_fflush_r+0x1a>
 800995a:	f7ff fc81 	bl	8009260 <__sinit>
 800995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0f3      	beq.n	800994e <_fflush_r+0xa>
 8009966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009968:	07d0      	lsls	r0, r2, #31
 800996a:	d404      	bmi.n	8009976 <_fflush_r+0x32>
 800996c:	0599      	lsls	r1, r3, #22
 800996e:	d402      	bmi.n	8009976 <_fflush_r+0x32>
 8009970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009972:	f7ff fe5a 	bl	800962a <__retarget_lock_acquire_recursive>
 8009976:	4628      	mov	r0, r5
 8009978:	4621      	mov	r1, r4
 800997a:	f7ff ff5f 	bl	800983c <__sflush_r>
 800997e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009980:	07da      	lsls	r2, r3, #31
 8009982:	4605      	mov	r5, r0
 8009984:	d4e4      	bmi.n	8009950 <_fflush_r+0xc>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	059b      	lsls	r3, r3, #22
 800998a:	d4e1      	bmi.n	8009950 <_fflush_r+0xc>
 800998c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800998e:	f7ff fe4d 	bl	800962c <__retarget_lock_release_recursive>
 8009992:	e7dd      	b.n	8009950 <_fflush_r+0xc>

08009994 <__swhatbuf_r>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	460c      	mov	r4, r1
 8009998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999c:	2900      	cmp	r1, #0
 800999e:	b096      	sub	sp, #88	@ 0x58
 80099a0:	4615      	mov	r5, r2
 80099a2:	461e      	mov	r6, r3
 80099a4:	da0d      	bge.n	80099c2 <__swhatbuf_r+0x2e>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099ac:	f04f 0100 	mov.w	r1, #0
 80099b0:	bf14      	ite	ne
 80099b2:	2340      	movne	r3, #64	@ 0x40
 80099b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099b8:	2000      	movs	r0, #0
 80099ba:	6031      	str	r1, [r6, #0]
 80099bc:	602b      	str	r3, [r5, #0]
 80099be:	b016      	add	sp, #88	@ 0x58
 80099c0:	bd70      	pop	{r4, r5, r6, pc}
 80099c2:	466a      	mov	r2, sp
 80099c4:	f000 f848 	bl	8009a58 <_fstat_r>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	dbec      	blt.n	80099a6 <__swhatbuf_r+0x12>
 80099cc:	9901      	ldr	r1, [sp, #4]
 80099ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099d6:	4259      	negs	r1, r3
 80099d8:	4159      	adcs	r1, r3
 80099da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099de:	e7eb      	b.n	80099b8 <__swhatbuf_r+0x24>

080099e0 <__smakebuf_r>:
 80099e0:	898b      	ldrh	r3, [r1, #12]
 80099e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099e4:	079d      	lsls	r5, r3, #30
 80099e6:	4606      	mov	r6, r0
 80099e8:	460c      	mov	r4, r1
 80099ea:	d507      	bpl.n	80099fc <__smakebuf_r+0x1c>
 80099ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	2301      	movs	r3, #1
 80099f6:	6163      	str	r3, [r4, #20]
 80099f8:	b003      	add	sp, #12
 80099fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099fc:	ab01      	add	r3, sp, #4
 80099fe:	466a      	mov	r2, sp
 8009a00:	f7ff ffc8 	bl	8009994 <__swhatbuf_r>
 8009a04:	9f00      	ldr	r7, [sp, #0]
 8009a06:	4605      	mov	r5, r0
 8009a08:	4639      	mov	r1, r7
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f7ff fe8a 	bl	8009724 <_malloc_r>
 8009a10:	b948      	cbnz	r0, 8009a26 <__smakebuf_r+0x46>
 8009a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a16:	059a      	lsls	r2, r3, #22
 8009a18:	d4ee      	bmi.n	80099f8 <__smakebuf_r+0x18>
 8009a1a:	f023 0303 	bic.w	r3, r3, #3
 8009a1e:	f043 0302 	orr.w	r3, r3, #2
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	e7e2      	b.n	80099ec <__smakebuf_r+0xc>
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	6020      	str	r0, [r4, #0]
 8009a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a2e:	81a3      	strh	r3, [r4, #12]
 8009a30:	9b01      	ldr	r3, [sp, #4]
 8009a32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a36:	b15b      	cbz	r3, 8009a50 <__smakebuf_r+0x70>
 8009a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f000 f81d 	bl	8009a7c <_isatty_r>
 8009a42:	b128      	cbz	r0, 8009a50 <__smakebuf_r+0x70>
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f023 0303 	bic.w	r3, r3, #3
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	81a3      	strh	r3, [r4, #12]
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	431d      	orrs	r5, r3
 8009a54:	81a5      	strh	r5, [r4, #12]
 8009a56:	e7cf      	b.n	80099f8 <__smakebuf_r+0x18>

08009a58 <_fstat_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	@ (8009a78 <_fstat_r+0x20>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	f7f7 fe9c 	bl	80017a2 <_fstat>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d102      	bne.n	8009a74 <_fstat_r+0x1c>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	b103      	cbz	r3, 8009a74 <_fstat_r+0x1c>
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	200022b8 	.word	0x200022b8

08009a7c <_isatty_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d06      	ldr	r5, [pc, #24]	@ (8009a98 <_isatty_r+0x1c>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	f7f7 fe9b 	bl	80017c2 <_isatty>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_isatty_r+0x1a>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_isatty_r+0x1a>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	200022b8 	.word	0x200022b8

08009a9c <_sbrk_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4d06      	ldr	r5, [pc, #24]	@ (8009ab8 <_sbrk_r+0x1c>)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	602b      	str	r3, [r5, #0]
 8009aa8:	f7f7 fea4 	bl	80017f4 <_sbrk>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d102      	bne.n	8009ab6 <_sbrk_r+0x1a>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	b103      	cbz	r3, 8009ab6 <_sbrk_r+0x1a>
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	200022b8 	.word	0x200022b8

08009abc <_init>:
 8009abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009abe:	bf00      	nop
 8009ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac2:	bc08      	pop	{r3}
 8009ac4:	469e      	mov	lr, r3
 8009ac6:	4770      	bx	lr

08009ac8 <_fini>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	bf00      	nop
 8009acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ace:	bc08      	pop	{r3}
 8009ad0:	469e      	mov	lr, r3
 8009ad2:	4770      	bx	lr
